
V2_Node3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf74  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800c108  0800c108  0000d108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c588  0800c588  0000e1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c588  0800c588  0000d588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c590  0800c590  0000e1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c590  0800c590  0000d590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c594  0800c594  0000d594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800c598  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1dc  2**0
                  CONTENTS
 10 .bss          00015500  200001dc  200001dc  0000e1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200156dc  200156dc  0000e1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ac8e  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f14  00000000  00000000  00028e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001848  00000000  00000000  0002cdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001300  00000000  00000000  0002e5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000264f8  00000000  00000000  0002f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e2c5  00000000  00000000  00055df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8b4f  00000000  00000000  000740b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015cc04  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007960  00000000  00000000  0015cc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001645a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c0ec 	.word	0x0800c0ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800c0ec 	.word	0x0800c0ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ea0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ea4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d013      	beq.n	8000ed8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000eb0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000eb4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000eb8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00b      	beq.n	8000ed8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ec0:	e000      	b.n	8000ec4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ec2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ec4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f9      	beq.n	8000ec2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ece:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * It reassembles 8-byte CAN frames into a full string.
 * When it finds a newline ('\n'), it sends the complete
 * string to the 'canParserQueue'.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08e      	sub	sp, #56	@ 0x38
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t data[8];
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, data);
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	f107 0214 	add.w	r2, r7, #20
 8000efc:	2100      	movs	r1, #0
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f002 fb3c 	bl	800357c <HAL_CAN_GetRxMessage>

    for (int i = 0; i < rxHeader.DLC; i++) {
 8000f04:	2300      	movs	r3, #0
 8000f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f08:	e045      	b.n	8000f96 <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
        char c = data[i];
 8000f0a:	f107 020c 	add.w	r2, r7, #12
 8000f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

        if (canRxIdx < CAN_RX_MAX_LEN - 1) {
 8000f18:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d829      	bhi.n	8000f78 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
            canRxBuf[canRxIdx++] = c;
 8000f24:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	4924      	ldr	r1, [pc, #144]	@ (8000fbc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000f2c:	600a      	str	r2, [r1, #0]
 8000f2e:	4924      	ldr	r1, [pc, #144]	@ (8000fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000f30:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000f34:	54ca      	strb	r2, [r1, r3]

            if (c == '\n') {
 8000f36:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f3a:	2b0a      	cmp	r3, #10
 8000f3c:	d128      	bne.n	8000f90 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
                canRxBuf[canRxIdx] = '\0';
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000f44:	2100      	movs	r1, #0
 8000f46:	54d1      	strb	r1, [r2, r3]
                if (xQueueSendFromISR(canParserQueue, canRxBuf, &xHigherPriorityTaskWoken) != pdPASS) {
 8000f48:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	f107 0208 	add.w	r2, r7, #8
 8000f50:	2300      	movs	r3, #0
 8000f52:	491b      	ldr	r1, [pc, #108]	@ (8000fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000f54:	f005 ff88 	bl	8006e68 <xQueueGenericSendFromISR>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d002      	beq.n	8000f64 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
                    ITM_SendChar('E'); // queue error
 8000f5e:	2045      	movs	r0, #69	@ 0x45
 8000f60:	f7ff ff9a 	bl	8000e98 <ITM_SendChar>
                }
                canRxIdx = 0;
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
                memset(canRxBuf, 0, sizeof(canRxBuf));
 8000f6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4813      	ldr	r0, [pc, #76]	@ (8000fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000f72:	f009 f863 	bl	800a03c <memset>
 8000f76:	e00b      	b.n	8000f90 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
            }
        } else {
            canRxIdx = 0;
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
            memset(canRxBuf, 0, sizeof(canRxBuf));
 8000f7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f82:	2100      	movs	r1, #0
 8000f84:	480e      	ldr	r0, [pc, #56]	@ (8000fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000f86:	f009 f859 	bl	800a03c <memset>
            ITM_SendChar('O'); // overflow
 8000f8a:	204f      	movs	r0, #79	@ 0x4f
 8000f8c:	f7ff ff84 	bl	8000e98 <ITM_SendChar>
    for (int i = 0; i < rxHeader.DLC; i++) {
 8000f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f92:	3301      	adds	r3, #1
 8000f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d8b5      	bhi.n	8000f0a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
        }
    }

    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d007      	beq.n	8000fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	f3bf 8f4f 	dsb	sy
 8000fb0:	f3bf 8f6f 	isb	sy
}
 8000fb4:	bf00      	nop
 8000fb6:	3738      	adds	r7, #56	@ 0x38
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200005f8 	.word	0x200005f8
 8000fc0:	200001f8 	.word	0x200001f8
 8000fc4:	200007e0 	.word	0x200007e0
 8000fc8:	e000ed04 	.word	0xe000ed04

08000fcc <ITM_SendChar>:
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fd4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fd8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d013      	beq.n	800100c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fe4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fe8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000fec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00b      	beq.n	800100c <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8000ff4:	e000      	b.n	8000ff8 <ITM_SendChar+0x2c>
      __NOP();
 8000ff6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ff8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f9      	beq.n	8000ff6 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001002:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	701a      	strb	r2, [r3, #0]
  return (ch);
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001022:	f001 fc79 	bl	8002918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001026:	f000 f87f 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102a:	f000 fa2d 	bl	8001488 <MX_GPIO_Init>
  MX_DMA_Init();
 800102e:	f000 fa0b 	bl	8001448 <MX_DMA_Init>
  MX_CAN1_Init();
 8001032:	f000 f95f 	bl	80012f4 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8001036:	f000 f9dd 	bl	80013f4 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 800103a:	f000 f9ad 	bl	8001398 <MX_I2C3_Init>
  MX_ADC1_Init();
 800103e:	f000 f8dd 	bl	80011fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // 1. Initialize data structure before starting tasks
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2104      	movs	r1, #4
 8001046:	4829      	ldr	r0, [pc, #164]	@ (80010ec <main+0xd0>)
 8001048:	f003 fc82 	bl	8004950 <HAL_GPIO_WritePin>
  SYS_DATA_Init();
 800104c:	f000 fdce 	bl	8001bec <SYS_DATA_Init>

  // 2. Start Continuous ADC + DMA (fills adc_buffer)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, NUM_ADC_CHANNELS);
 8001050:	2204      	movs	r2, #4
 8001052:	4927      	ldr	r1, [pc, #156]	@ (80010f0 <main+0xd4>)
 8001054:	4827      	ldr	r0, [pc, #156]	@ (80010f4 <main+0xd8>)
 8001056:	f001 fce5 	bl	8002a24 <HAL_ADC_Start_DMA>

  // 3. Create FreeRTOS Queues
  //(The handle 'canParserQueue' is defined in system_tasks.c)
  canParserQueue = xQueueCreate(3, 1024);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001060:	2003      	movs	r0, #3
 8001062:	f005 fd8d 	bl	8006b80 <xQueueGenericCreate>
 8001066:	4603      	mov	r3, r0
 8001068:	4a23      	ldr	r2, [pc, #140]	@ (80010f8 <main+0xdc>)
 800106a:	6013      	str	r3, [r2, #0]
  configASSERT(canParserQueue != NULL);
 800106c:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <main+0xdc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10b      	bne.n	800108c <main+0x70>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001078:	f383 8811 	msr	BASEPRI, r3
 800107c:	f3bf 8f6f 	isb	sy
 8001080:	f3bf 8f4f 	dsb	sy
 8001084:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <main+0x6c>

  // 4. Create FreeRTOS Tasks
  xTaskCreate(SensorAcquisitionTask, "SensorAcq", 256, NULL, 2, &SensorHandle);
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <main+0xe0>)
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	2302      	movs	r3, #2
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2300      	movs	r3, #0
 8001096:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800109a:	4919      	ldr	r1, [pc, #100]	@ (8001100 <main+0xe4>)
 800109c:	4819      	ldr	r0, [pc, #100]	@ (8001104 <main+0xe8>)
 800109e:	f006 fa0f 	bl	80074c0 <xTaskCreate>
  xTaskCreate(ControlLogicTask, "FSM Control", 256, NULL, 2, &ControlHandle);
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <main+0xec>)
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	2302      	movs	r3, #2
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2300      	movs	r3, #0
 80010ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010b0:	4916      	ldr	r1, [pc, #88]	@ (800110c <main+0xf0>)
 80010b2:	4817      	ldr	r0, [pc, #92]	@ (8001110 <main+0xf4>)
 80010b4:	f006 fa04 	bl	80074c0 <xTaskCreate>
  xTaskCreate(CANParserTask, "CANParser", 256, NULL, 3, NULL);
 80010b8:	2300      	movs	r3, #0
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	2303      	movs	r3, #3
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2300      	movs	r3, #0
 80010c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010c6:	4913      	ldr	r1, [pc, #76]	@ (8001114 <main+0xf8>)
 80010c8:	4813      	ldr	r0, [pc, #76]	@ (8001118 <main+0xfc>)
 80010ca:	f006 f9f9 	bl	80074c0 <xTaskCreate>
  xTaskCreate(CommunicationTask, "Logging Data", 256, NULL, 1, &CommHandle);
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <main+0x100>)
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	2301      	movs	r3, #1
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2300      	movs	r3, #0
 80010d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010dc:	4910      	ldr	r1, [pc, #64]	@ (8001120 <main+0x104>)
 80010de:	4811      	ldr	r0, [pc, #68]	@ (8001124 <main+0x108>)
 80010e0:	f006 f9ee 	bl	80074c0 <xTaskCreate>

  // 5. Start the scheduler
  vTaskStartScheduler();
 80010e4:	f006 fb8e 	bl	8007804 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <main+0xcc>
 80010ec:	40020c00 	.word	0x40020c00
 80010f0:	200007c8 	.word	0x200007c8
 80010f4:	200005fc 	.word	0x200005fc
 80010f8:	200007e0 	.word	0x200007e0
 80010fc:	200007d4 	.word	0x200007d4
 8001100:	0800c108 	.word	0x0800c108
 8001104:	0800271d 	.word	0x0800271d
 8001108:	200007d8 	.word	0x200007d8
 800110c:	0800c114 	.word	0x0800c114
 8001110:	08002739 	.word	0x08002739
 8001114:	0800c120 	.word	0x0800c120
 8001118:	0800279d 	.word	0x0800279d
 800111c:	200007dc 	.word	0x200007dc
 8001120:	0800c12c 	.word	0x0800c12c
 8001124:	0800287d 	.word	0x0800287d

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	@ 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2230      	movs	r2, #48	@ 0x30
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f008 ff80 	bl	800a03c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <SystemClock_Config+0xcc>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001154:	4a27      	ldr	r2, [pc, #156]	@ (80011f4 <SystemClock_Config+0xcc>)
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115a:	6413      	str	r3, [r2, #64]	@ 0x40
 800115c:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <SystemClock_Config+0xcc>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <SystemClock_Config+0xd0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a21      	ldr	r2, [pc, #132]	@ (80011f8 <SystemClock_Config+0xd0>)
 8001172:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <SystemClock_Config+0xd0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001184:	2302      	movs	r3, #2
 8001186:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800118c:	2310      	movs	r3, #16
 800118e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001190:	2302      	movs	r3, #2
 8001192:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001194:	2300      	movs	r3, #0
 8001196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001198:	2308      	movs	r3, #8
 800119a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800119c:	23a8      	movs	r3, #168	@ 0xa8
 800119e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011a4:	2307      	movs	r3, #7
 80011a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 fd2d 	bl	8004c0c <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011b8:	f000 fa34 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011bc:	230f      	movs	r3, #15
 80011be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c0:	2302      	movs	r3, #2
 80011c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	2105      	movs	r1, #5
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 ff8e 	bl	80050fc <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011e6:	f000 fa1d 	bl	8001624 <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3750      	adds	r7, #80	@ 0x50
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40007000 	.word	0x40007000

080011fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001202:	463b      	mov	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800120e:	4b36      	ldr	r3, [pc, #216]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001210:	4a36      	ldr	r2, [pc, #216]	@ (80012ec <MX_ADC1_Init+0xf0>)
 8001212:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001214:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001216:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800121a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800121c:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <MX_ADC1_Init+0xec>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001222:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001224:	2201      	movs	r2, #1
 8001226:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001228:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <MX_ADC1_Init+0xec>)
 800122a:	2201      	movs	r2, #1
 800122c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800122e:	4b2e      	ldr	r3, [pc, #184]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001236:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001238:	2200      	movs	r2, #0
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123c:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <MX_ADC1_Init+0xec>)
 800123e:	4a2c      	ldr	r2, [pc, #176]	@ (80012f0 <MX_ADC1_Init+0xf4>)
 8001240:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001242:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001248:	4b27      	ldr	r3, [pc, #156]	@ (80012e8 <MX_ADC1_Init+0xec>)
 800124a:	2204      	movs	r2, #4
 800124c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800124e:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800125c:	4822      	ldr	r0, [pc, #136]	@ (80012e8 <MX_ADC1_Init+0xec>)
 800125e:	f001 fb9d 	bl	800299c <HAL_ADC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001268:	f000 f9dc 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800126c:	230a      	movs	r3, #10
 800126e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4619      	mov	r1, r3
 800127c:	481a      	ldr	r0, [pc, #104]	@ (80012e8 <MX_ADC1_Init+0xec>)
 800127e:	f001 fd03 	bl	8002c88 <HAL_ADC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001288:	f000 f9cc 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800128c:	230b      	movs	r3, #11
 800128e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001290:	2302      	movs	r3, #2
 8001292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	4619      	mov	r1, r3
 8001298:	4813      	ldr	r0, [pc, #76]	@ (80012e8 <MX_ADC1_Init+0xec>)
 800129a:	f001 fcf5 	bl	8002c88 <HAL_ADC_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012a4:	f000 f9be 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012a8:	230c      	movs	r3, #12
 80012aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80012ac:	2303      	movs	r3, #3
 80012ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <MX_ADC1_Init+0xec>)
 80012b6:	f001 fce7 	bl	8002c88 <HAL_ADC_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80012c0:	f000 f9b0 	bl	8001624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80012c4:	230d      	movs	r3, #13
 80012c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80012c8:	2304      	movs	r3, #4
 80012ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_ADC1_Init+0xec>)
 80012d2:	f001 fcd9 	bl	8002c88 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80012dc:	f000 f9a2 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200005fc 	.word	0x200005fc
 80012ec:	40012000 	.word	0x40012000
 80012f0:	0f000001 	.word	0x0f000001

080012f4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	@ 0x28
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80012fa:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <MX_CAN1_Init+0x9c>)
 80012fc:	4a25      	ldr	r2, [pc, #148]	@ (8001394 <MX_CAN1_Init+0xa0>)
 80012fe:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8001300:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <MX_CAN1_Init+0x9c>)
 8001302:	2214      	movs	r2, #20
 8001304:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001306:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <MX_CAN1_Init+0x9c>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800130c:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <MX_CAN1_Init+0x9c>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001312:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <MX_CAN1_Init+0x9c>)
 8001314:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8001318:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <MX_CAN1_Init+0x9c>)
 800131c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001320:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001322:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <MX_CAN1_Init+0x9c>)
 8001324:	2200      	movs	r2, #0
 8001326:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <MX_CAN1_Init+0x9c>)
 800132a:	2200      	movs	r2, #0
 800132c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800132e:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <MX_CAN1_Init+0x9c>)
 8001330:	2200      	movs	r2, #0
 8001332:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001334:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <MX_CAN1_Init+0x9c>)
 8001336:	2200      	movs	r2, #0
 8001338:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <MX_CAN1_Init+0x9c>)
 800133c:	2200      	movs	r2, #0
 800133e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <MX_CAN1_Init+0x9c>)
 8001342:	2200      	movs	r2, #0
 8001344:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001346:	4812      	ldr	r0, [pc, #72]	@ (8001390 <MX_CAN1_Init+0x9c>)
 8001348:	f001 ff3e 	bl	80031c8 <HAL_CAN_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001352:	f000 f967 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001356:	2301      	movs	r3, #1
 8001358:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x446<<5;
 8001362:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 8001366:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x7FF<<5;
 800136c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001370:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800137a:	2301      	movs	r3, #1
 800137c:	61fb      	str	r3, [r7, #28]

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	4803      	ldr	r0, [pc, #12]	@ (8001390 <MX_CAN1_Init+0x9c>)
 8001384:	f002 f81c 	bl	80033c0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	@ 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200006a4 	.word	0x200006a4
 8001394:	40006400 	.word	0x40006400

08001398 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <MX_I2C3_Init+0x50>)
 800139e:	4a13      	ldr	r2, [pc, #76]	@ (80013ec <MX_I2C3_Init+0x54>)
 80013a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013a2:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <MX_I2C3_Init+0x50>)
 80013a4:	4a12      	ldr	r2, [pc, #72]	@ (80013f0 <MX_I2C3_Init+0x58>)
 80013a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <MX_I2C3_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <MX_I2C3_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <MX_I2C3_Init+0x50>)
 80013b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <MX_I2C3_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <MX_I2C3_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <MX_I2C3_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <MX_I2C3_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	@ (80013e8 <MX_I2C3_Init+0x50>)
 80013d6:	f003 fad5 	bl	8004984 <HAL_I2C_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80013e0:	f000 f920 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200006cc 	.word	0x200006cc
 80013ec:	40005c00 	.word	0x40005c00
 80013f0:	000186a0 	.word	0x000186a0

080013f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <MX_USART2_UART_Init+0x50>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_USART2_UART_Init+0x4c>)
 800142c:	f004 fb54 	bl	8005ad8 <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001436:	f000 f8f5 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000720 	.word	0x20000720
 8001444:	40004400 	.word	0x40004400

08001448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <MX_DMA_Init+0x3c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a0b      	ldr	r2, [pc, #44]	@ (8001484 <MX_DMA_Init+0x3c>)
 8001458:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_DMA_Init+0x3c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2038      	movs	r0, #56	@ 0x38
 8001470:	f002 fc8e 	bl	8003d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001474:	2038      	movs	r0, #56	@ 0x38
 8001476:	f002 fca7 	bl	8003dc8 <HAL_NVIC_EnableIRQ>

}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	@ 0x28
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b46      	ldr	r3, [pc, #280]	@ (80015bc <MX_GPIO_Init+0x134>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a45      	ldr	r2, [pc, #276]	@ (80015bc <MX_GPIO_Init+0x134>)
 80014a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b43      	ldr	r3, [pc, #268]	@ (80015bc <MX_GPIO_Init+0x134>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b3f      	ldr	r3, [pc, #252]	@ (80015bc <MX_GPIO_Init+0x134>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a3e      	ldr	r2, [pc, #248]	@ (80015bc <MX_GPIO_Init+0x134>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b3c      	ldr	r3, [pc, #240]	@ (80015bc <MX_GPIO_Init+0x134>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b38      	ldr	r3, [pc, #224]	@ (80015bc <MX_GPIO_Init+0x134>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a37      	ldr	r2, [pc, #220]	@ (80015bc <MX_GPIO_Init+0x134>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b35      	ldr	r3, [pc, #212]	@ (80015bc <MX_GPIO_Init+0x134>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b31      	ldr	r3, [pc, #196]	@ (80015bc <MX_GPIO_Init+0x134>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a30      	ldr	r2, [pc, #192]	@ (80015bc <MX_GPIO_Init+0x134>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b2e      	ldr	r3, [pc, #184]	@ (80015bc <MX_GPIO_Init+0x134>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b2a      	ldr	r3, [pc, #168]	@ (80015bc <MX_GPIO_Init+0x134>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a29      	ldr	r2, [pc, #164]	@ (80015bc <MX_GPIO_Init+0x134>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b27      	ldr	r3, [pc, #156]	@ (80015bc <MX_GPIO_Init+0x134>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AV6_Pin|Pump_P5_Pin|Pump_P6_Pin|AV7_Pin
 800152a:	2200      	movs	r2, #0
 800152c:	f243 0107 	movw	r1, #12295	@ 0x3007
 8001530:	4823      	ldr	r0, [pc, #140]	@ (80015c0 <MX_GPIO_Init+0x138>)
 8001532:	f003 fa0d 	bl	8004950 <HAL_GPIO_WritePin>
                          |Resistor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001536:	2200      	movs	r2, #0
 8001538:	f24f 0104 	movw	r1, #61444	@ 0xf004
 800153c:	4821      	ldr	r0, [pc, #132]	@ (80015c4 <MX_GPIO_Init+0x13c>)
 800153e:	f003 fa07 	bl	8004950 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pins : AV6_Pin Pump_P5_Pin Pump_P6_Pin AV7_Pin
                           Resistor_Pin */
  GPIO_InitStruct.Pin = AV6_Pin|Pump_P5_Pin|Pump_P6_Pin|AV7_Pin
 8001542:	f243 0307 	movw	r3, #12295	@ 0x3007
 8001546:	617b      	str	r3, [r7, #20]
                          |Resistor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4819      	ldr	r0, [pc, #100]	@ (80015c0 <MX_GPIO_Init+0x138>)
 800155c:	f003 f844 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : potPresence_Pin potMin_Pin */
  GPIO_InitStruct.Pin = potPresence_Pin|potMin_Pin;
 8001560:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800156a:	2302      	movs	r3, #2
 800156c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4812      	ldr	r0, [pc, #72]	@ (80015c0 <MX_GPIO_Init+0x138>)
 8001576:	f003 f837 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : waterMax_Pin waterMin_Pin processWaterMax_Pin processWaterMin_Pin */
  GPIO_InitStruct.Pin = waterMax_Pin|waterMin_Pin|processWaterMax_Pin|processWaterMin_Pin;
 800157a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001580:	2300      	movs	r3, #0
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001584:	2302      	movs	r3, #2
 8001586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	480d      	ldr	r0, [pc, #52]	@ (80015c4 <MX_GPIO_Init+0x13c>)
 8001590:	f003 f82a 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001594:	f24f 0304 	movw	r3, #61444	@ 0xf004
 8001598:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <MX_GPIO_Init+0x13c>)
 80015ae:	f003 f81b 	bl	80045e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b2:	bf00      	nop
 80015b4:	3728      	adds	r7, #40	@ 0x28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40020c00 	.word	0x40020c00

080015c8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e009      	b.n	80015ee <_write+0x26>
  {
   ITM_SendChar(*ptr++);
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	60ba      	str	r2, [r7, #8]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fcf2 	bl	8000fcc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	dbf1      	blt.n	80015da <_write+0x12>
  }
  return len;
 80015f6:	687b      	ldr	r3, [r7, #4]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d101      	bne.n	8001616 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001612:	f001 f9a3 	bl	800295c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40001000 	.word	0x40001000

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <Error_Handler+0x8>

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	4a0f      	ldr	r2, [pc, #60]	@ (800167c <HAL_MspInit+0x4c>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001644:	6453      	str	r3, [r2, #68]	@ 0x44
 8001646:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	4a08      	ldr	r2, [pc, #32]	@ (800167c <HAL_MspInit+0x4c>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	@ 0x40
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	@ 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a2f      	ldr	r2, [pc, #188]	@ (800175c <HAL_ADC_MspInit+0xdc>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d157      	bne.n	8001752 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001760 <HAL_ADC_MspInit+0xe0>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001760 <HAL_ADC_MspInit+0xe0>)
 80016ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <HAL_ADC_MspInit+0xe0>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b27      	ldr	r3, [pc, #156]	@ (8001760 <HAL_ADC_MspInit+0xe0>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a26      	ldr	r2, [pc, #152]	@ (8001760 <HAL_ADC_MspInit+0xe0>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b24      	ldr	r3, [pc, #144]	@ (8001760 <HAL_ADC_MspInit+0xe0>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = PT100_Tank_Pin|PT100_Water_Pin|pH_Sensor_Pin|HPT_Pin;
 80016da:	230f      	movs	r3, #15
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016de:	2303      	movs	r3, #3
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	481d      	ldr	r0, [pc, #116]	@ (8001764 <HAL_ADC_MspInit+0xe4>)
 80016ee:	f002 ff7b 	bl	80045e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <HAL_ADC_MspInit+0xe8>)
 80016f4:	4a1d      	ldr	r2, [pc, #116]	@ (800176c <HAL_ADC_MspInit+0xec>)
 80016f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <HAL_ADC_MspInit+0xe8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <HAL_ADC_MspInit+0xe8>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001704:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <HAL_ADC_MspInit+0xe8>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800170a:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <HAL_ADC_MspInit+0xe8>)
 800170c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001710:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <HAL_ADC_MspInit+0xe8>)
 8001714:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001718:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <HAL_ADC_MspInit+0xe8>)
 800171c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001720:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <HAL_ADC_MspInit+0xe8>)
 8001724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001728:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800172a:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <HAL_ADC_MspInit+0xe8>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001730:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <HAL_ADC_MspInit+0xe8>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001736:	480c      	ldr	r0, [pc, #48]	@ (8001768 <HAL_ADC_MspInit+0xe8>)
 8001738:	f002 fb54 	bl	8003de4 <HAL_DMA_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001742:	f7ff ff6f 	bl	8001624 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a07      	ldr	r2, [pc, #28]	@ (8001768 <HAL_ADC_MspInit+0xe8>)
 800174a:	639a      	str	r2, [r3, #56]	@ 0x38
 800174c:	4a06      	ldr	r2, [pc, #24]	@ (8001768 <HAL_ADC_MspInit+0xe8>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	@ 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40012000 	.word	0x40012000
 8001760:	40023800 	.word	0x40023800
 8001764:	40020800 	.word	0x40020800
 8001768:	20000644 	.word	0x20000644
 800176c:	40026410 	.word	0x40026410

08001770 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	@ 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a1d      	ldr	r2, [pc, #116]	@ (8001804 <HAL_CAN_MspInit+0x94>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d133      	bne.n	80017fa <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <HAL_CAN_MspInit+0x98>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <HAL_CAN_MspInit+0x98>)
 800179c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a2:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <HAL_CAN_MspInit+0x98>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <HAL_CAN_MspInit+0x98>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a14      	ldr	r2, [pc, #80]	@ (8001808 <HAL_CAN_MspInit+0x98>)
 80017b8:	f043 0308 	orr.w	r3, r3, #8
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017be:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <HAL_CAN_MspInit+0x98>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ca:	2303      	movs	r3, #3
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80017da:	2309      	movs	r3, #9
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	4809      	ldr	r0, [pc, #36]	@ (800180c <HAL_CAN_MspInit+0x9c>)
 80017e6:	f002 feff 	bl	80045e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2014      	movs	r0, #20
 80017f0:	f002 face 	bl	8003d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80017f4:	2014      	movs	r0, #20
 80017f6:	f002 fae7 	bl	8003dc8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	@ 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40006400 	.word	0x40006400
 8001808:	40023800 	.word	0x40023800
 800180c:	40020c00 	.word	0x40020c00

08001810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a29      	ldr	r2, [pc, #164]	@ (80018d4 <HAL_I2C_MspInit+0xc4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d14b      	bne.n	80018ca <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b28      	ldr	r3, [pc, #160]	@ (80018d8 <HAL_I2C_MspInit+0xc8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a27      	ldr	r2, [pc, #156]	@ (80018d8 <HAL_I2C_MspInit+0xc8>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <HAL_I2C_MspInit+0xc8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <HAL_I2C_MspInit+0xc8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a20      	ldr	r2, [pc, #128]	@ (80018d8 <HAL_I2C_MspInit+0xc8>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <HAL_I2C_MspInit+0xc8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800186a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800186e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001870:	2312      	movs	r3, #18
 8001872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800187c:	2304      	movs	r3, #4
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	4815      	ldr	r0, [pc, #84]	@ (80018dc <HAL_I2C_MspInit+0xcc>)
 8001888:	f002 feae 	bl	80045e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800188c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001892:	2312      	movs	r3, #18
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800189e:	2304      	movs	r3, #4
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <HAL_I2C_MspInit+0xd0>)
 80018aa:	f002 fe9d 	bl	80045e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <HAL_I2C_MspInit+0xc8>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	4a08      	ldr	r2, [pc, #32]	@ (80018d8 <HAL_I2C_MspInit+0xc8>)
 80018b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_I2C_MspInit+0xc8>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	@ 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40005c00 	.word	0x40005c00
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40020000 	.word	0x40020000

080018e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	@ 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1d      	ldr	r2, [pc, #116]	@ (8001978 <HAL_UART_MspInit+0x94>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d133      	bne.n	800196e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b1c      	ldr	r3, [pc, #112]	@ (800197c <HAL_UART_MspInit+0x98>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	4a1b      	ldr	r2, [pc, #108]	@ (800197c <HAL_UART_MspInit+0x98>)
 8001910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001914:	6413      	str	r3, [r2, #64]	@ 0x40
 8001916:	4b19      	ldr	r3, [pc, #100]	@ (800197c <HAL_UART_MspInit+0x98>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <HAL_UART_MspInit+0x98>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a14      	ldr	r2, [pc, #80]	@ (800197c <HAL_UART_MspInit+0x98>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_UART_MspInit+0x98>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800193e:	230c      	movs	r3, #12
 8001940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800194e:	2307      	movs	r3, #7
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	4809      	ldr	r0, [pc, #36]	@ (8001980 <HAL_UART_MspInit+0x9c>)
 800195a:	f002 fe45 	bl	80045e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	2026      	movs	r0, #38	@ 0x26
 8001964:	f002 fa14 	bl	8003d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001968:	2026      	movs	r0, #38	@ 0x26
 800196a:	f002 fa2d 	bl	8003dc8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	@ 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40004400 	.word	0x40004400
 800197c:	40023800 	.word	0x40023800
 8001980:	40020000 	.word	0x40020000

08001984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08e      	sub	sp, #56	@ 0x38
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	4b33      	ldr	r3, [pc, #204]	@ (8001a68 <HAL_InitTick+0xe4>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	4a32      	ldr	r2, [pc, #200]	@ (8001a68 <HAL_InitTick+0xe4>)
 800199e:	f043 0310 	orr.w	r3, r3, #16
 80019a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a4:	4b30      	ldr	r3, [pc, #192]	@ (8001a68 <HAL_InitTick+0xe4>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019b0:	f107 0210 	add.w	r2, r7, #16
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 fdbe 	bl	800553c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d103      	bne.n	80019d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019ca:	f003 fd8f 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 80019ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80019d0:	e004      	b.n	80019dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019d2:	f003 fd8b 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 80019d6:	4603      	mov	r3, r0
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019de:	4a23      	ldr	r2, [pc, #140]	@ (8001a6c <HAL_InitTick+0xe8>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	0c9b      	lsrs	r3, r3, #18
 80019e6:	3b01      	subs	r3, #1
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019ea:	4b21      	ldr	r3, [pc, #132]	@ (8001a70 <HAL_InitTick+0xec>)
 80019ec:	4a21      	ldr	r2, [pc, #132]	@ (8001a74 <HAL_InitTick+0xf0>)
 80019ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a70 <HAL_InitTick+0xec>)
 80019f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a70 <HAL_InitTick+0xec>)
 80019fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001a70 <HAL_InitTick+0xec>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <HAL_InitTick+0xec>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0a:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <HAL_InitTick+0xec>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a10:	4817      	ldr	r0, [pc, #92]	@ (8001a70 <HAL_InitTick+0xec>)
 8001a12:	f003 fdc5 	bl	80055a0 <HAL_TIM_Base_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d11b      	bne.n	8001a5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a24:	4812      	ldr	r0, [pc, #72]	@ (8001a70 <HAL_InitTick+0xec>)
 8001a26:	f003 fe15 	bl	8005654 <HAL_TIM_Base_Start_IT>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d111      	bne.n	8001a5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a38:	2036      	movs	r0, #54	@ 0x36
 8001a3a:	f002 f9c5 	bl	8003dc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d808      	bhi.n	8001a56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	2036      	movs	r0, #54	@ 0x36
 8001a4a:	f002 f9a1 	bl	8003d90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <HAL_InitTick+0xf4>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e002      	b.n	8001a5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3738      	adds	r7, #56	@ 0x38
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	431bde83 	.word	0x431bde83
 8001a70:	20000768 	.word	0x20000768
 8001a74:	40001000 	.word	0x40001000
 8001a78:	20000004 	.word	0x20000004

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <NMI_Handler+0x4>

08001a84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <HardFault_Handler+0x4>

08001a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <MemManage_Handler+0x4>

08001a94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <BusFault_Handler+0x4>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <UsageFault_Handler+0x4>

08001aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ab8:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <CAN1_RX0_IRQHandler+0x10>)
 8001aba:	f001 fe81 	bl	80037c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200006a4 	.word	0x200006a4

08001ac8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001acc:	4802      	ldr	r0, [pc, #8]	@ (8001ad8 <USART2_IRQHandler+0x10>)
 8001ace:	f004 f853 	bl	8005b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000720 	.word	0x20000720

08001adc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ae0:	4802      	ldr	r0, [pc, #8]	@ (8001aec <TIM6_DAC_IRQHandler+0x10>)
 8001ae2:	f003 fe27 	bl	8005734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000768 	.word	0x20000768

08001af0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001af4:	4802      	ldr	r0, [pc, #8]	@ (8001b00 <DMA2_Stream0_IRQHandler+0x10>)
 8001af6:	f002 fb0d 	bl	8004114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000644 	.word	0x20000644

08001b04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return 1;
 8001b08:	2301      	movs	r3, #1
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_kill>:

int _kill(int pid, int sig)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b1e:	f008 faf1 	bl	800a104 <__errno>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2216      	movs	r2, #22
 8001b26:	601a      	str	r2, [r3, #0]
  return -1;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_exit>:

void _exit (int status)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ffe7 	bl	8001b14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b46:	bf00      	nop
 8001b48:	e7fd      	b.n	8001b46 <_exit+0x12>

08001b4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e00a      	b.n	8001b72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b5c:	f3af 8000 	nop.w
 8001b60:	4601      	mov	r1, r0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	60ba      	str	r2, [r7, #8]
 8001b68:	b2ca      	uxtb	r2, r1
 8001b6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	dbf0      	blt.n	8001b5c <_read+0x12>
  }

  return len;
 8001b7a:	687b      	ldr	r3, [r7, #4]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bac:	605a      	str	r2, [r3, #4]
  return 0;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_isatty>:

int _isatty(int file)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc4:	2301      	movs	r3, #1
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <SYS_DATA_Init>:

/**
 * @brief Initializes the global system data structure to safe, known default values.
 * Should be called once during system startup (after HAL_Init).
 */
void SYS_DATA_Init(void) {
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
    // Analog Sensors Initialization
    g_SystemData.pt100_tank_temp = 0.0f;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <SYS_DATA_Init+0x50>)
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
    g_SystemData.pt100_water_temp = 0.0f;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <SYS_DATA_Init+0x50>)
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	605a      	str	r2, [r3, #4]
    g_SystemData.ph_value = 7.0f; // Default to neutral pH
 8001c00:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <SYS_DATA_Init+0x50>)
 8001c02:	4a0f      	ldr	r2, [pc, #60]	@ (8001c40 <SYS_DATA_Init+0x54>)
 8001c04:	609a      	str	r2, [r3, #8]
    g_SystemData.hpt_value = 0.0f; // Default to zero level/pressure
 8001c06:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <SYS_DATA_Init+0x50>)
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]

    // Digital Sensors Initialization
    g_SystemData.processWaterMin_flag = false;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <SYS_DATA_Init+0x50>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	741a      	strb	r2, [r3, #16]
    g_SystemData.processWaterMax_flag = false;
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <SYS_DATA_Init+0x50>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	745a      	strb	r2, [r3, #17]
    g_SystemData.waterMin_flag = false;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <SYS_DATA_Init+0x50>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	749a      	strb	r2, [r3, #18]
    g_SystemData.waterMax_flag = false;
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <SYS_DATA_Init+0x50>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	74da      	strb	r2, [r3, #19]
    g_SystemData.potPresence_flag = false;
 8001c26:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <SYS_DATA_Init+0x50>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	751a      	strb	r2, [r3, #20]
    g_SystemData.potMin_flag = false;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <SYS_DATA_Init+0x50>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	755a      	strb	r2, [r3, #21]
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	200007b0 	.word	0x200007b0
 8001c40:	40e00000 	.word	0x40e00000

08001c44 <READ_pH_SENSOR>:
 * @note  Calibration formula: pH = 7.0 * V_measured.
 * Assumes VDD_A = 3.3V and a 12-bit ADC (4095 max value).
 * The measurement range is capped at 2.0V to prevent over-scaling.
 * @return The calculated pH value (float).
 */
float READ_pH_SENSOR(void){
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
	uint16_t adc_value = adc_buffer[2];
 8001c4a:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <READ_pH_SENSOR+0x68>)
 8001c4c:	889b      	ldrh	r3, [r3, #4]
 8001c4e:	817b      	strh	r3, [r7, #10]
	float voltage = (adc_value / 4095.0f) * 3.3f;
 8001c50:	897b      	ldrh	r3, [r7, #10]
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c5a:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001cb0 <READ_pH_SENSOR+0x6c>
 8001c5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c62:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001cb4 <READ_pH_SENSOR+0x70>
 8001c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c6a:	edc7 7a03 	vstr	s15, [r7, #12]

	// Apply a cap on the voltage to prevent erroneous readings from scaling
	if (voltage > 2.0f) {
 8001c6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c72:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7e:	dd02      	ble.n	8001c86 <READ_pH_SENSOR+0x42>
        voltage = 2.0f;
 8001c80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c84:	60fb      	str	r3, [r7, #12]
    }

	// Linearly scale voltage to pH (pH = 7 * Voltage)
	float pH = 7.0f * voltage;
 8001c86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c8a:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8001c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c92:	edc7 7a01 	vstr	s15, [r7, #4]

	return pH;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	ee07 3a90 	vmov	s15, r3
}
 8001c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200007c8 	.word	0x200007c8
 8001cb0:	457ff000 	.word	0x457ff000
 8001cb4:	40533333 	.word	0x40533333

08001cb8 <READ_WATER_TEMP>:
 * @note  Assumes a 4-20mA sensor with a 150 Ohm shunt resistor (V = I * R = 20mA * 150 Ohm = 3.0V max).
 * The temperature range is assumed to be -50°C to 200°C (range 250°C).
 * Scaling: Temp = (((I_mA - 4.0) / 16.0) * 250.0) - 50.0
 * @return The calculated temperature in °C (float).
 */
float READ_WATER_TEMP(void){
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
	uint16_t adc_value = adc_buffer[1];
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <READ_WATER_TEMP+0x80>)
 8001cc0:	885b      	ldrh	r3, [r3, #2]
 8001cc2:	81fb      	strh	r3, [r7, #14]
	float voltage = (adc_value / 4095.0f) * 3.3f;
 8001cc4:	89fb      	ldrh	r3, [r7, #14]
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cce:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001d3c <READ_WATER_TEMP+0x84>
 8001cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001d40 <READ_WATER_TEMP+0x88>
 8001cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cde:	edc7 7a02 	vstr	s15, [r7, #8]

    // Convert Voltage (V_shunt) to Current (mA)
	float current_mA = (voltage / 150.0f) * 1000.0f; // V / 150 Ohm * 1000 = mA
 8001ce2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ce6:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001d44 <READ_WATER_TEMP+0x8c>
 8001cea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cee:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001d48 <READ_WATER_TEMP+0x90>
 8001cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf6:	edc7 7a01 	vstr	s15, [r7, #4]

    // Convert 4-20mA to Temperature range (-50C to 200C)
	float temperature = ((current_mA - 4.0f) / 16.0f) * 250.0f - 50.0f;
 8001cfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cfe:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001d02:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001d06:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001d0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d0e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001d4c <READ_WATER_TEMP+0x94>
 8001d12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d16:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001d50 <READ_WATER_TEMP+0x98>
 8001d1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d1e:	edc7 7a00 	vstr	s15, [r7]

	return temperature;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	ee07 3a90 	vmov	s15, r3
}
 8001d28:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	200007c8 	.word	0x200007c8
 8001d3c:	457ff000 	.word	0x457ff000
 8001d40:	40533333 	.word	0x40533333
 8001d44:	43160000 	.word	0x43160000
 8001d48:	447a0000 	.word	0x447a0000
 8001d4c:	437a0000 	.word	0x437a0000
 8001d50:	42480000 	.word	0x42480000

08001d54 <READ_TANK_TEMP>:
/**
 * @brief Converts raw ADC value for the Tank Temperature Sensor (PT100) to degrees Celsius.
 * @note  Same scaling/assumptions as the Water Temperature Sensor.
 * @return The calculated temperature in °C (float).
 */
float READ_TANK_TEMP(void){
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
	uint16_t adc_value = adc_buffer[0];
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <READ_TANK_TEMP+0x80>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	81fb      	strh	r3, [r7, #14]
	float voltage = (adc_value / 4095.0f) * 3.3f;
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6a:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001dd8 <READ_TANK_TEMP+0x84>
 8001d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d72:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001ddc <READ_TANK_TEMP+0x88>
 8001d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7a:	edc7 7a02 	vstr	s15, [r7, #8]

    // Convert Voltage (V_shunt) to Current (mA)
	float current_mA = (voltage / 150.0f) * 1000.0f; // V / 150 Ohm * 1000 = mA
 8001d7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d82:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001de0 <READ_TANK_TEMP+0x8c>
 8001d86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d8a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001de4 <READ_TANK_TEMP+0x90>
 8001d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d92:	edc7 7a01 	vstr	s15, [r7, #4]

    // Convert 4-20mA to Temperature range (-50C to 200C)
	float temperature = ((current_mA - 4.0f) / 16.0f) * 250.0f - 50.0f;
 8001d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d9a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001d9e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001da2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001daa:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001de8 <READ_TANK_TEMP+0x94>
 8001dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001dec <READ_TANK_TEMP+0x98>
 8001db6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001dba:	edc7 7a00 	vstr	s15, [r7]

	return temperature;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	ee07 3a90 	vmov	s15, r3
}
 8001dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	200007c8 	.word	0x200007c8
 8001dd8:	457ff000 	.word	0x457ff000
 8001ddc:	40533333 	.word	0x40533333
 8001de0:	43160000 	.word	0x43160000
 8001de4:	447a0000 	.word	0x447a0000
 8001de8:	437a0000 	.word	0x437a0000
 8001dec:	42480000 	.word	0x42480000

08001df0 <READ_OIL_LEVEL>:
 * @note  Assumes a 4-20mA sensor.
 * The level range is assumed to be 0 to 13 units (e.g., cm or inches).
 * Scaling: Level = ((I_mA - 4.0) / 16.0) * 13.0
 * @return The calculated oil level (float).
 */
float READ_OIL_LEVEL(void){
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
	uint16_t adc_value = adc_buffer[3];
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <READ_OIL_LEVEL+0x78>)
 8001df8:	88db      	ldrh	r3, [r3, #6]
 8001dfa:	81fb      	strh	r3, [r7, #14]
	float voltage = (adc_value / 4095.0f) * 3.3f;
 8001dfc:	89fb      	ldrh	r3, [r7, #14]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e06:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001e6c <READ_OIL_LEVEL+0x7c>
 8001e0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e0e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001e70 <READ_OIL_LEVEL+0x80>
 8001e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e16:	edc7 7a02 	vstr	s15, [r7, #8]

    // Convert Voltage (V_shunt) to Current (mA)
	float current_mA = (voltage / 150.0f) * 1000.0f; // V / 150 Ohm * 1000 = mA
 8001e1a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e1e:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001e74 <READ_OIL_LEVEL+0x84>
 8001e22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e26:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001e78 <READ_OIL_LEVEL+0x88>
 8001e2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2e:	edc7 7a01 	vstr	s15, [r7, #4]

    // Convert 4-20mA to Oil Level range (0 to 13 units)
	float oil_level = ((current_mA - 4.0f) / 16.0f) * 13.0f;
 8001e32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e36:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001e3a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e3e:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001e42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e46:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8001e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e4e:	edc7 7a00 	vstr	s15, [r7]

	return oil_level;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	ee07 3a90 	vmov	s15, r3
}
 8001e58:	eeb0 0a67 	vmov.f32	s0, s15
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	200007c8 	.word	0x200007c8
 8001e6c:	457ff000 	.word	0x457ff000
 8001e70:	40533333 	.word	0x40533333
 8001e74:	43160000 	.word	0x43160000
 8001e78:	447a0000 	.word	0x447a0000

08001e7c <SYS_DATA_UpdateAnalog>:
 * @brief Reads the raw ADC data from the DMA buffer and converts it into physical units,
 * storing the results in the global SystemData_t structure.
 * @note  This function relies on the ADC and DMA being running in the background
 * to ensure the 'adc_buffer' contains fresh data.
 */
void SYS_DATA_UpdateAnalog(void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	// Note: The index corresponds to the ADC channel Rank/Sequence configured in MX_ADC1_Init
	g_SystemData.pt100_tank_temp = READ_TANK_TEMP();    // Rank 1, Buffer Index 0
 8001e80:	f7ff ff68 	bl	8001d54 <READ_TANK_TEMP>
 8001e84:	eef0 7a40 	vmov.f32	s15, s0
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <SYS_DATA_UpdateAnalog+0x40>)
 8001e8a:	edc3 7a00 	vstr	s15, [r3]
    g_SystemData.pt100_water_temp = READ_WATER_TEMP();  // Rank 2, Buffer Index 1
 8001e8e:	f7ff ff13 	bl	8001cb8 <READ_WATER_TEMP>
 8001e92:	eef0 7a40 	vmov.f32	s15, s0
 8001e96:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <SYS_DATA_UpdateAnalog+0x40>)
 8001e98:	edc3 7a01 	vstr	s15, [r3, #4]
    g_SystemData.ph_value = READ_pH_SENSOR();          // Rank 3, Buffer Index 2
 8001e9c:	f7ff fed2 	bl	8001c44 <READ_pH_SENSOR>
 8001ea0:	eef0 7a40 	vmov.f32	s15, s0
 8001ea4:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <SYS_DATA_UpdateAnalog+0x40>)
 8001ea6:	edc3 7a02 	vstr	s15, [r3, #8]
    g_SystemData.hpt_value = READ_OIL_LEVEL();         // Rank 4, Buffer Index 3
 8001eaa:	f7ff ffa1 	bl	8001df0 <READ_OIL_LEVEL>
 8001eae:	eef0 7a40 	vmov.f32	s15, s0
 8001eb2:	4b02      	ldr	r3, [pc, #8]	@ (8001ebc <SYS_DATA_UpdateAnalog+0x40>)
 8001eb4:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200007b0 	.word	0x200007b0

08001ec0 <SYS_DATA_UpdateDigital>:
 * @brief Reads all digital sensor states (limit switches, presence sensors)
 * directly from the configured GPIO pins and stores them in the structure.
 * @note  Assumes that all GPIOs are configured as inputs.
 * Active HIGH (GPIO_PIN_SET) indicates the condition is met, unless specified.
 */
void SYS_DATA_UpdateDigital(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0

    // Water level sensors
    g_SystemData.waterMin_flag = (HAL_GPIO_ReadPin(waterMin_GPIO_Port, waterMin_Pin) == GPIO_PIN_SET);
 8001ec4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ec8:	4826      	ldr	r0, [pc, #152]	@ (8001f64 <SYS_DATA_UpdateDigital+0xa4>)
 8001eca:	f002 fd29 	bl	8004920 <HAL_GPIO_ReadPin>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <SYS_DATA_UpdateDigital+0xa8>)
 8001edc:	749a      	strb	r2, [r3, #18]
    g_SystemData.waterMax_flag = (HAL_GPIO_ReadPin(waterMax_GPIO_Port, waterMax_Pin) == GPIO_PIN_SET);
 8001ede:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ee2:	4820      	ldr	r0, [pc, #128]	@ (8001f64 <SYS_DATA_UpdateDigital+0xa4>)
 8001ee4:	f002 fd1c 	bl	8004920 <HAL_GPIO_ReadPin>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	bf0c      	ite	eq
 8001eee:	2301      	moveq	r3, #1
 8001ef0:	2300      	movne	r3, #0
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <SYS_DATA_UpdateDigital+0xa8>)
 8001ef6:	74da      	strb	r2, [r3, #19]

    // Pot presence/minimum level sensors
    // Note: potPresence is configured as active LOW (RESET)
    g_SystemData.potPresence_flag = (HAL_GPIO_ReadPin(potPresence_GPIO_Port, potPresence_Pin) == GPIO_PIN_RESET);
 8001ef8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001efc:	481b      	ldr	r0, [pc, #108]	@ (8001f6c <SYS_DATA_UpdateDigital+0xac>)
 8001efe:	f002 fd0f 	bl	8004920 <HAL_GPIO_ReadPin>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <SYS_DATA_UpdateDigital+0xa8>)
 8001f10:	751a      	strb	r2, [r3, #20]
    g_SystemData.potMin_flag = (HAL_GPIO_ReadPin(potMin_GPIO_Port, potMin_Pin)== GPIO_PIN_SET);
 8001f12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f16:	4815      	ldr	r0, [pc, #84]	@ (8001f6c <SYS_DATA_UpdateDigital+0xac>)
 8001f18:	f002 fd02 	bl	8004920 <HAL_GPIO_ReadPin>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	bf0c      	ite	eq
 8001f22:	2301      	moveq	r3, #1
 8001f24:	2300      	movne	r3, #0
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <SYS_DATA_UpdateDigital+0xa8>)
 8001f2a:	755a      	strb	r2, [r3, #21]

    // Process water min/max sensors
    g_SystemData.processWaterMax_flag = (HAL_GPIO_ReadPin(processWaterMax_GPIO_Port, processWaterMax_Pin) == GPIO_PIN_SET);
 8001f2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f30:	480c      	ldr	r0, [pc, #48]	@ (8001f64 <SYS_DATA_UpdateDigital+0xa4>)
 8001f32:	f002 fcf5 	bl	8004920 <HAL_GPIO_ReadPin>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <SYS_DATA_UpdateDigital+0xa8>)
 8001f44:	745a      	strb	r2, [r3, #17]
    g_SystemData.processWaterMin_flag = (HAL_GPIO_ReadPin(processWaterMin_GPIO_Port, processWaterMin_Pin) == GPIO_PIN_SET);
 8001f46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f4a:	4806      	ldr	r0, [pc, #24]	@ (8001f64 <SYS_DATA_UpdateDigital+0xa4>)
 8001f4c:	f002 fce8 	bl	8004920 <HAL_GPIO_ReadPin>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	bf0c      	ite	eq
 8001f56:	2301      	moveq	r3, #1
 8001f58:	2300      	movne	r3, #0
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b02      	ldr	r3, [pc, #8]	@ (8001f68 <SYS_DATA_UpdateDigital+0xa8>)
 8001f5e:	741a      	strb	r2, [r3, #16]
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40020c00 	.word	0x40020c00
 8001f68:	200007b0 	.word	0x200007b0
 8001f6c:	40020400 	.word	0x40020400

08001f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f74:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <SystemInit+0x20>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7a:	4a05      	ldr	r2, [pc, #20]	@ (8001f90 <SystemInit+0x20>)
 8001f7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d801      	bhi.n	8001fae <jsmn_alloc_token+0x1a>
    return NULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e014      	b.n	8001fd8 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	1c59      	adds	r1, r3, #1
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	6051      	str	r1, [r2, #4]
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8001fd6:	697b      	ldr	r3, [r7, #20]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	7afa      	ldrb	r2, [r7, #11]
 8001ff8:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	605a      	str	r2, [r3, #4]
  token->end = end;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800202c:	e03f      	b.n	80020ae <jsmn_parse_primitive+0x96>
    switch (js[parser->pos]) {
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b7d      	cmp	r3, #125	@ 0x7d
 800203a:	d045      	beq.n	80020c8 <jsmn_parse_primitive+0xb0>
 800203c:	2b7d      	cmp	r3, #125	@ 0x7d
 800203e:	dc1c      	bgt.n	800207a <jsmn_parse_primitive+0x62>
 8002040:	2b5d      	cmp	r3, #93	@ 0x5d
 8002042:	d041      	beq.n	80020c8 <jsmn_parse_primitive+0xb0>
 8002044:	2b5d      	cmp	r3, #93	@ 0x5d
 8002046:	dc18      	bgt.n	800207a <jsmn_parse_primitive+0x62>
 8002048:	2b3a      	cmp	r3, #58	@ 0x3a
 800204a:	dc16      	bgt.n	800207a <jsmn_parse_primitive+0x62>
 800204c:	2b20      	cmp	r3, #32
 800204e:	da04      	bge.n	800205a <jsmn_parse_primitive+0x42>
 8002050:	2b0a      	cmp	r3, #10
 8002052:	dc10      	bgt.n	8002076 <jsmn_parse_primitive+0x5e>
 8002054:	2b09      	cmp	r3, #9
 8002056:	da37      	bge.n	80020c8 <jsmn_parse_primitive+0xb0>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8002058:	e00f      	b.n	800207a <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 800205a:	3b20      	subs	r3, #32
 800205c:	4a31      	ldr	r2, [pc, #196]	@ (8002124 <jsmn_parse_primitive+0x10c>)
 800205e:	fa22 f303 	lsr.w	r3, r2, r3
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d129      	bne.n	80020c8 <jsmn_parse_primitive+0xb0>
      break;
 8002074:	e001      	b.n	800207a <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 8002076:	2b0d      	cmp	r3, #13
 8002078:	d026      	beq.n	80020c8 <jsmn_parse_primitive+0xb0>
      break;
 800207a:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	4413      	add	r3, r2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b1f      	cmp	r3, #31
 8002088:	d906      	bls.n	8002098 <jsmn_parse_primitive+0x80>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	4413      	add	r3, r2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b7e      	cmp	r3, #126	@ 0x7e
 8002096:	d905      	bls.n	80020a4 <jsmn_parse_primitive+0x8c>
      parser->pos = start;
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 800209e:	f06f 0301 	mvn.w	r3, #1
 80020a2:	e03a      	b.n	800211a <jsmn_parse_primitive+0x102>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d909      	bls.n	80020cc <jsmn_parse_primitive+0xb4>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	4413      	add	r3, r2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1b3      	bne.n	800202e <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 80020c6:	e001      	b.n	80020cc <jsmn_parse_primitive+0xb4>
      goto found;
 80020c8:	bf00      	nop
 80020ca:	e000      	b.n	80020ce <jsmn_parse_primitive+0xb6>
found:
 80020cc:	bf00      	nop
  if (tokens == NULL) {
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d106      	bne.n	80020e2 <jsmn_parse_primitive+0xca>
    parser->pos--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	1e5a      	subs	r2, r3, #1
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	601a      	str	r2, [r3, #0]
    return 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	e01b      	b.n	800211a <jsmn_parse_primitive+0x102>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 80020e2:	6a3a      	ldr	r2, [r7, #32]
 80020e4:	6839      	ldr	r1, [r7, #0]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7ff ff54 	bl	8001f94 <jsmn_alloc_token>
 80020ec:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <jsmn_parse_primitive+0xe8>
    parser->pos = start;
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	e00c      	b.n	800211a <jsmn_parse_primitive+0x102>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	2108      	movs	r1, #8
 8002108:	6938      	ldr	r0, [r7, #16]
 800210a:	f7ff ff6b 	bl	8001fe4 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	1e5a      	subs	r2, r3, #1
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]
  return 0;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	04001001 	.word	0x04001001

08002128 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002146:	e0ba      	b.n	80022be <jsmn_parse_string+0x196>
    char c = js[parser->pos];
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	4413      	add	r3, r2
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	2b22      	cmp	r3, #34	@ 0x22
 8002158:	d11d      	bne.n	8002196 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <jsmn_parse_string+0x3c>
        return 0;
 8002160:	2300      	movs	r3, #0
 8002162:	e0be      	b.n	80022e2 <jsmn_parse_string+0x1ba>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002164:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002166:	6839      	ldr	r1, [r7, #0]
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f7ff ff13 	bl	8001f94 <jsmn_alloc_token>
 800216e:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d105      	bne.n	8002182 <jsmn_parse_string+0x5a>
        parser->pos = start;
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
 8002180:	e0af      	b.n	80022e2 <jsmn_parse_string+0x1ba>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2104      	movs	r1, #4
 800218c:	6938      	ldr	r0, [r7, #16]
 800218e:	f7ff ff29 	bl	8001fe4 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8002192:	2300      	movs	r3, #0
 8002194:	e0a5      	b.n	80022e2 <jsmn_parse_string+0x1ba>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	2b5c      	cmp	r3, #92	@ 0x5c
 800219a:	f040 808b 	bne.w	80022b4 <jsmn_parse_string+0x18c>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	f240 8084 	bls.w	80022b4 <jsmn_parse_string+0x18c>
      int i;
      parser->pos++;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	4413      	add	r3, r2
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b75      	cmp	r3, #117	@ 0x75
 80021c2:	dc70      	bgt.n	80022a6 <jsmn_parse_string+0x17e>
 80021c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80021c6:	da04      	bge.n	80021d2 <jsmn_parse_string+0xaa>
 80021c8:	2b22      	cmp	r3, #34	@ 0x22
 80021ca:	d072      	beq.n	80022b2 <jsmn_parse_string+0x18a>
 80021cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80021ce:	d070      	beq.n	80022b2 <jsmn_parse_string+0x18a>
 80021d0:	e069      	b.n	80022a6 <jsmn_parse_string+0x17e>
 80021d2:	3b5c      	subs	r3, #92	@ 0x5c
 80021d4:	2201      	movs	r2, #1
 80021d6:	409a      	lsls	r2, r3
 80021d8:	4b44      	ldr	r3, [pc, #272]	@ (80022ec <jsmn_parse_string+0x1c4>)
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf14      	ite	ne
 80021e0:	2301      	movne	r3, #1
 80021e2:	2300      	moveq	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d163      	bne.n	80022b2 <jsmn_parse_string+0x18a>
 80021ea:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	bf14      	ite	ne
 80021f2:	2301      	movne	r3, #1
 80021f4:	2300      	moveq	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d054      	beq.n	80022a6 <jsmn_parse_string+0x17e>
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	e037      	b.n	800227c <jsmn_parse_string+0x154>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	4413      	add	r3, r2
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b2f      	cmp	r3, #47	@ 0x2f
 8002218:	d906      	bls.n	8002228 <jsmn_parse_string+0x100>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b39      	cmp	r3, #57	@ 0x39
 8002226:	d921      	bls.n	800226c <jsmn_parse_string+0x144>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	4413      	add	r3, r2
 8002230:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002232:	2b40      	cmp	r3, #64	@ 0x40
 8002234:	d906      	bls.n	8002244 <jsmn_parse_string+0x11c>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	4413      	add	r3, r2
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b46      	cmp	r3, #70	@ 0x46
 8002242:	d913      	bls.n	800226c <jsmn_parse_string+0x144>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	4413      	add	r3, r2
 800224c:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 800224e:	2b60      	cmp	r3, #96	@ 0x60
 8002250:	d906      	bls.n	8002260 <jsmn_parse_string+0x138>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	4413      	add	r3, r2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b66      	cmp	r3, #102	@ 0x66
 800225e:	d905      	bls.n	800226c <jsmn_parse_string+0x144>
            parser->pos = start;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8002266:	f06f 0301 	mvn.w	r3, #1
 800226a:	e03a      	b.n	80022e2 <jsmn_parse_string+0x1ba>
          }
          parser->pos++;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	601a      	str	r2, [r3, #0]
             i++) {
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3301      	adds	r3, #1
 800227a:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b03      	cmp	r3, #3
 8002280:	dc0b      	bgt.n	800229a <jsmn_parse_string+0x172>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	d906      	bls.n	800229a <jsmn_parse_string+0x172>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	4413      	add	r3, r2
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1b8      	bne.n	800220c <jsmn_parse_string+0xe4>
        }
        parser->pos--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	1e5a      	subs	r2, r3, #1
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	601a      	str	r2, [r3, #0]
        break;
 80022a4:	e006      	b.n	80022b4 <jsmn_parse_string+0x18c>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 80022ac:	f06f 0301 	mvn.w	r3, #1
 80022b0:	e017      	b.n	80022e2 <jsmn_parse_string+0x1ba>
        break;
 80022b2:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d907      	bls.n	80022d8 <jsmn_parse_string+0x1b0>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f47f af38 	bne.w	8002148 <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 80022de:	f06f 0302 	mvn.w	r3, #2
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3720      	adds	r7, #32
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	01440441 	.word	0x01440441

080022f0 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	@ 0x30
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002304:	e176      	b.n	80025f4 <jsmn_parse+0x304>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	4413      	add	r3, r2
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8002312:	7ffb      	ldrb	r3, [r7, #31]
 8002314:	2b7d      	cmp	r3, #125	@ 0x7d
 8002316:	d06c      	beq.n	80023f2 <jsmn_parse+0x102>
 8002318:	2b7d      	cmp	r3, #125	@ 0x7d
 800231a:	f300 8136 	bgt.w	800258a <jsmn_parse+0x29a>
 800231e:	2b7b      	cmp	r3, #123	@ 0x7b
 8002320:	d030      	beq.n	8002384 <jsmn_parse+0x94>
 8002322:	2b7b      	cmp	r3, #123	@ 0x7b
 8002324:	f300 8131 	bgt.w	800258a <jsmn_parse+0x29a>
 8002328:	2b5d      	cmp	r3, #93	@ 0x5d
 800232a:	d062      	beq.n	80023f2 <jsmn_parse+0x102>
 800232c:	2b5d      	cmp	r3, #93	@ 0x5d
 800232e:	f300 812c 	bgt.w	800258a <jsmn_parse+0x29a>
 8002332:	2b5b      	cmp	r3, #91	@ 0x5b
 8002334:	d026      	beq.n	8002384 <jsmn_parse+0x94>
 8002336:	2b5b      	cmp	r3, #91	@ 0x5b
 8002338:	f300 8127 	bgt.w	800258a <jsmn_parse+0x29a>
 800233c:	2b3a      	cmp	r3, #58	@ 0x3a
 800233e:	f000 80d6 	beq.w	80024ee <jsmn_parse+0x1fe>
 8002342:	2b3a      	cmp	r3, #58	@ 0x3a
 8002344:	f300 8121 	bgt.w	800258a <jsmn_parse+0x29a>
 8002348:	2b2c      	cmp	r3, #44	@ 0x2c
 800234a:	f000 80d7 	beq.w	80024fc <jsmn_parse+0x20c>
 800234e:	2b2c      	cmp	r3, #44	@ 0x2c
 8002350:	f300 811b 	bgt.w	800258a <jsmn_parse+0x29a>
 8002354:	2b20      	cmp	r3, #32
 8002356:	dc11      	bgt.n	800237c <jsmn_parse+0x8c>
 8002358:	2b09      	cmp	r3, #9
 800235a:	f2c0 8116 	blt.w	800258a <jsmn_parse+0x29a>
 800235e:	3b09      	subs	r3, #9
 8002360:	4a91      	ldr	r2, [pc, #580]	@ (80025a8 <jsmn_parse+0x2b8>)
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	bf14      	ite	ne
 800236e:	2301      	movne	r3, #1
 8002370:	2300      	moveq	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	f040 812d 	bne.w	80025d4 <jsmn_parse+0x2e4>
 800237a:	e106      	b.n	800258a <jsmn_parse+0x29a>
 800237c:	2b22      	cmp	r3, #34	@ 0x22
 800237e:	f000 8092 	beq.w	80024a6 <jsmn_parse+0x1b6>
 8002382:	e102      	b.n	800258a <jsmn_parse+0x29a>
    case '{':
    case '[':
      count++;
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	3301      	adds	r3, #1
 8002388:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8123 	beq.w	80025d8 <jsmn_parse+0x2e8>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002394:	6839      	ldr	r1, [r7, #0]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f7ff fdfc 	bl	8001f94 <jsmn_alloc_token>
 800239c:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <jsmn_parse+0xba>
        return JSMN_ERROR_NOMEM;
 80023a4:	f04f 33ff 	mov.w	r3, #4294967295
 80023a8:	e153      	b.n	8002652 <jsmn_parse+0x362>
      }
      if (parser->toksuper != -1) {
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b2:	d00a      	beq.n	80023ca <jsmn_parse+0xda>
        jsmntok_t *t = &tokens[parser->toksuper];
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	4413      	add	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80023ca:	7ffb      	ldrb	r3, [r7, #31]
 80023cc:	2b7b      	cmp	r3, #123	@ 0x7b
 80023ce:	d101      	bne.n	80023d4 <jsmn_parse+0xe4>
 80023d0:	2201      	movs	r2, #1
 80023d2:	e000      	b.n	80023d6 <jsmn_parse+0xe6>
 80023d4:	2202      	movs	r2, #2
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	461a      	mov	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	609a      	str	r2, [r3, #8]
      break;
 80023f0:	e0fb      	b.n	80025ea <jsmn_parse+0x2fa>
    case '}':
    case ']':
      if (tokens == NULL) {
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80f1 	beq.w	80025dc <jsmn_parse+0x2ec>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80023fa:	7ffb      	ldrb	r3, [r7, #31]
 80023fc:	2b7d      	cmp	r3, #125	@ 0x7d
 80023fe:	d101      	bne.n	8002404 <jsmn_parse+0x114>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <jsmn_parse+0x116>
 8002404:	2302      	movs	r3, #2
 8002406:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	3b01      	subs	r3, #1
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002410:	e024      	b.n	800245c <jsmn_parse+0x16c>
        token = &tokens[i];
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	4413      	add	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d017      	beq.n	8002456 <jsmn_parse+0x166>
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242e:	d112      	bne.n	8002456 <jsmn_parse+0x166>
          if (token->type != type) {
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	7fba      	ldrb	r2, [r7, #30]
 8002436:	429a      	cmp	r2, r3
 8002438:	d002      	beq.n	8002440 <jsmn_parse+0x150>
            return JSMN_ERROR_INVAL;
 800243a:	f06f 0301 	mvn.w	r3, #1
 800243e:	e108      	b.n	8002652 <jsmn_parse+0x362>
          }
          parser->toksuper = -1;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f04f 32ff 	mov.w	r2, #4294967295
 8002446:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	461a      	mov	r2, r3
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	609a      	str	r2, [r3, #8]
          break;
 8002454:	e005      	b.n	8002462 <jsmn_parse+0x172>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	3b01      	subs	r3, #1
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	2b00      	cmp	r3, #0
 8002460:	dad7      	bge.n	8002412 <jsmn_parse+0x122>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002468:	d119      	bne.n	800249e <jsmn_parse+0x1ae>
        return JSMN_ERROR_INVAL;
 800246a:	f06f 0301 	mvn.w	r3, #1
 800246e:	e0f0      	b.n	8002652 <jsmn_parse+0x362>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	4413      	add	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002482:	d009      	beq.n	8002498 <jsmn_parse+0x1a8>
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d104      	bne.n	8002498 <jsmn_parse+0x1a8>
          parser->toksuper = i;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002492:	609a      	str	r2, [r3, #8]
          break;
 8002494:	bf00      	nop
        }
      }
#endif
      break;
 8002496:	e0a8      	b.n	80025ea <jsmn_parse+0x2fa>
      for (; i >= 0; i--) {
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	3b01      	subs	r3, #1
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	dae5      	bge.n	8002470 <jsmn_parse+0x180>
      break;
 80024a4:	e0a1      	b.n	80025ea <jsmn_parse+0x2fa>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 80024a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f7ff fe39 	bl	8002128 <jsmn_parse_string>
 80024b6:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	da01      	bge.n	80024c2 <jsmn_parse+0x1d2>
        return r;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	e0c7      	b.n	8002652 <jsmn_parse+0x362>
      }
      count++;
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	3301      	adds	r3, #1
 80024c6:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	f000 8086 	beq.w	80025e0 <jsmn_parse+0x2f0>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8082 	beq.w	80025e0 <jsmn_parse+0x2f0>
        tokens[parser->toksuper].size++;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	4413      	add	r3, r2
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	3201      	adds	r2, #1
 80024ea:	60da      	str	r2, [r3, #12]
      }
      break;
 80024ec:	e078      	b.n	80025e0 <jsmn_parse+0x2f0>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	461a      	mov	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	609a      	str	r2, [r3, #8]
      break;
 80024fa:	e076      	b.n	80025ea <jsmn_parse+0x2fa>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d070      	beq.n	80025e4 <jsmn_parse+0x2f4>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250a:	d06b      	beq.n	80025e4 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	4413      	add	r3, r2
 8002516:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8002518:	2b02      	cmp	r3, #2
 800251a:	d063      	beq.n	80025e4 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	4413      	add	r3, r2
 8002526:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8002528:	2b01      	cmp	r3, #1
 800252a:	d05b      	beq.n	80025e4 <jsmn_parse+0x2f4>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	3b01      	subs	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
 8002534:	e025      	b.n	8002582 <jsmn_parse+0x292>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4413      	add	r3, r2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d006      	beq.n	8002552 <jsmn_parse+0x262>
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	4413      	add	r3, r2
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d114      	bne.n	800257c <jsmn_parse+0x28c>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	4413      	add	r3, r2
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d00c      	beq.n	800257c <jsmn_parse+0x28c>
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	4413      	add	r3, r2
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d104      	bne.n	800257c <jsmn_parse+0x28c>
              parser->toksuper = i;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002576:	609a      	str	r2, [r3, #8]
              break;
 8002578:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 800257a:	e033      	b.n	80025e4 <jsmn_parse+0x2f4>
        for (i = parser->toknext - 1; i >= 0; i--) {
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	3b01      	subs	r3, #1
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	2b00      	cmp	r3, #0
 8002586:	dad6      	bge.n	8002536 <jsmn_parse+0x246>
      break;
 8002588:	e02c      	b.n	80025e4 <jsmn_parse+0x2f4>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 800258a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7ff fd3f 	bl	8002018 <jsmn_parse_primitive>
 800259a:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	da04      	bge.n	80025ac <jsmn_parse+0x2bc>
        return r;
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	e055      	b.n	8002652 <jsmn_parse+0x362>
 80025a6:	bf00      	nop
 80025a8:	00800013 	.word	0x00800013
      }
      count++;
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	3301      	adds	r3, #1
 80025b0:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ba:	d015      	beq.n	80025e8 <jsmn_parse+0x2f8>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d012      	beq.n	80025e8 <jsmn_parse+0x2f8>
        tokens[parser->toksuper].size++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	3201      	adds	r2, #1
 80025d0:	60da      	str	r2, [r3, #12]
      }
      break;
 80025d2:	e009      	b.n	80025e8 <jsmn_parse+0x2f8>
      break;
 80025d4:	bf00      	nop
 80025d6:	e008      	b.n	80025ea <jsmn_parse+0x2fa>
        break;
 80025d8:	bf00      	nop
 80025da:	e006      	b.n	80025ea <jsmn_parse+0x2fa>
        break;
 80025dc:	bf00      	nop
 80025de:	e004      	b.n	80025ea <jsmn_parse+0x2fa>
      break;
 80025e0:	bf00      	nop
 80025e2:	e002      	b.n	80025ea <jsmn_parse+0x2fa>
      break;
 80025e4:	bf00      	nop
 80025e6:	e000      	b.n	80025ea <jsmn_parse+0x2fa>
      break;
 80025e8:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d907      	bls.n	800260e <jsmn_parse+0x31e>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	4413      	add	r3, r2
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	f47f ae7c 	bne.w	8002306 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01d      	beq.n	8002650 <jsmn_parse+0x360>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	3b01      	subs	r3, #1
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
 800261c:	e015      	b.n	800264a <jsmn_parse+0x35a>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	4413      	add	r3, r2
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262c:	d00a      	beq.n	8002644 <jsmn_parse+0x354>
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	4413      	add	r3, r2
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d102      	bne.n	8002644 <jsmn_parse+0x354>
        return JSMN_ERROR_PART;
 800263e:	f06f 0302 	mvn.w	r3, #2
 8002642:	e006      	b.n	8002652 <jsmn_parse+0x362>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	3b01      	subs	r3, #1
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	2b00      	cmp	r3, #0
 800264e:	dae6      	bge.n	800261e <jsmn_parse+0x32e>
      }
    }
  }

  return count;
 8002650:	6a3b      	ldr	r3, [r7, #32]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3728      	adds	r7, #40	@ 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop

0800265c <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f04f 32ff 	mov.w	r2, #4294967295
 8002676:	609a      	str	r2, [r3, #8]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <jsoneq>:
 * @param json The full JSON string.
 * @param tok Pointer to the JSMN token.
 * @param s The C-string to compare against.
 * @return 0 if the token matches the string, non-zero otherwise.
 */
int jsoneq(const char *json, jsmntok_t *tok, const char *s) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
    return (tok->type == JSMN_STRING &&
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
            (int)strlen(s) == (tok->end - tok->start) &&
            strncmp(json + tok->start, s, tok->end - tok->start) == 0) ? 0 : -1;
 8002694:	2b04      	cmp	r3, #4
 8002696:	d11e      	bne.n	80026d6 <jsoneq+0x52>
            (int)strlen(s) == (tok->end - tok->start) &&
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7fd fde9 	bl	8000270 <strlen>
 800269e:	4603      	mov	r3, r0
 80026a0:	4619      	mov	r1, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	1ad3      	subs	r3, r2, r3
    return (tok->type == JSMN_STRING &&
 80026ac:	4299      	cmp	r1, r3
 80026ae:	d112      	bne.n	80026d6 <jsoneq+0x52>
            strncmp(json + tok->start, s, tok->end - tok->start) == 0) ? 0 : -1;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	461a      	mov	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1898      	adds	r0, r3, r2
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	f007 fcc0 	bl	800a04c <strncmp>
 80026cc:	4603      	mov	r3, r0
            (int)strlen(s) == (tok->end - tok->start) &&
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <jsoneq+0x52>
            strncmp(json + tok->start, s, tok->end - tok->start) == 0) ? 0 : -1;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e001      	b.n	80026da <jsoneq+0x56>
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <setMachineState>:

// Helper function to safely change state
void setMachineState(MachineState_t newState) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
    if (currentState != newState) {
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <setMachineState+0x30>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	79fa      	ldrb	r2, [r7, #7]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d008      	beq.n	800270a <setMachineState+0x26>
        currentState = newState;
 80026f8:	4a06      	ldr	r2, [pc, #24]	@ (8002714 <setMachineState+0x30>)
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	7013      	strb	r3, [r2, #0]
        printf("FSM entering state: %d\n", currentState);
 80026fe:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <setMachineState+0x30>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	4619      	mov	r1, r3
 8002704:	4804      	ldr	r0, [pc, #16]	@ (8002718 <setMachineState+0x34>)
 8002706:	f007 fb1d 	bl	8009d44 <iprintf>
    }
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200007d0 	.word	0x200007d0
 8002718:	0800c13c 	.word	0x0800c13c

0800271c <SensorAcquisitionTask>:

/**
 * @brief FreeRTOS Task: High-priority data acquisition (Analog & Digital).
 * Runs periodically to keep g_SystemData fresh.
 */
void SensorAcquisitionTask(void *argument){
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	while(1){
		// 1. Read and process Analog Sensors
		SYS_DATA_UpdateAnalog();
 8002724:	f7ff fbaa 	bl	8001e7c <SYS_DATA_UpdateAnalog>

		// 2. Read Digital Sensors
		SYS_DATA_UpdateDigital();
 8002728:	f7ff fbca 	bl	8001ec0 <SYS_DATA_UpdateDigital>

		vTaskDelay(1000);
 800272c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002730:	f005 f832 	bl	8007798 <vTaskDelay>
		SYS_DATA_UpdateAnalog();
 8002734:	bf00      	nop
 8002736:	e7f5      	b.n	8002724 <SensorAcquisitionTask+0x8>

08002738 <ControlLogicTask>:

/**
 * @brief FreeRTOS Task: The main Finite State Machine (FSM).
 * Runs periodically to check state and sensor data.
 */
void ControlLogicTask(void *argument){
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	while(1){
		 // FSM logic
		switch (currentState) {
 8002740:	4b14      	ldr	r3, [pc, #80]	@ (8002794 <ControlLogicTask+0x5c>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b06      	cmp	r3, #6
 8002746:	d819      	bhi.n	800277c <ControlLogicTask+0x44>
 8002748:	a201      	add	r2, pc, #4	@ (adr r2, 8002750 <ControlLogicTask+0x18>)
 800274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274e:	bf00      	nop
 8002750:	0800276d 	.word	0x0800276d
 8002754:	08002785 	.word	0x08002785
 8002758:	08002785 	.word	0x08002785
 800275c:	08002785 	.word	0x08002785
 8002760:	08002785 	.word	0x08002785
 8002764:	08002785 	.word	0x08002785
 8002768:	08002785 	.word	0x08002785
			case STATE_IDLE:
				 if (g_SystemData.potPresence_flag) {
 800276c:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <ControlLogicTask+0x60>)
 800276e:	7d1b      	ldrb	r3, [r3, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d009      	beq.n	8002788 <ControlLogicTask+0x50>
				    setMachineState(STATE_PREP_PATE);
 8002774:	2002      	movs	r0, #2
 8002776:	f7ff ffb5 	bl	80026e4 <setMachineState>
				 }
				break;
 800277a:	e005      	b.n	8002788 <ControlLogicTask+0x50>
				// TODO: Add logic for RINCAGE state
				break;

			default:
				// Unknown state, return to IDLE for safety
				setMachineState(STATE_IDLE);
 800277c:	2000      	movs	r0, #0
 800277e:	f7ff ffb1 	bl	80026e4 <setMachineState>
				break;
 8002782:	e002      	b.n	800278a <ControlLogicTask+0x52>
				break;
 8002784:	bf00      	nop
 8002786:	e000      	b.n	800278a <ControlLogicTask+0x52>
				break;
 8002788:	bf00      	nop
		} // end switch

		vTaskDelay(500);
 800278a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800278e:	f005 f803 	bl	8007798 <vTaskDelay>
		switch (currentState) {
 8002792:	e7d5      	b.n	8002740 <ControlLogicTask+0x8>
 8002794:	200007d0 	.word	0x200007d0
 8002798:	200007b0 	.word	0x200007b0

0800279c <CANParserTask>:

/**
 * @brief FreeRTOS Task: CAN message parser.
 * Waits for messages on 'canParserQueue' and processes them.
 */
void CANParserTask(void *argument) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	@ 0x28
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	6078      	str	r0, [r7, #4]
    static char jsonMsg[1024];

	while (1) {
        // Wait forever for a message to arrive on the queue
		if (xQueueReceive(canParserQueue, &jsonMsg, portMAX_DELAY) == pdPASS) {
 80027a4:	4b2d      	ldr	r3, [pc, #180]	@ (800285c <CANParserTask+0xc0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	492c      	ldr	r1, [pc, #176]	@ (8002860 <CANParserTask+0xc4>)
 80027ae:	4618      	mov	r0, r3
 80027b0:	f004 fc10 	bl	8006fd4 <xQueueReceive>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d1f4      	bne.n	80027a4 <CANParserTask+0x8>
			printf("[CAN RX JSON] %s\n", jsonMsg);
 80027ba:	4929      	ldr	r1, [pc, #164]	@ (8002860 <CANParserTask+0xc4>)
 80027bc:	4829      	ldr	r0, [pc, #164]	@ (8002864 <CANParserTask+0xc8>)
 80027be:	f007 fac1 	bl	8009d44 <iprintf>

			jsmn_parser parser;
			static jsmntok_t tokens[128];
			jsmn_init(&parser);
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ff48 	bl	800265c <jsmn_init>
			int tokenCount = jsmn_parse(&parser, jsonMsg, strlen(jsonMsg), tokens, 128);
 80027cc:	4824      	ldr	r0, [pc, #144]	@ (8002860 <CANParserTask+0xc4>)
 80027ce:	f7fd fd4f 	bl	8000270 <strlen>
 80027d2:	4602      	mov	r2, r0
 80027d4:	f107 000c 	add.w	r0, r7, #12
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	4b22      	ldr	r3, [pc, #136]	@ (8002868 <CANParserTask+0xcc>)
 80027de:	4920      	ldr	r1, [pc, #128]	@ (8002860 <CANParserTask+0xc4>)
 80027e0:	f7ff fd86 	bl	80022f0 <jsmn_parse>
 80027e4:	61b8      	str	r0, [r7, #24]

			if (tokenCount < 0) {
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da04      	bge.n	80027f6 <CANParserTask+0x5a>
				printf("[JSON ERROR] %d\n", tokenCount);
 80027ec:	69b9      	ldr	r1, [r7, #24]
 80027ee:	481f      	ldr	r0, [pc, #124]	@ (800286c <CANParserTask+0xd0>)
 80027f0:	f007 faa8 	bl	8009d44 <iprintf>
 80027f4:	e7d6      	b.n	80027a4 <CANParserTask+0x8>
				continue;
			}
			for (int i = 1; i < tokenCount; i++) {
 80027f6:	2301      	movs	r3, #1
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	e02a      	b.n	8002852 <CANParserTask+0xb6>
				  if (jsoneq(jsonMsg, &tokens[i], "some_key") == 0) {
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	4a19      	ldr	r2, [pc, #100]	@ (8002868 <CANParserTask+0xcc>)
 8002802:	4413      	add	r3, r2
 8002804:	4a1a      	ldr	r2, [pc, #104]	@ (8002870 <CANParserTask+0xd4>)
 8002806:	4619      	mov	r1, r3
 8002808:	4815      	ldr	r0, [pc, #84]	@ (8002860 <CANParserTask+0xc4>)
 800280a:	f7ff ff3b 	bl	8002684 <jsoneq>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d11b      	bne.n	800284c <CANParserTask+0xb0>
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002814:	2201      	movs	r2, #1
 8002816:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800281a:	4816      	ldr	r0, [pc, #88]	@ (8002874 <CANParserTask+0xd8>)
 800281c:	f002 f898 	bl	8004950 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002820:	2201      	movs	r2, #1
 8002822:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002826:	4813      	ldr	r0, [pc, #76]	@ (8002874 <CANParserTask+0xd8>)
 8002828:	f002 f892 	bl	8004950 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800282c:	2201      	movs	r2, #1
 800282e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002832:	4810      	ldr	r0, [pc, #64]	@ (8002874 <CANParserTask+0xd8>)
 8002834:	f002 f88c 	bl	8004950 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8002838:	2201      	movs	r2, #1
 800283a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800283e:	480d      	ldr	r0, [pc, #52]	@ (8002874 <CANParserTask+0xd8>)
 8002840:	f002 f886 	bl	8004950 <HAL_GPIO_WritePin>

					  printf("msg received");
 8002844:	480c      	ldr	r0, [pc, #48]	@ (8002878 <CANParserTask+0xdc>)
 8002846:	f007 fa7d 	bl	8009d44 <iprintf>
					  break;
 800284a:	e006      	b.n	800285a <CANParserTask+0xbe>
			for (int i = 1; i < tokenCount; i++) {
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	3301      	adds	r3, #1
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	429a      	cmp	r2, r3
 8002858:	dbd0      	blt.n	80027fc <CANParserTask+0x60>
		if (xQueueReceive(canParserQueue, &jsonMsg, portMAX_DELAY) == pdPASS) {
 800285a:	e7a3      	b.n	80027a4 <CANParserTask+0x8>
 800285c:	200007e0 	.word	0x200007e0
 8002860:	200007e4 	.word	0x200007e4
 8002864:	0800c154 	.word	0x0800c154
 8002868:	20000be4 	.word	0x20000be4
 800286c:	0800c168 	.word	0x0800c168
 8002870:	0800c17c 	.word	0x0800c17c
 8002874:	40020c00 	.word	0x40020c00
 8002878:	0800c188 	.word	0x0800c188

0800287c <CommunicationTask>:

/**
 * @brief FreeRTOS Task: Low-priority logging (The "Log Task").
 * Runs periodically to send data over CAN to the other nodes.
 */
void CommunicationTask(void *argument) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	@ 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	while(1) {
		char canRxBuf[30];
		snprintf(canRxBuf, sizeof(canRxBuf), "{\"some_key\":\"some_value\"}\n");
 8002884:	f107 0308 	add.w	r3, r7, #8
 8002888:	4a0b      	ldr	r2, [pc, #44]	@ (80028b8 <CommunicationTask+0x3c>)
 800288a:	211e      	movs	r1, #30
 800288c:	4618      	mov	r0, r3
 800288e:	f007 fac9 	bl	8009e24 <sniprintf>
		if (xQueueSend(canParserQueue, canRxBuf, pdMS_TO_TICKS(10)) != pdPASS) {
 8002892:	4b0a      	ldr	r3, [pc, #40]	@ (80028bc <CommunicationTask+0x40>)
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	f107 0108 	add.w	r1, r7, #8
 800289a:	2300      	movs	r3, #0
 800289c:	220a      	movs	r2, #10
 800289e:	f004 f9e1 	bl	8006c64 <xQueueGenericSend>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d002      	beq.n	80028ae <CommunicationTask+0x32>
				    printf("[CommTask] ERROR: Failed to send to queue\n");
 80028a8:	4805      	ldr	r0, [pc, #20]	@ (80028c0 <CommunicationTask+0x44>)
 80028aa:	f007 fab3 	bl	8009e14 <puts>
				}
//		printf("water_temperature: %.5f\n",g_SystemData.pt100_water_temp);
		vTaskDelay(1000);
 80028ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028b2:	f004 ff71 	bl	8007798 <vTaskDelay>
	while(1) {
 80028b6:	e7e5      	b.n	8002884 <CommunicationTask+0x8>
 80028b8:	0800c198 	.word	0x0800c198
 80028bc:	200007e0 	.word	0x200007e0
 80028c0:	0800c1b4 	.word	0x0800c1b4

080028c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028c8:	f7ff fb52 	bl	8001f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028cc:	480c      	ldr	r0, [pc, #48]	@ (8002900 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ce:	490d      	ldr	r1, [pc, #52]	@ (8002904 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002908 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d4:	e002      	b.n	80028dc <LoopCopyDataInit>

080028d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028da:	3304      	adds	r3, #4

080028dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e0:	d3f9      	bcc.n	80028d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028e2:	4a0a      	ldr	r2, [pc, #40]	@ (800290c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002910 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e8:	e001      	b.n	80028ee <LoopFillZerobss>

080028ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028ec:	3204      	adds	r2, #4

080028ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f0:	d3fb      	bcc.n	80028ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028f2:	f007 fc0d 	bl	800a110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028f6:	f7fe fb91 	bl	800101c <main>
  bx  lr    
 80028fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002904:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002908:	0800c598 	.word	0x0800c598
  ldr r2, =_sbss
 800290c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002910:	200156dc 	.word	0x200156dc

08002914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002914:	e7fe      	b.n	8002914 <ADC_IRQHandler>
	...

08002918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800291c:	4b0e      	ldr	r3, [pc, #56]	@ (8002958 <HAL_Init+0x40>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0d      	ldr	r2, [pc, #52]	@ (8002958 <HAL_Init+0x40>)
 8002922:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002926:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_Init+0x40>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0a      	ldr	r2, [pc, #40]	@ (8002958 <HAL_Init+0x40>)
 800292e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002932:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002934:	4b08      	ldr	r3, [pc, #32]	@ (8002958 <HAL_Init+0x40>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a07      	ldr	r2, [pc, #28]	@ (8002958 <HAL_Init+0x40>)
 800293a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800293e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002940:	2003      	movs	r0, #3
 8002942:	f001 fa1a 	bl	8003d7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002946:	2000      	movs	r0, #0
 8002948:	f7ff f81c 	bl	8001984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800294c:	f7fe fe70 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023c00 	.word	0x40023c00

0800295c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002960:	4b06      	ldr	r3, [pc, #24]	@ (800297c <HAL_IncTick+0x20>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <HAL_IncTick+0x24>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4413      	add	r3, r2
 800296c:	4a04      	ldr	r2, [pc, #16]	@ (8002980 <HAL_IncTick+0x24>)
 800296e:	6013      	str	r3, [r2, #0]
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000008 	.word	0x20000008
 8002980:	200013e4 	.word	0x200013e4

08002984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return uwTick;
 8002988:	4b03      	ldr	r3, [pc, #12]	@ (8002998 <HAL_GetTick+0x14>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	200013e4 	.word	0x200013e4

0800299c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e033      	b.n	8002a1a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe fe60 	bl	8001680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d118      	bne.n	8002a0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029e2:	f023 0302 	bic.w	r3, r3, #2
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fa6c 	bl	8002ecc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f023 0303 	bic.w	r3, r3, #3
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a0a:	e001      	b.n	8002a10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_Start_DMA+0x22>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e0eb      	b.n	8002c1e <HAL_ADC_Start_DMA+0x1fa>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d018      	beq.n	8002a8e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a6c:	4b6e      	ldr	r3, [pc, #440]	@ (8002c28 <HAL_ADC_Start_DMA+0x204>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a6e      	ldr	r2, [pc, #440]	@ (8002c2c <HAL_ADC_Start_DMA+0x208>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0c9a      	lsrs	r2, r3, #18
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002a80:	e002      	b.n	8002a88 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f9      	bne.n	8002a82 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a9c:	d107      	bne.n	8002aae <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002aac:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	f040 80a3 	bne.w	8002c04 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d007      	beq.n	8002af0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ae8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002afc:	d106      	bne.n	8002b0c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	f023 0206 	bic.w	r2, r3, #6
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b0a:	e002      	b.n	8002b12 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b1a:	4b45      	ldr	r3, [pc, #276]	@ (8002c30 <HAL_ADC_Start_DMA+0x20c>)
 8002b1c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b22:	4a44      	ldr	r2, [pc, #272]	@ (8002c34 <HAL_ADC_Start_DMA+0x210>)
 8002b24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2a:	4a43      	ldr	r2, [pc, #268]	@ (8002c38 <HAL_ADC_Start_DMA+0x214>)
 8002b2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b32:	4a42      	ldr	r2, [pc, #264]	@ (8002c3c <HAL_ADC_Start_DMA+0x218>)
 8002b34:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002b4e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b5e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	334c      	adds	r3, #76	@ 0x4c
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f001 f9e6 	bl	8003f40 <HAL_DMA_Start_IT>
 8002b74:	4603      	mov	r3, r0
 8002b76:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d12a      	bne.n	8002bda <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2d      	ldr	r2, [pc, #180]	@ (8002c40 <HAL_ADC_Start_DMA+0x21c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d015      	beq.n	8002bba <HAL_ADC_Start_DMA+0x196>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2c      	ldr	r2, [pc, #176]	@ (8002c44 <HAL_ADC_Start_DMA+0x220>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d105      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0x180>
 8002b98:	4b25      	ldr	r3, [pc, #148]	@ (8002c30 <HAL_ADC_Start_DMA+0x20c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a27      	ldr	r2, [pc, #156]	@ (8002c48 <HAL_ADC_Start_DMA+0x224>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d136      	bne.n	8002c1c <HAL_ADC_Start_DMA+0x1f8>
 8002bae:	4b20      	ldr	r3, [pc, #128]	@ (8002c30 <HAL_ADC_Start_DMA+0x20c>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d130      	bne.n	8002c1c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d129      	bne.n	8002c1c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	e020      	b.n	8002c1c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a18      	ldr	r2, [pc, #96]	@ (8002c40 <HAL_ADC_Start_DMA+0x21c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d11b      	bne.n	8002c1c <HAL_ADC_Start_DMA+0x1f8>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d114      	bne.n	8002c1c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	e00b      	b.n	8002c1c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	f043 0210 	orr.w	r2, r3, #16
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002c1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3720      	adds	r7, #32
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	431bde83 	.word	0x431bde83
 8002c30:	40012300 	.word	0x40012300
 8002c34:	080030c5 	.word	0x080030c5
 8002c38:	0800317f 	.word	0x0800317f
 8002c3c:	0800319b 	.word	0x0800319b
 8002c40:	40012000 	.word	0x40012000
 8002c44:	40012100 	.word	0x40012100
 8002c48:	40012200 	.word	0x40012200

08002c4c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x1c>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e105      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x228>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b09      	cmp	r3, #9
 8002cb2:	d925      	bls.n	8002d00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68d9      	ldr	r1, [r3, #12]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3b1e      	subs	r3, #30
 8002cca:	2207      	movs	r2, #7
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43da      	mvns	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	400a      	ands	r2, r1
 8002cd8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68d9      	ldr	r1, [r3, #12]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	4618      	mov	r0, r3
 8002cec:	4603      	mov	r3, r0
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4403      	add	r3, r0
 8002cf2:	3b1e      	subs	r3, #30
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	e022      	b.n	8002d46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6919      	ldr	r1, [r3, #16]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	2207      	movs	r2, #7
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	400a      	ands	r2, r1
 8002d22:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6919      	ldr	r1, [r3, #16]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	4618      	mov	r0, r3
 8002d36:	4603      	mov	r3, r0
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4403      	add	r3, r0
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d824      	bhi.n	8002d98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3b05      	subs	r3, #5
 8002d60:	221f      	movs	r2, #31
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	3b05      	subs	r3, #5
 8002d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d96:	e04c      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b0c      	cmp	r3, #12
 8002d9e:	d824      	bhi.n	8002dea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	3b23      	subs	r3, #35	@ 0x23
 8002db2:	221f      	movs	r2, #31
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43da      	mvns	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	3b23      	subs	r3, #35	@ 0x23
 8002ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002de8:	e023      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	3b41      	subs	r3, #65	@ 0x41
 8002dfc:	221f      	movs	r2, #31
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43da      	mvns	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	400a      	ands	r2, r1
 8002e0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	4618      	mov	r0, r3
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	3b41      	subs	r3, #65	@ 0x41
 8002e26:	fa00 f203 	lsl.w	r2, r0, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e32:	4b22      	ldr	r3, [pc, #136]	@ (8002ebc <HAL_ADC_ConfigChannel+0x234>)
 8002e34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a21      	ldr	r2, [pc, #132]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x238>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d109      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x1cc>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b12      	cmp	r3, #18
 8002e46:	d105      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a19      	ldr	r2, [pc, #100]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x238>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d123      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x21e>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d003      	beq.n	8002e6e <HAL_ADC_ConfigChannel+0x1e6>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b11      	cmp	r3, #17
 8002e6c:	d11b      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b10      	cmp	r3, #16
 8002e80:	d111      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e82:	4b10      	ldr	r3, [pc, #64]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x23c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a10      	ldr	r2, [pc, #64]	@ (8002ec8 <HAL_ADC_ConfigChannel+0x240>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	0c9a      	lsrs	r2, r3, #18
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e98:	e002      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f9      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40012300 	.word	0x40012300
 8002ec0:	40012000 	.word	0x40012000
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	431bde83 	.word	0x431bde83

08002ecc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ed4:	4b79      	ldr	r3, [pc, #484]	@ (80030bc <ADC_Init+0x1f0>)
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	021a      	lsls	r2, r3, #8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6899      	ldr	r1, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5e:	4a58      	ldr	r2, [pc, #352]	@ (80030c0 <ADC_Init+0x1f4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d022      	beq.n	8002faa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6899      	ldr	r1, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6899      	ldr	r1, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	e00f      	b.n	8002fca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fc8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0202 	bic.w	r2, r2, #2
 8002fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6899      	ldr	r1, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7e1b      	ldrb	r3, [r3, #24]
 8002fe4:	005a      	lsls	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01b      	beq.n	8003030 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003006:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003016:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6859      	ldr	r1, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	3b01      	subs	r3, #1
 8003024:	035a      	lsls	r2, r3, #13
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	e007      	b.n	8003040 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800303e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800304e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	3b01      	subs	r3, #1
 800305c:	051a      	lsls	r2, r3, #20
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6899      	ldr	r1, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003082:	025a      	lsls	r2, r3, #9
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800309a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	029a      	lsls	r2, r3, #10
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40012300 	.word	0x40012300
 80030c0:	0f000001 	.word	0x0f000001

080030c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d13c      	bne.n	8003158 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d12b      	bne.n	8003150 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d127      	bne.n	8003150 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800310a:	2b00      	cmp	r3, #0
 800310c:	d006      	beq.n	800311c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003118:	2b00      	cmp	r3, #0
 800311a:	d119      	bne.n	8003150 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0220 	bic.w	r2, r2, #32
 800312a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f043 0201 	orr.w	r2, r3, #1
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f7ff fd7b 	bl	8002c4c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003156:	e00e      	b.n	8003176 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f7ff fd85 	bl	8002c74 <HAL_ADC_ErrorCallback>
}
 800316a:	e004      	b.n	8003176 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f7ff fd67 	bl	8002c60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2240      	movs	r2, #64	@ 0x40
 80031ac:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	f043 0204 	orr.w	r2, r3, #4
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f7ff fd5a 	bl	8002c74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0ed      	b.n	80033b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe fac2 	bl	8001770 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031fc:	f7ff fbc2 	bl	8002984 <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003202:	e012      	b.n	800322a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003204:	f7ff fbbe 	bl	8002984 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b0a      	cmp	r3, #10
 8003210:	d90b      	bls.n	800322a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2205      	movs	r2, #5
 8003222:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e0c5      	b.n	80033b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0e5      	beq.n	8003204 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0202 	bic.w	r2, r2, #2
 8003246:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003248:	f7ff fb9c 	bl	8002984 <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800324e:	e012      	b.n	8003276 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003250:	f7ff fb98 	bl	8002984 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b0a      	cmp	r3, #10
 800325c:	d90b      	bls.n	8003276 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2205      	movs	r2, #5
 800326e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e09f      	b.n	80033b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e5      	bne.n	8003250 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	7e1b      	ldrb	r3, [r3, #24]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d108      	bne.n	800329e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e007      	b.n	80032ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	7e5b      	ldrb	r3, [r3, #25]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d108      	bne.n	80032c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	e007      	b.n	80032d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	7e9b      	ldrb	r3, [r3, #26]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d108      	bne.n	80032f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0220 	orr.w	r2, r2, #32
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e007      	b.n	8003302 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0220 	bic.w	r2, r2, #32
 8003300:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	7edb      	ldrb	r3, [r3, #27]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d108      	bne.n	800331c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0210 	bic.w	r2, r2, #16
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	e007      	b.n	800332c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0210 	orr.w	r2, r2, #16
 800332a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	7f1b      	ldrb	r3, [r3, #28]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d108      	bne.n	8003346 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0208 	orr.w	r2, r2, #8
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	e007      	b.n	8003356 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0208 	bic.w	r2, r2, #8
 8003354:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	7f5b      	ldrb	r3, [r3, #29]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d108      	bne.n	8003370 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0204 	orr.w	r2, r2, #4
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e007      	b.n	8003380 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0204 	bic.w	r2, r2, #4
 800337e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	ea42 0103 	orr.w	r1, r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	1e5a      	subs	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d003      	beq.n	80033e0 <HAL_CAN_ConfigFilter+0x20>
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	f040 80be 	bne.w	800355c <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80033e0:	4b65      	ldr	r3, [pc, #404]	@ (8003578 <HAL_CAN_ConfigFilter+0x1b8>)
 80033e2:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80033ea:	f043 0201 	orr.w	r2, r3, #1
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80033fa:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	431a      	orrs	r2, r3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2201      	movs	r2, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	43db      	mvns	r3, r3
 8003432:	401a      	ands	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d123      	bne.n	800348a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	43db      	mvns	r3, r3
 800344c:	401a      	ands	r2, r3
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003464:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	3248      	adds	r2, #72	@ 0x48
 800346a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800347e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003480:	6939      	ldr	r1, [r7, #16]
 8003482:	3348      	adds	r3, #72	@ 0x48
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d122      	bne.n	80034d8 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	431a      	orrs	r2, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80034b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	3248      	adds	r2, #72	@ 0x48
 80034b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034ce:	6939      	ldr	r1, [r7, #16]
 80034d0:	3348      	adds	r3, #72	@ 0x48
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	401a      	ands	r2, r3
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80034f2:	e007      	b.n	8003504 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	431a      	orrs	r2, r3
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	43db      	mvns	r3, r3
 8003516:	401a      	ands	r2, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800351e:	e007      	b.n	8003530 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	431a      	orrs	r2, r3
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d107      	bne.n	8003548 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	431a      	orrs	r2, r3
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800354e:	f023 0201 	bic.w	r2, r3, #1
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	e006      	b.n	800356a <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
  }
}
 800356a:	4618      	mov	r0, r3
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40006400 	.word	0x40006400

0800357c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003590:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d003      	beq.n	80035a0 <HAL_CAN_GetRxMessage+0x24>
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b02      	cmp	r3, #2
 800359c:	f040 8103 	bne.w	80037a6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10e      	bne.n	80035c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d116      	bne.n	80035e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0f7      	b.n	80037b4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d107      	bne.n	80035e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0e8      	b.n	80037b4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	331b      	adds	r3, #27
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	4413      	add	r3, r2
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0204 	and.w	r2, r3, #4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10c      	bne.n	800361a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	331b      	adds	r3, #27
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0d5b      	lsrs	r3, r3, #21
 8003610:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e00b      	b.n	8003632 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	331b      	adds	r3, #27
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	4413      	add	r3, r2
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	08db      	lsrs	r3, r3, #3
 800362a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	331b      	adds	r3, #27
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	4413      	add	r3, r2
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0202 	and.w	r2, r3, #2
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	331b      	adds	r3, #27
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	4413      	add	r3, r2
 8003654:	3304      	adds	r3, #4
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2208      	movs	r2, #8
 8003664:	611a      	str	r2, [r3, #16]
 8003666:	e00b      	b.n	8003680 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	331b      	adds	r3, #27
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	4413      	add	r3, r2
 8003674:	3304      	adds	r3, #4
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 020f 	and.w	r2, r3, #15
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	331b      	adds	r3, #27
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	4413      	add	r3, r2
 800368c:	3304      	adds	r3, #4
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	0a1b      	lsrs	r3, r3, #8
 8003692:	b2da      	uxtb	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	331b      	adds	r3, #27
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	4413      	add	r3, r2
 80036a4:	3304      	adds	r3, #4
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	0a1a      	lsrs	r2, r3, #8
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	3301      	adds	r3, #1
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	0c1a      	lsrs	r2, r3, #16
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	3302      	adds	r3, #2
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	4413      	add	r3, r2
 8003704:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	0e1a      	lsrs	r2, r3, #24
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	3303      	adds	r3, #3
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	4413      	add	r3, r2
 800371e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	3304      	adds	r3, #4
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	4413      	add	r3, r2
 8003736:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0a1a      	lsrs	r2, r3, #8
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	3305      	adds	r3, #5
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	4413      	add	r3, r2
 8003750:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	0c1a      	lsrs	r2, r3, #16
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	3306      	adds	r3, #6
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	4413      	add	r3, r2
 800376a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	0e1a      	lsrs	r2, r3, #24
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	3307      	adds	r3, #7
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d108      	bne.n	8003792 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0220 	orr.w	r2, r2, #32
 800378e:	60da      	str	r2, [r3, #12]
 8003790:	e007      	b.n	80037a2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0220 	orr.w	r2, r2, #32
 80037a0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e006      	b.n	80037b4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
  }
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	@ 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80037c8:	2300      	movs	r3, #0
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d07c      	beq.n	8003900 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d023      	beq.n	8003858 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2201      	movs	r2, #1
 8003816:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f983 	bl	8003b2e <HAL_CAN_TxMailbox0CompleteCallback>
 8003828:	e016      	b.n	8003858 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003836:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800383a:	627b      	str	r3, [r7, #36]	@ 0x24
 800383c:	e00c      	b.n	8003858 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003850:	e002      	b.n	8003858 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f989 	bl	8003b6a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d024      	beq.n	80038ac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800386a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f963 	bl	8003b42 <HAL_CAN_TxMailbox1CompleteCallback>
 800387c:	e016      	b.n	80038ac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003884:	2b00      	cmp	r3, #0
 8003886:	d004      	beq.n	8003892 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800388e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003890:	e00c      	b.n	80038ac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003898:	2b00      	cmp	r3, #0
 800389a:	d004      	beq.n	80038a6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a4:	e002      	b.n	80038ac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f969 	bl	8003b7e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d024      	beq.n	8003900 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80038be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f943 	bl	8003b56 <HAL_CAN_TxMailbox2CompleteCallback>
 80038d0:	e016      	b.n	8003900 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e4:	e00c      	b.n	8003900 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f8:	e002      	b.n	8003900 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f949 	bl	8003b92 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003916:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2210      	movs	r2, #16
 8003922:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d006      	beq.n	8003946 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2208      	movs	r2, #8
 800393e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f930 	bl	8003ba6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d009      	beq.n	8003964 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fac2 	bl	8000ee8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00c      	beq.n	8003988 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2210      	movs	r2, #16
 8003986:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d006      	beq.n	80039aa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2208      	movs	r2, #8
 80039a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f912 	bl	8003bce <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d009      	beq.n	80039c8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f8f9 	bl	8003bba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d006      	beq.n	80039ea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2210      	movs	r2, #16
 80039e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f8fc 	bl	8003be2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00b      	beq.n	8003a0c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d006      	beq.n	8003a0c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2208      	movs	r2, #8
 8003a04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f8f5 	bl	8003bf6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d07b      	beq.n	8003b0e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d072      	beq.n	8003b06 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d008      	beq.n	8003a3c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	f043 0302 	orr.w	r3, r3, #2
 8003a56:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6e:	f043 0304 	orr.w	r3, r3, #4
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d043      	beq.n	8003b06 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d03e      	beq.n	8003b06 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a8e:	2b60      	cmp	r3, #96	@ 0x60
 8003a90:	d02b      	beq.n	8003aea <HAL_CAN_IRQHandler+0x32a>
 8003a92:	2b60      	cmp	r3, #96	@ 0x60
 8003a94:	d82e      	bhi.n	8003af4 <HAL_CAN_IRQHandler+0x334>
 8003a96:	2b50      	cmp	r3, #80	@ 0x50
 8003a98:	d022      	beq.n	8003ae0 <HAL_CAN_IRQHandler+0x320>
 8003a9a:	2b50      	cmp	r3, #80	@ 0x50
 8003a9c:	d82a      	bhi.n	8003af4 <HAL_CAN_IRQHandler+0x334>
 8003a9e:	2b40      	cmp	r3, #64	@ 0x40
 8003aa0:	d019      	beq.n	8003ad6 <HAL_CAN_IRQHandler+0x316>
 8003aa2:	2b40      	cmp	r3, #64	@ 0x40
 8003aa4:	d826      	bhi.n	8003af4 <HAL_CAN_IRQHandler+0x334>
 8003aa6:	2b30      	cmp	r3, #48	@ 0x30
 8003aa8:	d010      	beq.n	8003acc <HAL_CAN_IRQHandler+0x30c>
 8003aaa:	2b30      	cmp	r3, #48	@ 0x30
 8003aac:	d822      	bhi.n	8003af4 <HAL_CAN_IRQHandler+0x334>
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d002      	beq.n	8003ab8 <HAL_CAN_IRQHandler+0x2f8>
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d005      	beq.n	8003ac2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ab6:	e01d      	b.n	8003af4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aba:	f043 0308 	orr.w	r3, r3, #8
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ac0:	e019      	b.n	8003af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac4:	f043 0310 	orr.w	r3, r3, #16
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003aca:	e014      	b.n	8003af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	f043 0320 	orr.w	r3, r3, #32
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ad4:	e00f      	b.n	8003af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ade:	e00a      	b.n	8003af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ae8:	e005      	b.n	8003af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003af2:	e000      	b.n	8003af6 <HAL_CAN_IRQHandler+0x336>
            break;
 8003af4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003b04:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f872 	bl	8003c0a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b26:	bf00      	nop
 8003b28:	3728      	adds	r7, #40	@ 0x28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <__NVIC_SetPriorityGrouping>:
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c30:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <__NVIC_SetPriorityGrouping+0x44>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c52:	4a04      	ldr	r2, [pc, #16]	@ (8003c64 <__NVIC_SetPriorityGrouping+0x44>)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	60d3      	str	r3, [r2, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_GetPriorityGrouping>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c6c:	4b04      	ldr	r3, [pc, #16]	@ (8003c80 <__NVIC_GetPriorityGrouping+0x18>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	f003 0307 	and.w	r3, r3, #7
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <__NVIC_EnableIRQ>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	db0b      	blt.n	8003cae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	f003 021f 	and.w	r2, r3, #31
 8003c9c:	4907      	ldr	r1, [pc, #28]	@ (8003cbc <__NVIC_EnableIRQ+0x38>)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	e000e100 	.word	0xe000e100

08003cc0 <__NVIC_SetPriority>:
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	6039      	str	r1, [r7, #0]
 8003cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	db0a      	blt.n	8003cea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	490c      	ldr	r1, [pc, #48]	@ (8003d0c <__NVIC_SetPriority+0x4c>)
 8003cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cde:	0112      	lsls	r2, r2, #4
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ce8:	e00a      	b.n	8003d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4908      	ldr	r1, [pc, #32]	@ (8003d10 <__NVIC_SetPriority+0x50>)
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	3b04      	subs	r3, #4
 8003cf8:	0112      	lsls	r2, r2, #4
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	761a      	strb	r2, [r3, #24]
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000e100 	.word	0xe000e100
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <NVIC_EncodePriority>:
{
 8003d14:	b480      	push	{r7}
 8003d16:	b089      	sub	sp, #36	@ 0x24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f1c3 0307 	rsb	r3, r3, #7
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	bf28      	it	cs
 8003d32:	2304      	movcs	r3, #4
 8003d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	2b06      	cmp	r3, #6
 8003d3c:	d902      	bls.n	8003d44 <NVIC_EncodePriority+0x30>
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3b03      	subs	r3, #3
 8003d42:	e000      	b.n	8003d46 <NVIC_EncodePriority+0x32>
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43da      	mvns	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	401a      	ands	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	43d9      	mvns	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d6c:	4313      	orrs	r3, r2
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3724      	adds	r7, #36	@ 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ff4c 	bl	8003c20 <__NVIC_SetPriorityGrouping>
}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003da2:	f7ff ff61 	bl	8003c68 <__NVIC_GetPriorityGrouping>
 8003da6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	6978      	ldr	r0, [r7, #20]
 8003dae:	f7ff ffb1 	bl	8003d14 <NVIC_EncodePriority>
 8003db2:	4602      	mov	r2, r0
 8003db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ff80 	bl	8003cc0 <__NVIC_SetPriority>
}
 8003dc0:	bf00      	nop
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff ff54 	bl	8003c84 <__NVIC_EnableIRQ>
}
 8003ddc:	bf00      	nop
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003df0:	f7fe fdc8 	bl	8002984 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e099      	b.n	8003f34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e20:	e00f      	b.n	8003e42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e22:	f7fe fdaf 	bl	8002984 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b05      	cmp	r3, #5
 8003e2e:	d908      	bls.n	8003e42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2203      	movs	r2, #3
 8003e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e078      	b.n	8003f34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e8      	bne.n	8003e22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4b38      	ldr	r3, [pc, #224]	@ (8003f3c <HAL_DMA_Init+0x158>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d107      	bne.n	8003eac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 0307 	bic.w	r3, r3, #7
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d117      	bne.n	8003f06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00e      	beq.n	8003f06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fb01 	bl	80044f0 <DMA_CheckFifoParam>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2240      	movs	r2, #64	@ 0x40
 8003ef8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003f02:	2301      	movs	r3, #1
 8003f04:	e016      	b.n	8003f34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fab8 	bl	8004484 <DMA_CalcBaseAndBitshift>
 8003f14:	4603      	mov	r3, r0
 8003f16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1c:	223f      	movs	r2, #63	@ 0x3f
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	f010803f 	.word	0xf010803f

08003f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_DMA_Start_IT+0x26>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e040      	b.n	8003fe8 <HAL_DMA_Start_IT+0xa8>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d12f      	bne.n	8003fda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fa4a 	bl	8004428 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f98:	223f      	movs	r2, #63	@ 0x3f
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0216 	orr.w	r2, r2, #22
 8003fae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0208 	orr.w	r2, r2, #8
 8003fc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e005      	b.n	8003fe6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ffe:	f7fe fcc1 	bl	8002984 <HAL_GetTick>
 8004002:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d008      	beq.n	8004022 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2280      	movs	r2, #128	@ 0x80
 8004014:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e052      	b.n	80040c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0216 	bic.w	r2, r2, #22
 8004030:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004040:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <HAL_DMA_Abort+0x62>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0208 	bic.w	r2, r2, #8
 8004060:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004072:	e013      	b.n	800409c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004074:	f7fe fc86 	bl	8002984 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b05      	cmp	r3, #5
 8004080:	d90c      	bls.n	800409c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2203      	movs	r2, #3
 800408c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e015      	b.n	80040c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e4      	bne.n	8004074 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ae:	223f      	movs	r2, #63	@ 0x3f
 80040b0:	409a      	lsls	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d004      	beq.n	80040ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2280      	movs	r2, #128	@ 0x80
 80040e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e00c      	b.n	8004108 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2205      	movs	r2, #5
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004120:	4b8e      	ldr	r3, [pc, #568]	@ (800435c <HAL_DMA_IRQHandler+0x248>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a8e      	ldr	r2, [pc, #568]	@ (8004360 <HAL_DMA_IRQHandler+0x24c>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0a9b      	lsrs	r3, r3, #10
 800412c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004132:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413e:	2208      	movs	r2, #8
 8004140:	409a      	lsls	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4013      	ands	r3, r2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d01a      	beq.n	8004180 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0204 	bic.w	r2, r2, #4
 8004166:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416c:	2208      	movs	r2, #8
 800416e:	409a      	lsls	r2, r3
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004178:	f043 0201 	orr.w	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004184:	2201      	movs	r2, #1
 8004186:	409a      	lsls	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4013      	ands	r3, r2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d012      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a2:	2201      	movs	r2, #1
 80041a4:	409a      	lsls	r2, r3
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ae:	f043 0202 	orr.w	r2, r3, #2
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ba:	2204      	movs	r2, #4
 80041bc:	409a      	lsls	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d012      	beq.n	80041ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d8:	2204      	movs	r2, #4
 80041da:	409a      	lsls	r2, r3
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e4:	f043 0204 	orr.w	r2, r3, #4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f0:	2210      	movs	r2, #16
 80041f2:	409a      	lsls	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d043      	beq.n	8004284 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b00      	cmp	r3, #0
 8004208:	d03c      	beq.n	8004284 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420e:	2210      	movs	r2, #16
 8004210:	409a      	lsls	r2, r3
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d018      	beq.n	8004256 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d108      	bne.n	8004244 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d024      	beq.n	8004284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
 8004242:	e01f      	b.n	8004284 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01b      	beq.n	8004284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	4798      	blx	r3
 8004254:	e016      	b.n	8004284 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004260:	2b00      	cmp	r3, #0
 8004262:	d107      	bne.n	8004274 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0208 	bic.w	r2, r2, #8
 8004272:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004288:	2220      	movs	r2, #32
 800428a:	409a      	lsls	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 808f 	beq.w	80043b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8087 	beq.w	80043b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042aa:	2220      	movs	r2, #32
 80042ac:	409a      	lsls	r2, r3
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d136      	bne.n	800432c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0216 	bic.w	r2, r2, #22
 80042cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <HAL_DMA_IRQHandler+0x1da>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0208 	bic.w	r2, r2, #8
 80042fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004302:	223f      	movs	r2, #63	@ 0x3f
 8004304:	409a      	lsls	r2, r3
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800431e:	2b00      	cmp	r3, #0
 8004320:	d07e      	beq.n	8004420 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4798      	blx	r3
        }
        return;
 800432a:	e079      	b.n	8004420 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01d      	beq.n	8004376 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10d      	bne.n	8004364 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434c:	2b00      	cmp	r3, #0
 800434e:	d031      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
 8004358:	e02c      	b.n	80043b4 <HAL_DMA_IRQHandler+0x2a0>
 800435a:	bf00      	nop
 800435c:	20000000 	.word	0x20000000
 8004360:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d023      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
 8004374:	e01e      	b.n	80043b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10f      	bne.n	80043a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0210 	bic.w	r2, r2, #16
 8004392:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d032      	beq.n	8004422 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d022      	beq.n	800440e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2205      	movs	r2, #5
 80043cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	3301      	adds	r3, #1
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d307      	bcc.n	80043fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f2      	bne.n	80043e0 <HAL_DMA_IRQHandler+0x2cc>
 80043fa:	e000      	b.n	80043fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80043fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d005      	beq.n	8004422 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	4798      	blx	r3
 800441e:	e000      	b.n	8004422 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004420:	bf00      	nop
    }
  }
}
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004444:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b40      	cmp	r3, #64	@ 0x40
 8004454:	d108      	bne.n	8004468 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004466:	e007      	b.n	8004478 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	60da      	str	r2, [r3, #12]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	3b10      	subs	r3, #16
 8004494:	4a14      	ldr	r2, [pc, #80]	@ (80044e8 <DMA_CalcBaseAndBitshift+0x64>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	091b      	lsrs	r3, r3, #4
 800449c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800449e:	4a13      	ldr	r2, [pc, #76]	@ (80044ec <DMA_CalcBaseAndBitshift+0x68>)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d909      	bls.n	80044c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	1d1a      	adds	r2, r3, #4
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80044c4:	e007      	b.n	80044d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044ce:	f023 0303 	bic.w	r3, r3, #3
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	aaaaaaab 	.word	0xaaaaaaab
 80044ec:	0800c210 	.word	0x0800c210

080044f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d11f      	bne.n	800454a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b03      	cmp	r3, #3
 800450e:	d856      	bhi.n	80045be <DMA_CheckFifoParam+0xce>
 8004510:	a201      	add	r2, pc, #4	@ (adr r2, 8004518 <DMA_CheckFifoParam+0x28>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	08004529 	.word	0x08004529
 800451c:	0800453b 	.word	0x0800453b
 8004520:	08004529 	.word	0x08004529
 8004524:	080045bf 	.word	0x080045bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d046      	beq.n	80045c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004538:	e043      	b.n	80045c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004542:	d140      	bne.n	80045c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004548:	e03d      	b.n	80045c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004552:	d121      	bne.n	8004598 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d837      	bhi.n	80045ca <DMA_CheckFifoParam+0xda>
 800455a:	a201      	add	r2, pc, #4	@ (adr r2, 8004560 <DMA_CheckFifoParam+0x70>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004571 	.word	0x08004571
 8004564:	08004577 	.word	0x08004577
 8004568:	08004571 	.word	0x08004571
 800456c:	08004589 	.word	0x08004589
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
      break;
 8004574:	e030      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d025      	beq.n	80045ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004586:	e022      	b.n	80045ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004590:	d11f      	bne.n	80045d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004596:	e01c      	b.n	80045d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d903      	bls.n	80045a6 <DMA_CheckFifoParam+0xb6>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d003      	beq.n	80045ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045a4:	e018      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
      break;
 80045aa:	e015      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00e      	beq.n	80045d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
      break;
 80045bc:	e00b      	b.n	80045d6 <DMA_CheckFifoParam+0xe6>
      break;
 80045be:	bf00      	nop
 80045c0:	e00a      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      break;
 80045c2:	bf00      	nop
 80045c4:	e008      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      break;
 80045c6:	bf00      	nop
 80045c8:	e006      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      break;
 80045ca:	bf00      	nop
 80045cc:	e004      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      break;
 80045ce:	bf00      	nop
 80045d0:	e002      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80045d2:	bf00      	nop
 80045d4:	e000      	b.n	80045d8 <DMA_CheckFifoParam+0xe8>
      break;
 80045d6:	bf00      	nop
    }
  } 
  
  return status; 
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop

080045e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b089      	sub	sp, #36	@ 0x24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045fe:	2300      	movs	r3, #0
 8004600:	61fb      	str	r3, [r7, #28]
 8004602:	e16b      	b.n	80048dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004604:	2201      	movs	r2, #1
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4013      	ands	r3, r2
 8004616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	429a      	cmp	r2, r3
 800461e:	f040 815a 	bne.w	80048d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b01      	cmp	r3, #1
 800462c:	d005      	beq.n	800463a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004636:	2b02      	cmp	r3, #2
 8004638:	d130      	bne.n	800469c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	2203      	movs	r2, #3
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4313      	orrs	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004670:	2201      	movs	r2, #1
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f003 0201 	and.w	r2, r3, #1
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4313      	orrs	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d017      	beq.n	80046d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	2203      	movs	r2, #3
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	43db      	mvns	r3, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4013      	ands	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d123      	bne.n	800472c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	08da      	lsrs	r2, r3, #3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3208      	adds	r2, #8
 80046ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	220f      	movs	r2, #15
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	08da      	lsrs	r2, r3, #3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3208      	adds	r2, #8
 8004726:	69b9      	ldr	r1, [r7, #24]
 8004728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	2203      	movs	r2, #3
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0203 	and.w	r2, r3, #3
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80b4 	beq.w	80048d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	4b60      	ldr	r3, [pc, #384]	@ (80048f4 <HAL_GPIO_Init+0x30c>)
 8004774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004776:	4a5f      	ldr	r2, [pc, #380]	@ (80048f4 <HAL_GPIO_Init+0x30c>)
 8004778:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800477c:	6453      	str	r3, [r2, #68]	@ 0x44
 800477e:	4b5d      	ldr	r3, [pc, #372]	@ (80048f4 <HAL_GPIO_Init+0x30c>)
 8004780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800478a:	4a5b      	ldr	r2, [pc, #364]	@ (80048f8 <HAL_GPIO_Init+0x310>)
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	089b      	lsrs	r3, r3, #2
 8004790:	3302      	adds	r3, #2
 8004792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	220f      	movs	r2, #15
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4013      	ands	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a52      	ldr	r2, [pc, #328]	@ (80048fc <HAL_GPIO_Init+0x314>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d02b      	beq.n	800480e <HAL_GPIO_Init+0x226>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a51      	ldr	r2, [pc, #324]	@ (8004900 <HAL_GPIO_Init+0x318>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d025      	beq.n	800480a <HAL_GPIO_Init+0x222>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a50      	ldr	r2, [pc, #320]	@ (8004904 <HAL_GPIO_Init+0x31c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01f      	beq.n	8004806 <HAL_GPIO_Init+0x21e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a4f      	ldr	r2, [pc, #316]	@ (8004908 <HAL_GPIO_Init+0x320>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d019      	beq.n	8004802 <HAL_GPIO_Init+0x21a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a4e      	ldr	r2, [pc, #312]	@ (800490c <HAL_GPIO_Init+0x324>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d013      	beq.n	80047fe <HAL_GPIO_Init+0x216>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a4d      	ldr	r2, [pc, #308]	@ (8004910 <HAL_GPIO_Init+0x328>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00d      	beq.n	80047fa <HAL_GPIO_Init+0x212>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a4c      	ldr	r2, [pc, #304]	@ (8004914 <HAL_GPIO_Init+0x32c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <HAL_GPIO_Init+0x20e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004918 <HAL_GPIO_Init+0x330>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d101      	bne.n	80047f2 <HAL_GPIO_Init+0x20a>
 80047ee:	2307      	movs	r3, #7
 80047f0:	e00e      	b.n	8004810 <HAL_GPIO_Init+0x228>
 80047f2:	2308      	movs	r3, #8
 80047f4:	e00c      	b.n	8004810 <HAL_GPIO_Init+0x228>
 80047f6:	2306      	movs	r3, #6
 80047f8:	e00a      	b.n	8004810 <HAL_GPIO_Init+0x228>
 80047fa:	2305      	movs	r3, #5
 80047fc:	e008      	b.n	8004810 <HAL_GPIO_Init+0x228>
 80047fe:	2304      	movs	r3, #4
 8004800:	e006      	b.n	8004810 <HAL_GPIO_Init+0x228>
 8004802:	2303      	movs	r3, #3
 8004804:	e004      	b.n	8004810 <HAL_GPIO_Init+0x228>
 8004806:	2302      	movs	r3, #2
 8004808:	e002      	b.n	8004810 <HAL_GPIO_Init+0x228>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_GPIO_Init+0x228>
 800480e:	2300      	movs	r3, #0
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	f002 0203 	and.w	r2, r2, #3
 8004816:	0092      	lsls	r2, r2, #2
 8004818:	4093      	lsls	r3, r2
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4313      	orrs	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004820:	4935      	ldr	r1, [pc, #212]	@ (80048f8 <HAL_GPIO_Init+0x310>)
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	3302      	adds	r3, #2
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800482e:	4b3b      	ldr	r3, [pc, #236]	@ (800491c <HAL_GPIO_Init+0x334>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	43db      	mvns	r3, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4013      	ands	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004852:	4a32      	ldr	r2, [pc, #200]	@ (800491c <HAL_GPIO_Init+0x334>)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004858:	4b30      	ldr	r3, [pc, #192]	@ (800491c <HAL_GPIO_Init+0x334>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800487c:	4a27      	ldr	r2, [pc, #156]	@ (800491c <HAL_GPIO_Init+0x334>)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004882:	4b26      	ldr	r3, [pc, #152]	@ (800491c <HAL_GPIO_Init+0x334>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	43db      	mvns	r3, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4013      	ands	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048a6:	4a1d      	ldr	r2, [pc, #116]	@ (800491c <HAL_GPIO_Init+0x334>)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048ac:	4b1b      	ldr	r3, [pc, #108]	@ (800491c <HAL_GPIO_Init+0x334>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048d0:	4a12      	ldr	r2, [pc, #72]	@ (800491c <HAL_GPIO_Init+0x334>)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	3301      	adds	r3, #1
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	f67f ae90 	bls.w	8004604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	3724      	adds	r7, #36	@ 0x24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40023800 	.word	0x40023800
 80048f8:	40013800 	.word	0x40013800
 80048fc:	40020000 	.word	0x40020000
 8004900:	40020400 	.word	0x40020400
 8004904:	40020800 	.word	0x40020800
 8004908:	40020c00 	.word	0x40020c00
 800490c:	40021000 	.word	0x40021000
 8004910:	40021400 	.word	0x40021400
 8004914:	40021800 	.word	0x40021800
 8004918:	40021c00 	.word	0x40021c00
 800491c:	40013c00 	.word	0x40013c00

08004920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	887b      	ldrh	r3, [r7, #2]
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
 800493c:	e001      	b.n	8004942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800493e:	2300      	movs	r3, #0
 8004940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004942:	7bfb      	ldrb	r3, [r7, #15]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	807b      	strh	r3, [r7, #2]
 800495c:	4613      	mov	r3, r2
 800495e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004960:	787b      	ldrb	r3, [r7, #1]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004966:	887a      	ldrh	r2, [r7, #2]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800496c:	e003      	b.n	8004976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800496e:	887b      	ldrh	r3, [r7, #2]
 8004970:	041a      	lsls	r2, r3, #16
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	619a      	str	r2, [r3, #24]
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e12b      	b.n	8004bee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fc ff30 	bl	8001810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2224      	movs	r2, #36	@ 0x24
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0201 	bic.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049e8:	f000 fd80 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 80049ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	4a81      	ldr	r2, [pc, #516]	@ (8004bf8 <HAL_I2C_Init+0x274>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d807      	bhi.n	8004a08 <HAL_I2C_Init+0x84>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4a80      	ldr	r2, [pc, #512]	@ (8004bfc <HAL_I2C_Init+0x278>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	bf94      	ite	ls
 8004a00:	2301      	movls	r3, #1
 8004a02:	2300      	movhi	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	e006      	b.n	8004a16 <HAL_I2C_Init+0x92>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a7d      	ldr	r2, [pc, #500]	@ (8004c00 <HAL_I2C_Init+0x27c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	bf94      	ite	ls
 8004a10:	2301      	movls	r3, #1
 8004a12:	2300      	movhi	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e0e7      	b.n	8004bee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4a78      	ldr	r2, [pc, #480]	@ (8004c04 <HAL_I2C_Init+0x280>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	0c9b      	lsrs	r3, r3, #18
 8004a28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4a6a      	ldr	r2, [pc, #424]	@ (8004bf8 <HAL_I2C_Init+0x274>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d802      	bhi.n	8004a58 <HAL_I2C_Init+0xd4>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	3301      	adds	r3, #1
 8004a56:	e009      	b.n	8004a6c <HAL_I2C_Init+0xe8>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a5e:	fb02 f303 	mul.w	r3, r2, r3
 8004a62:	4a69      	ldr	r2, [pc, #420]	@ (8004c08 <HAL_I2C_Init+0x284>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	099b      	lsrs	r3, r3, #6
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	495c      	ldr	r1, [pc, #368]	@ (8004bf8 <HAL_I2C_Init+0x274>)
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	d819      	bhi.n	8004ac0 <HAL_I2C_Init+0x13c>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	1e59      	subs	r1, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a9a:	1c59      	adds	r1, r3, #1
 8004a9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004aa0:	400b      	ands	r3, r1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <HAL_I2C_Init+0x138>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1e59      	subs	r1, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aba:	e051      	b.n	8004b60 <HAL_I2C_Init+0x1dc>
 8004abc:	2304      	movs	r3, #4
 8004abe:	e04f      	b.n	8004b60 <HAL_I2C_Init+0x1dc>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d111      	bne.n	8004aec <HAL_I2C_Init+0x168>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	1e58      	subs	r0, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6859      	ldr	r1, [r3, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	440b      	add	r3, r1
 8004ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ada:	3301      	adds	r3, #1
 8004adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	e012      	b.n	8004b12 <HAL_I2C_Init+0x18e>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1e58      	subs	r0, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6859      	ldr	r1, [r3, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	0099      	lsls	r1, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b02:	3301      	adds	r3, #1
 8004b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_I2C_Init+0x196>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e022      	b.n	8004b60 <HAL_I2C_Init+0x1dc>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10e      	bne.n	8004b40 <HAL_I2C_Init+0x1bc>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1e58      	subs	r0, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6859      	ldr	r1, [r3, #4]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	440b      	add	r3, r1
 8004b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b34:	3301      	adds	r3, #1
 8004b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b3e:	e00f      	b.n	8004b60 <HAL_I2C_Init+0x1dc>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	1e58      	subs	r0, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6859      	ldr	r1, [r3, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	0099      	lsls	r1, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b56:	3301      	adds	r3, #1
 8004b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	6809      	ldr	r1, [r1, #0]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69da      	ldr	r2, [r3, #28]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6911      	ldr	r1, [r2, #16]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68d2      	ldr	r2, [r2, #12]
 8004b9a:	4311      	orrs	r1, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695a      	ldr	r2, [r3, #20]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	000186a0 	.word	0x000186a0
 8004bfc:	001e847f 	.word	0x001e847f
 8004c00:	003d08ff 	.word	0x003d08ff
 8004c04:	431bde83 	.word	0x431bde83
 8004c08:	10624dd3 	.word	0x10624dd3

08004c0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e267      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d075      	beq.n	8004d16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c2a:	4b88      	ldr	r3, [pc, #544]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d00c      	beq.n	8004c50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c36:	4b85      	ldr	r3, [pc, #532]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d112      	bne.n	8004c68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c42:	4b82      	ldr	r3, [pc, #520]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c4e:	d10b      	bne.n	8004c68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c50:	4b7e      	ldr	r3, [pc, #504]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d05b      	beq.n	8004d14 <HAL_RCC_OscConfig+0x108>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d157      	bne.n	8004d14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e242      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c70:	d106      	bne.n	8004c80 <HAL_RCC_OscConfig+0x74>
 8004c72:	4b76      	ldr	r3, [pc, #472]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a75      	ldr	r2, [pc, #468]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e01d      	b.n	8004cbc <HAL_RCC_OscConfig+0xb0>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c88:	d10c      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x98>
 8004c8a:	4b70      	ldr	r3, [pc, #448]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a6f      	ldr	r2, [pc, #444]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	4b6d      	ldr	r3, [pc, #436]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a6c      	ldr	r2, [pc, #432]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e00b      	b.n	8004cbc <HAL_RCC_OscConfig+0xb0>
 8004ca4:	4b69      	ldr	r3, [pc, #420]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a68      	ldr	r2, [pc, #416]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	4b66      	ldr	r3, [pc, #408]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a65      	ldr	r2, [pc, #404]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d013      	beq.n	8004cec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc4:	f7fd fe5e 	bl	8002984 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ccc:	f7fd fe5a 	bl	8002984 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b64      	cmp	r3, #100	@ 0x64
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e207      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cde:	4b5b      	ldr	r3, [pc, #364]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0xc0>
 8004cea:	e014      	b.n	8004d16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cec:	f7fd fe4a 	bl	8002984 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf4:	f7fd fe46 	bl	8002984 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	@ 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e1f3      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d06:	4b51      	ldr	r3, [pc, #324]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0xe8>
 8004d12:	e000      	b.n	8004d16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d063      	beq.n	8004dea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d22:	4b4a      	ldr	r3, [pc, #296]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d2e:	4b47      	ldr	r3, [pc, #284]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d11c      	bne.n	8004d74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d3a:	4b44      	ldr	r3, [pc, #272]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d116      	bne.n	8004d74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d46:	4b41      	ldr	r3, [pc, #260]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_RCC_OscConfig+0x152>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d001      	beq.n	8004d5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e1c7      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4937      	ldr	r1, [pc, #220]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d72:	e03a      	b.n	8004dea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d020      	beq.n	8004dbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d7c:	4b34      	ldr	r3, [pc, #208]	@ (8004e50 <HAL_RCC_OscConfig+0x244>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d82:	f7fd fdff 	bl	8002984 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d8a:	f7fd fdfb 	bl	8002984 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e1a8      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da8:	4b28      	ldr	r3, [pc, #160]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4925      	ldr	r1, [pc, #148]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	600b      	str	r3, [r1, #0]
 8004dbc:	e015      	b.n	8004dea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dbe:	4b24      	ldr	r3, [pc, #144]	@ (8004e50 <HAL_RCC_OscConfig+0x244>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc4:	f7fd fdde 	bl	8002984 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dcc:	f7fd fdda 	bl	8002984 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e187      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dde:	4b1b      	ldr	r3, [pc, #108]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d036      	beq.n	8004e64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d016      	beq.n	8004e2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dfe:	4b15      	ldr	r3, [pc, #84]	@ (8004e54 <HAL_RCC_OscConfig+0x248>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e04:	f7fd fdbe 	bl	8002984 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e0c:	f7fd fdba 	bl	8002984 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e167      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0x200>
 8004e2a:	e01b      	b.n	8004e64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e2c:	4b09      	ldr	r3, [pc, #36]	@ (8004e54 <HAL_RCC_OscConfig+0x248>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e32:	f7fd fda7 	bl	8002984 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e38:	e00e      	b.n	8004e58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e3a:	f7fd fda3 	bl	8002984 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d907      	bls.n	8004e58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e150      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	42470000 	.word	0x42470000
 8004e54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e58:	4b88      	ldr	r3, [pc, #544]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ea      	bne.n	8004e3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8097 	beq.w	8004fa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e72:	2300      	movs	r3, #0
 8004e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e76:	4b81      	ldr	r3, [pc, #516]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10f      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	4b7d      	ldr	r3, [pc, #500]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	4a7c      	ldr	r2, [pc, #496]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e92:	4b7a      	ldr	r3, [pc, #488]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea2:	4b77      	ldr	r3, [pc, #476]	@ (8005080 <HAL_RCC_OscConfig+0x474>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d118      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eae:	4b74      	ldr	r3, [pc, #464]	@ (8005080 <HAL_RCC_OscConfig+0x474>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a73      	ldr	r2, [pc, #460]	@ (8005080 <HAL_RCC_OscConfig+0x474>)
 8004eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eba:	f7fd fd63 	bl	8002984 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec2:	f7fd fd5f 	bl	8002984 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e10c      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed4:	4b6a      	ldr	r3, [pc, #424]	@ (8005080 <HAL_RCC_OscConfig+0x474>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d106      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x2ea>
 8004ee8:	4b64      	ldr	r3, [pc, #400]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eec:	4a63      	ldr	r2, [pc, #396]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ef4:	e01c      	b.n	8004f30 <HAL_RCC_OscConfig+0x324>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b05      	cmp	r3, #5
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCC_OscConfig+0x30c>
 8004efe:	4b5f      	ldr	r3, [pc, #380]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f02:	4a5e      	ldr	r2, [pc, #376]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f04:	f043 0304 	orr.w	r3, r3, #4
 8004f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f0a:	4b5c      	ldr	r3, [pc, #368]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0e:	4a5b      	ldr	r2, [pc, #364]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f16:	e00b      	b.n	8004f30 <HAL_RCC_OscConfig+0x324>
 8004f18:	4b58      	ldr	r3, [pc, #352]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1c:	4a57      	ldr	r2, [pc, #348]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f1e:	f023 0301 	bic.w	r3, r3, #1
 8004f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f24:	4b55      	ldr	r3, [pc, #340]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f28:	4a54      	ldr	r2, [pc, #336]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f2a:	f023 0304 	bic.w	r3, r3, #4
 8004f2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d015      	beq.n	8004f64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7fd fd24 	bl	8002984 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3e:	e00a      	b.n	8004f56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f40:	f7fd fd20 	bl	8002984 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e0cb      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f56:	4b49      	ldr	r3, [pc, #292]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0ee      	beq.n	8004f40 <HAL_RCC_OscConfig+0x334>
 8004f62:	e014      	b.n	8004f8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f64:	f7fd fd0e 	bl	8002984 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f6a:	e00a      	b.n	8004f82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f6c:	f7fd fd0a 	bl	8002984 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e0b5      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f82:	4b3e      	ldr	r3, [pc, #248]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1ee      	bne.n	8004f6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f94:	4b39      	ldr	r3, [pc, #228]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f98:	4a38      	ldr	r2, [pc, #224]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80a1 	beq.w	80050ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004faa:	4b34      	ldr	r3, [pc, #208]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d05c      	beq.n	8005070 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d141      	bne.n	8005042 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbe:	4b31      	ldr	r3, [pc, #196]	@ (8005084 <HAL_RCC_OscConfig+0x478>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7fd fcde 	bl	8002984 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fd fcda 	bl	8002984 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e087      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fde:	4b27      	ldr	r3, [pc, #156]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69da      	ldr	r2, [r3, #28]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	019b      	lsls	r3, r3, #6
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005000:	085b      	lsrs	r3, r3, #1
 8005002:	3b01      	subs	r3, #1
 8005004:	041b      	lsls	r3, r3, #16
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	061b      	lsls	r3, r3, #24
 800500e:	491b      	ldr	r1, [pc, #108]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8005010:	4313      	orrs	r3, r2
 8005012:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005014:	4b1b      	ldr	r3, [pc, #108]	@ (8005084 <HAL_RCC_OscConfig+0x478>)
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501a:	f7fd fcb3 	bl	8002984 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005022:	f7fd fcaf 	bl	8002984 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e05c      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005034:	4b11      	ldr	r3, [pc, #68]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x416>
 8005040:	e054      	b.n	80050ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005042:	4b10      	ldr	r3, [pc, #64]	@ (8005084 <HAL_RCC_OscConfig+0x478>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005048:	f7fd fc9c 	bl	8002984 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005050:	f7fd fc98 	bl	8002984 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e045      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005062:	4b06      	ldr	r3, [pc, #24]	@ (800507c <HAL_RCC_OscConfig+0x470>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x444>
 800506e:	e03d      	b.n	80050ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d107      	bne.n	8005088 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e038      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
 800507c:	40023800 	.word	0x40023800
 8005080:	40007000 	.word	0x40007000
 8005084:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005088:	4b1b      	ldr	r3, [pc, #108]	@ (80050f8 <HAL_RCC_OscConfig+0x4ec>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d028      	beq.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d121      	bne.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d11a      	bne.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050b8:	4013      	ands	r3, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d111      	bne.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ce:	085b      	lsrs	r3, r3, #1
 80050d0:	3b01      	subs	r3, #1
 80050d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d107      	bne.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40023800 	.word	0x40023800

080050fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0cc      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005110:	4b68      	ldr	r3, [pc, #416]	@ (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d90c      	bls.n	8005138 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b65      	ldr	r3, [pc, #404]	@ (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b63      	ldr	r3, [pc, #396]	@ (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0b8      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d020      	beq.n	8005186 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005150:	4b59      	ldr	r3, [pc, #356]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	4a58      	ldr	r2, [pc, #352]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800515a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005168:	4b53      	ldr	r3, [pc, #332]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4a52      	ldr	r2, [pc, #328]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005172:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005174:	4b50      	ldr	r3, [pc, #320]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	494d      	ldr	r1, [pc, #308]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	4313      	orrs	r3, r2
 8005184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d044      	beq.n	800521c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d107      	bne.n	80051aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519a:	4b47      	ldr	r3, [pc, #284]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d119      	bne.n	80051da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e07f      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d003      	beq.n	80051ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d107      	bne.n	80051ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ba:	4b3f      	ldr	r3, [pc, #252]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e06f      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ca:	4b3b      	ldr	r3, [pc, #236]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e067      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051da:	4b37      	ldr	r3, [pc, #220]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f023 0203 	bic.w	r2, r3, #3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	4934      	ldr	r1, [pc, #208]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051ec:	f7fd fbca 	bl	8002984 <HAL_GetTick>
 80051f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f2:	e00a      	b.n	800520a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f4:	f7fd fbc6 	bl	8002984 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005202:	4293      	cmp	r3, r2
 8005204:	d901      	bls.n	800520a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e04f      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520a:	4b2b      	ldr	r3, [pc, #172]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 020c 	and.w	r2, r3, #12
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	429a      	cmp	r2, r3
 800521a:	d1eb      	bne.n	80051f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800521c:	4b25      	ldr	r3, [pc, #148]	@ (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d20c      	bcs.n	8005244 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522a:	4b22      	ldr	r3, [pc, #136]	@ (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005232:	4b20      	ldr	r3, [pc, #128]	@ (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d001      	beq.n	8005244 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e032      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005250:	4b19      	ldr	r3, [pc, #100]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4916      	ldr	r1, [pc, #88]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d009      	beq.n	8005282 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800526e:	4b12      	ldr	r3, [pc, #72]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	490e      	ldr	r1, [pc, #56]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	4313      	orrs	r3, r2
 8005280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005282:	f000 f821 	bl	80052c8 <HAL_RCC_GetSysClockFreq>
 8005286:	4602      	mov	r2, r0
 8005288:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	091b      	lsrs	r3, r3, #4
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	490a      	ldr	r1, [pc, #40]	@ (80052bc <HAL_RCC_ClockConfig+0x1c0>)
 8005294:	5ccb      	ldrb	r3, [r1, r3]
 8005296:	fa22 f303 	lsr.w	r3, r2, r3
 800529a:	4a09      	ldr	r2, [pc, #36]	@ (80052c0 <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800529e:	4b09      	ldr	r3, [pc, #36]	@ (80052c4 <HAL_RCC_ClockConfig+0x1c8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fc fb6e 	bl	8001984 <HAL_InitTick>

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40023c00 	.word	0x40023c00
 80052b8:	40023800 	.word	0x40023800
 80052bc:	0800c1f8 	.word	0x0800c1f8
 80052c0:	20000000 	.word	0x20000000
 80052c4:	20000004 	.word	0x20000004

080052c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052cc:	b094      	sub	sp, #80	@ 0x50
 80052ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052e0:	4b79      	ldr	r3, [pc, #484]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 030c 	and.w	r3, r3, #12
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d00d      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0x40>
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	f200 80e1 	bhi.w	80054b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <HAL_RCC_GetSysClockFreq+0x34>
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d003      	beq.n	8005302 <HAL_RCC_GetSysClockFreq+0x3a>
 80052fa:	e0db      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052fc:	4b73      	ldr	r3, [pc, #460]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x204>)
 80052fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005300:	e0db      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005302:	4b73      	ldr	r3, [pc, #460]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005304:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005306:	e0d8      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005308:	4b6f      	ldr	r3, [pc, #444]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005310:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005312:	4b6d      	ldr	r3, [pc, #436]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d063      	beq.n	80053e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800531e:	4b6a      	ldr	r3, [pc, #424]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	099b      	lsrs	r3, r3, #6
 8005324:	2200      	movs	r2, #0
 8005326:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005328:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800532a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005330:	633b      	str	r3, [r7, #48]	@ 0x30
 8005332:	2300      	movs	r3, #0
 8005334:	637b      	str	r3, [r7, #52]	@ 0x34
 8005336:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800533a:	4622      	mov	r2, r4
 800533c:	462b      	mov	r3, r5
 800533e:	f04f 0000 	mov.w	r0, #0
 8005342:	f04f 0100 	mov.w	r1, #0
 8005346:	0159      	lsls	r1, r3, #5
 8005348:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800534c:	0150      	lsls	r0, r2, #5
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4621      	mov	r1, r4
 8005354:	1a51      	subs	r1, r2, r1
 8005356:	6139      	str	r1, [r7, #16]
 8005358:	4629      	mov	r1, r5
 800535a:	eb63 0301 	sbc.w	r3, r3, r1
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800536c:	4659      	mov	r1, fp
 800536e:	018b      	lsls	r3, r1, #6
 8005370:	4651      	mov	r1, sl
 8005372:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005376:	4651      	mov	r1, sl
 8005378:	018a      	lsls	r2, r1, #6
 800537a:	4651      	mov	r1, sl
 800537c:	ebb2 0801 	subs.w	r8, r2, r1
 8005380:	4659      	mov	r1, fp
 8005382:	eb63 0901 	sbc.w	r9, r3, r1
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800539a:	4690      	mov	r8, r2
 800539c:	4699      	mov	r9, r3
 800539e:	4623      	mov	r3, r4
 80053a0:	eb18 0303 	adds.w	r3, r8, r3
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	462b      	mov	r3, r5
 80053a8:	eb49 0303 	adc.w	r3, r9, r3
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053ba:	4629      	mov	r1, r5
 80053bc:	024b      	lsls	r3, r1, #9
 80053be:	4621      	mov	r1, r4
 80053c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053c4:	4621      	mov	r1, r4
 80053c6:	024a      	lsls	r2, r1, #9
 80053c8:	4610      	mov	r0, r2
 80053ca:	4619      	mov	r1, r3
 80053cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ce:	2200      	movs	r2, #0
 80053d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053d8:	f7fb fbe6 	bl	8000ba8 <__aeabi_uldivmod>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4613      	mov	r3, r2
 80053e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053e4:	e058      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053e6:	4b38      	ldr	r3, [pc, #224]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	099b      	lsrs	r3, r3, #6
 80053ec:	2200      	movs	r2, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	4611      	mov	r1, r2
 80053f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053f6:	623b      	str	r3, [r7, #32]
 80053f8:	2300      	movs	r3, #0
 80053fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80053fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005400:	4642      	mov	r2, r8
 8005402:	464b      	mov	r3, r9
 8005404:	f04f 0000 	mov.w	r0, #0
 8005408:	f04f 0100 	mov.w	r1, #0
 800540c:	0159      	lsls	r1, r3, #5
 800540e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005412:	0150      	lsls	r0, r2, #5
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4641      	mov	r1, r8
 800541a:	ebb2 0a01 	subs.w	sl, r2, r1
 800541e:	4649      	mov	r1, r9
 8005420:	eb63 0b01 	sbc.w	fp, r3, r1
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005430:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005434:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005438:	ebb2 040a 	subs.w	r4, r2, sl
 800543c:	eb63 050b 	sbc.w	r5, r3, fp
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	00eb      	lsls	r3, r5, #3
 800544a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800544e:	00e2      	lsls	r2, r4, #3
 8005450:	4614      	mov	r4, r2
 8005452:	461d      	mov	r5, r3
 8005454:	4643      	mov	r3, r8
 8005456:	18e3      	adds	r3, r4, r3
 8005458:	603b      	str	r3, [r7, #0]
 800545a:	464b      	mov	r3, r9
 800545c:	eb45 0303 	adc.w	r3, r5, r3
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800546e:	4629      	mov	r1, r5
 8005470:	028b      	lsls	r3, r1, #10
 8005472:	4621      	mov	r1, r4
 8005474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005478:	4621      	mov	r1, r4
 800547a:	028a      	lsls	r2, r1, #10
 800547c:	4610      	mov	r0, r2
 800547e:	4619      	mov	r1, r3
 8005480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005482:	2200      	movs	r2, #0
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	61fa      	str	r2, [r7, #28]
 8005488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800548c:	f7fb fb8c 	bl	8000ba8 <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4613      	mov	r3, r2
 8005496:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005498:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	3301      	adds	r3, #1
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80054a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054b2:	e002      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054b4:	4b05      	ldr	r3, [pc, #20]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x204>)
 80054b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3750      	adds	r7, #80	@ 0x50
 80054c0:	46bd      	mov	sp, r7
 80054c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c6:	bf00      	nop
 80054c8:	40023800 	.word	0x40023800
 80054cc:	00f42400 	.word	0x00f42400
 80054d0:	007a1200 	.word	0x007a1200

080054d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d8:	4b03      	ldr	r3, [pc, #12]	@ (80054e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000000 	.word	0x20000000

080054ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054f0:	f7ff fff0 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b05      	ldr	r3, [pc, #20]	@ (800550c <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	0a9b      	lsrs	r3, r3, #10
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4903      	ldr	r1, [pc, #12]	@ (8005510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40023800 	.word	0x40023800
 8005510:	0800c208 	.word	0x0800c208

08005514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005518:	f7ff ffdc 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 800551c:	4602      	mov	r2, r0
 800551e:	4b05      	ldr	r3, [pc, #20]	@ (8005534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	0b5b      	lsrs	r3, r3, #13
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	4903      	ldr	r1, [pc, #12]	@ (8005538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800552a:	5ccb      	ldrb	r3, [r1, r3]
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005530:	4618      	mov	r0, r3
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40023800 	.word	0x40023800
 8005538:	0800c208 	.word	0x0800c208

0800553c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	220f      	movs	r2, #15
 800554a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800554c:	4b12      	ldr	r3, [pc, #72]	@ (8005598 <HAL_RCC_GetClockConfig+0x5c>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 0203 	and.w	r2, r3, #3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005558:	4b0f      	ldr	r3, [pc, #60]	@ (8005598 <HAL_RCC_GetClockConfig+0x5c>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005564:	4b0c      	ldr	r3, [pc, #48]	@ (8005598 <HAL_RCC_GetClockConfig+0x5c>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005570:	4b09      	ldr	r3, [pc, #36]	@ (8005598 <HAL_RCC_GetClockConfig+0x5c>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	08db      	lsrs	r3, r3, #3
 8005576:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800557e:	4b07      	ldr	r3, [pc, #28]	@ (800559c <HAL_RCC_GetClockConfig+0x60>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0207 	and.w	r2, r3, #7
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	601a      	str	r2, [r3, #0]
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40023800 	.word	0x40023800
 800559c:	40023c00 	.word	0x40023c00

080055a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e041      	b.n	8005636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f839 	bl	800563e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3304      	adds	r3, #4
 80055dc:	4619      	mov	r1, r3
 80055de:	4610      	mov	r0, r2
 80055e0:	f000 f9c0 	bl	8005964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b01      	cmp	r3, #1
 8005666:	d001      	beq.n	800566c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e04e      	b.n	800570a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a23      	ldr	r2, [pc, #140]	@ (8005718 <HAL_TIM_Base_Start_IT+0xc4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d022      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x80>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005696:	d01d      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x80>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1f      	ldr	r2, [pc, #124]	@ (800571c <HAL_TIM_Base_Start_IT+0xc8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d018      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x80>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005720 <HAL_TIM_Base_Start_IT+0xcc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d013      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x80>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005724 <HAL_TIM_Base_Start_IT+0xd0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00e      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x80>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005728 <HAL_TIM_Base_Start_IT+0xd4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d009      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x80>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a19      	ldr	r2, [pc, #100]	@ (800572c <HAL_TIM_Base_Start_IT+0xd8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d004      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x80>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a18      	ldr	r2, [pc, #96]	@ (8005730 <HAL_TIM_Base_Start_IT+0xdc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d111      	bne.n	80056f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b06      	cmp	r3, #6
 80056e4:	d010      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0201 	orr.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f6:	e007      	b.n	8005708 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40010000 	.word	0x40010000
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800
 8005724:	40000c00 	.word	0x40000c00
 8005728:	40010400 	.word	0x40010400
 800572c:	40014000 	.word	0x40014000
 8005730:	40001800 	.word	0x40001800

08005734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d020      	beq.n	8005798 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01b      	beq.n	8005798 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0202 	mvn.w	r2, #2
 8005768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f8d2 	bl	8005928 <HAL_TIM_IC_CaptureCallback>
 8005784:	e005      	b.n	8005792 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f8c4 	bl	8005914 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f8d5 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d020      	beq.n	80057e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01b      	beq.n	80057e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0204 	mvn.w	r2, #4
 80057b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2202      	movs	r2, #2
 80057ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f8ac 	bl	8005928 <HAL_TIM_IC_CaptureCallback>
 80057d0:	e005      	b.n	80057de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f89e 	bl	8005914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f8af 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d020      	beq.n	8005830 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01b      	beq.n	8005830 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0208 	mvn.w	r2, #8
 8005800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2204      	movs	r2, #4
 8005806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f886 	bl	8005928 <HAL_TIM_IC_CaptureCallback>
 800581c:	e005      	b.n	800582a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f878 	bl	8005914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f889 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b00      	cmp	r3, #0
 8005838:	d020      	beq.n	800587c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01b      	beq.n	800587c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0210 	mvn.w	r2, #16
 800584c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2208      	movs	r2, #8
 8005852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f860 	bl	8005928 <HAL_TIM_IC_CaptureCallback>
 8005868:	e005      	b.n	8005876 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f852 	bl	8005914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f863 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00c      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0201 	mvn.w	r2, #1
 8005898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fb feb0 	bl	8001600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00c      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80058bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f900 	bl	8005ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00c      	beq.n	80058e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d007      	beq.n	80058e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f834 	bl	8005950 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00c      	beq.n	800590c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d007      	beq.n	800590c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0220 	mvn.w	r2, #32
 8005904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f8d2 	bl	8005ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a43      	ldr	r2, [pc, #268]	@ (8005a84 <TIM_Base_SetConfig+0x120>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d013      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005982:	d00f      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a40      	ldr	r2, [pc, #256]	@ (8005a88 <TIM_Base_SetConfig+0x124>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00b      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a3f      	ldr	r2, [pc, #252]	@ (8005a8c <TIM_Base_SetConfig+0x128>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d007      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a3e      	ldr	r2, [pc, #248]	@ (8005a90 <TIM_Base_SetConfig+0x12c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a3d      	ldr	r2, [pc, #244]	@ (8005a94 <TIM_Base_SetConfig+0x130>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d108      	bne.n	80059b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a32      	ldr	r2, [pc, #200]	@ (8005a84 <TIM_Base_SetConfig+0x120>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d02b      	beq.n	8005a16 <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c4:	d027      	beq.n	8005a16 <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005a88 <TIM_Base_SetConfig+0x124>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d023      	beq.n	8005a16 <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2e      	ldr	r2, [pc, #184]	@ (8005a8c <TIM_Base_SetConfig+0x128>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01f      	beq.n	8005a16 <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005a90 <TIM_Base_SetConfig+0x12c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d01b      	beq.n	8005a16 <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005a94 <TIM_Base_SetConfig+0x130>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d017      	beq.n	8005a16 <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005a98 <TIM_Base_SetConfig+0x134>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d013      	beq.n	8005a16 <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2a      	ldr	r2, [pc, #168]	@ (8005a9c <TIM_Base_SetConfig+0x138>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00f      	beq.n	8005a16 <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a29      	ldr	r2, [pc, #164]	@ (8005aa0 <TIM_Base_SetConfig+0x13c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00b      	beq.n	8005a16 <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a28      	ldr	r2, [pc, #160]	@ (8005aa4 <TIM_Base_SetConfig+0x140>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d007      	beq.n	8005a16 <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a27      	ldr	r2, [pc, #156]	@ (8005aa8 <TIM_Base_SetConfig+0x144>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d003      	beq.n	8005a16 <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a26      	ldr	r2, [pc, #152]	@ (8005aac <TIM_Base_SetConfig+0x148>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d108      	bne.n	8005a28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a0e      	ldr	r2, [pc, #56]	@ (8005a84 <TIM_Base_SetConfig+0x120>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_Base_SetConfig+0xf2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a10      	ldr	r2, [pc, #64]	@ (8005a94 <TIM_Base_SetConfig+0x130>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d103      	bne.n	8005a5e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f043 0204 	orr.w	r2, r3, #4
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	601a      	str	r2, [r3, #0]
}
 8005a76:	bf00      	nop
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40010000 	.word	0x40010000
 8005a88:	40000400 	.word	0x40000400
 8005a8c:	40000800 	.word	0x40000800
 8005a90:	40000c00 	.word	0x40000c00
 8005a94:	40010400 	.word	0x40010400
 8005a98:	40014000 	.word	0x40014000
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40014800 	.word	0x40014800
 8005aa4:	40001800 	.word	0x40001800
 8005aa8:	40001c00 	.word	0x40001c00
 8005aac:	40002000 	.word	0x40002000

08005ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e042      	b.n	8005b70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fb fef0 	bl	80018e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2224      	movs	r2, #36	@ 0x24
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fc99 	bl	8006454 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	695a      	ldr	r2, [r3, #20]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b0ba      	sub	sp, #232	@ 0xe8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005bb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10f      	bne.n	8005bde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <HAL_UART_IRQHandler+0x66>
 8005bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fb7e 	bl	80062d8 <UART_Receive_IT>
      return;
 8005bdc:	e273      	b.n	80060c6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 80de 	beq.w	8005da4 <HAL_UART_IRQHandler+0x22c>
 8005be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d106      	bne.n	8005c02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bf8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 80d1 	beq.w	8005da4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00b      	beq.n	8005c26 <HAL_UART_IRQHandler+0xae>
 8005c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1e:	f043 0201 	orr.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00b      	beq.n	8005c4a <HAL_UART_IRQHandler+0xd2>
 8005c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d005      	beq.n	8005c4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c42:	f043 0202 	orr.w	r2, r3, #2
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00b      	beq.n	8005c6e <HAL_UART_IRQHandler+0xf6>
 8005c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d005      	beq.n	8005c6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c66:	f043 0204 	orr.w	r2, r3, #4
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d011      	beq.n	8005c9e <HAL_UART_IRQHandler+0x126>
 8005c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c7e:	f003 0320 	and.w	r3, r3, #32
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d105      	bne.n	8005c92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c96:	f043 0208 	orr.w	r2, r3, #8
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 820a 	beq.w	80060bc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cac:	f003 0320 	and.w	r3, r3, #32
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d008      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x14e>
 8005cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fb09 	bl	80062d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd0:	2b40      	cmp	r3, #64	@ 0x40
 8005cd2:	bf0c      	ite	eq
 8005cd4:	2301      	moveq	r3, #1
 8005cd6:	2300      	movne	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d103      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x17a>
 8005cea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d04f      	beq.n	8005d92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa14 	bl	8006120 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d02:	2b40      	cmp	r3, #64	@ 0x40
 8005d04:	d141      	bne.n	8005d8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3314      	adds	r3, #20
 8005d0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3314      	adds	r3, #20
 8005d2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1d9      	bne.n	8005d06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d013      	beq.n	8005d82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5e:	4a8a      	ldr	r2, [pc, #552]	@ (8005f88 <HAL_UART_IRQHandler+0x410>)
 8005d60:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe f9b2 	bl	80040d0 <HAL_DMA_Abort_IT>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d016      	beq.n	8005da0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d80:	e00e      	b.n	8005da0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f9b6 	bl	80060f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d88:	e00a      	b.n	8005da0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f9b2 	bl	80060f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d90:	e006      	b.n	8005da0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f9ae 	bl	80060f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005d9e:	e18d      	b.n	80060bc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da0:	bf00      	nop
    return;
 8005da2:	e18b      	b.n	80060bc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	f040 8167 	bne.w	800607c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db2:	f003 0310 	and.w	r3, r3, #16
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 8160 	beq.w	800607c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8159 	beq.w	800607c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60bb      	str	r3, [r7, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	60bb      	str	r3, [r7, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	60bb      	str	r3, [r7, #8]
 8005dde:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dea:	2b40      	cmp	r3, #64	@ 0x40
 8005dec:	f040 80ce 	bne.w	8005f8c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 80a9 	beq.w	8005f58 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	f080 80a2 	bcs.w	8005f58 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e26:	f000 8088 	beq.w	8005f3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	330c      	adds	r3, #12
 8005e30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005e56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1d9      	bne.n	8005e2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3314      	adds	r3, #20
 8005e7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e88:	f023 0301 	bic.w	r3, r3, #1
 8005e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3314      	adds	r3, #20
 8005e96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ea2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005eac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e1      	bne.n	8005e76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3314      	adds	r3, #20
 8005eb8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ec4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3314      	adds	r3, #20
 8005ed2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ed6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005edc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e3      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	330c      	adds	r3, #12
 8005efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f02:	e853 3f00 	ldrex	r3, [r3]
 8005f06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f0a:	f023 0310 	bic.w	r3, r3, #16
 8005f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	330c      	adds	r3, #12
 8005f18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005f1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005f1e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e3      	bne.n	8005ef8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fe f85b 	bl	8003ff0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f8d9 	bl	8006108 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005f56:	e0b3      	b.n	80060c0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f60:	429a      	cmp	r2, r3
 8005f62:	f040 80ad 	bne.w	80060c0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f70:	f040 80a6 	bne.w	80060c0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f8c1 	bl	8006108 <HAL_UARTEx_RxEventCallback>
      return;
 8005f86:	e09b      	b.n	80060c0 <HAL_UART_IRQHandler+0x548>
 8005f88:	080061e7 	.word	0x080061e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 808e 	beq.w	80060c4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 8089 	beq.w	80060c4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	330c      	adds	r3, #12
 8005fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005fd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005fd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e3      	bne.n	8005fb2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3314      	adds	r3, #20
 8005ff0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	f023 0301 	bic.w	r3, r3, #1
 8006000:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3314      	adds	r3, #20
 800600a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800600e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006010:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800601c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e3      	bne.n	8005fea <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	330c      	adds	r3, #12
 8006036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0310 	bic.w	r3, r3, #16
 8006046:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	330c      	adds	r3, #12
 8006050:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006054:	61fa      	str	r2, [r7, #28]
 8006056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	69b9      	ldr	r1, [r7, #24]
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	617b      	str	r3, [r7, #20]
   return(result);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e3      	bne.n	8006030 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800606e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006072:	4619      	mov	r1, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f847 	bl	8006108 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800607a:	e023      	b.n	80060c4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800607c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006084:	2b00      	cmp	r3, #0
 8006086:	d009      	beq.n	800609c <HAL_UART_IRQHandler+0x524>
 8006088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800608c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f8b7 	bl	8006208 <UART_Transmit_IT>
    return;
 800609a:	e014      	b.n	80060c6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800609c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00e      	beq.n	80060c6 <HAL_UART_IRQHandler+0x54e>
 80060a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f8f7 	bl	80062a8 <UART_EndTransmit_IT>
    return;
 80060ba:	e004      	b.n	80060c6 <HAL_UART_IRQHandler+0x54e>
    return;
 80060bc:	bf00      	nop
 80060be:	e002      	b.n	80060c6 <HAL_UART_IRQHandler+0x54e>
      return;
 80060c0:	bf00      	nop
 80060c2:	e000      	b.n	80060c6 <HAL_UART_IRQHandler+0x54e>
      return;
 80060c4:	bf00      	nop
  }
}
 80060c6:	37e8      	adds	r7, #232	@ 0xe8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b095      	sub	sp, #84	@ 0x54
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800613e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	330c      	adds	r3, #12
 8006146:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006148:	643a      	str	r2, [r7, #64]	@ 0x40
 800614a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800614e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e5      	bne.n	8006128 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3314      	adds	r3, #20
 8006162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	e853 3f00 	ldrex	r3, [r3]
 800616a:	61fb      	str	r3, [r7, #28]
   return(result);
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	f023 0301 	bic.w	r3, r3, #1
 8006172:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3314      	adds	r3, #20
 800617a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800617c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800617e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800618a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e5      	bne.n	800615c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006194:	2b01      	cmp	r3, #1
 8006196:	d119      	bne.n	80061cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f023 0310 	bic.w	r3, r3, #16
 80061ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061b8:	61ba      	str	r2, [r7, #24]
 80061ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	6979      	ldr	r1, [r7, #20]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	613b      	str	r3, [r7, #16]
   return(result);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e5      	bne.n	8006198 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80061da:	bf00      	nop
 80061dc:	3754      	adds	r7, #84	@ 0x54
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff ff7a 	bl	80060f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006200:	bf00      	nop
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b21      	cmp	r3, #33	@ 0x21
 800621a:	d13e      	bne.n	800629a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006224:	d114      	bne.n	8006250 <UART_Transmit_IT+0x48>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d110      	bne.n	8006250 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006242:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	1c9a      	adds	r2, r3, #2
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	621a      	str	r2, [r3, #32]
 800624e:	e008      	b.n	8006262 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	1c59      	adds	r1, r3, #1
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6211      	str	r1, [r2, #32]
 800625a:	781a      	ldrb	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006266:	b29b      	uxth	r3, r3
 8006268:	3b01      	subs	r3, #1
 800626a:	b29b      	uxth	r3, r3
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	4619      	mov	r1, r3
 8006270:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10f      	bne.n	8006296 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006284:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006294:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	e000      	b.n	800629c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800629a:	2302      	movs	r3, #2
  }
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff feff 	bl	80060cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08c      	sub	sp, #48	@ 0x30
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80062e4:	2300      	movs	r3, #0
 80062e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b22      	cmp	r3, #34	@ 0x22
 80062f2:	f040 80aa 	bne.w	800644a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062fe:	d115      	bne.n	800632c <UART_Receive_IT+0x54>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d111      	bne.n	800632c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631a:	b29a      	uxth	r2, r3
 800631c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006324:	1c9a      	adds	r2, r3, #2
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	629a      	str	r2, [r3, #40]	@ 0x28
 800632a:	e024      	b.n	8006376 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006330:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800633a:	d007      	beq.n	800634c <UART_Receive_IT+0x74>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <UART_Receive_IT+0x82>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	b2da      	uxtb	r2, r3
 8006354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	e008      	b.n	800636c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006366:	b2da      	uxtb	r2, r3
 8006368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800637a:	b29b      	uxth	r3, r3
 800637c:	3b01      	subs	r3, #1
 800637e:	b29b      	uxth	r3, r3
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	4619      	mov	r1, r3
 8006384:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006386:	2b00      	cmp	r3, #0
 8006388:	d15d      	bne.n	8006446 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68da      	ldr	r2, [r3, #12]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0220 	bic.w	r2, r2, #32
 8006398:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	695a      	ldr	r2, [r3, #20]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0201 	bic.w	r2, r2, #1
 80063b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d135      	bne.n	800643c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	330c      	adds	r3, #12
 80063dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	613b      	str	r3, [r7, #16]
   return(result);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f023 0310 	bic.w	r3, r3, #16
 80063ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	330c      	adds	r3, #12
 80063f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f6:	623a      	str	r2, [r7, #32]
 80063f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	69f9      	ldr	r1, [r7, #28]
 80063fc:	6a3a      	ldr	r2, [r7, #32]
 80063fe:	e841 2300 	strex	r3, r2, [r1]
 8006402:	61bb      	str	r3, [r7, #24]
   return(result);
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e5      	bne.n	80063d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b10      	cmp	r3, #16
 8006416:	d10a      	bne.n	800642e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006418:	2300      	movs	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff fe67 	bl	8006108 <HAL_UARTEx_RxEventCallback>
 800643a:	e002      	b.n	8006442 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff fe4f 	bl	80060e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	e002      	b.n	800644c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	e000      	b.n	800644c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800644a:	2302      	movs	r3, #2
  }
}
 800644c:	4618      	mov	r0, r3
 800644e:	3730      	adds	r7, #48	@ 0x30
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006458:	b0c0      	sub	sp, #256	@ 0x100
 800645a:	af00      	add	r7, sp, #0
 800645c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006470:	68d9      	ldr	r1, [r3, #12]
 8006472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	ea40 0301 	orr.w	r3, r0, r1
 800647c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800647e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	431a      	orrs	r2, r3
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	431a      	orrs	r2, r3
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80064ac:	f021 010c 	bic.w	r1, r1, #12
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064ba:	430b      	orrs	r3, r1
 80064bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80064ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ce:	6999      	ldr	r1, [r3, #24]
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	ea40 0301 	orr.w	r3, r0, r1
 80064da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b8f      	ldr	r3, [pc, #572]	@ (8006720 <UART_SetConfig+0x2cc>)
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d005      	beq.n	80064f4 <UART_SetConfig+0xa0>
 80064e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	4b8d      	ldr	r3, [pc, #564]	@ (8006724 <UART_SetConfig+0x2d0>)
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d104      	bne.n	80064fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064f4:	f7ff f80e 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 80064f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80064fc:	e003      	b.n	8006506 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064fe:	f7fe fff5 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8006502:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006510:	f040 810c 	bne.w	800672c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006518:	2200      	movs	r2, #0
 800651a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800651e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006522:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006526:	4622      	mov	r2, r4
 8006528:	462b      	mov	r3, r5
 800652a:	1891      	adds	r1, r2, r2
 800652c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800652e:	415b      	adcs	r3, r3
 8006530:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006532:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006536:	4621      	mov	r1, r4
 8006538:	eb12 0801 	adds.w	r8, r2, r1
 800653c:	4629      	mov	r1, r5
 800653e:	eb43 0901 	adc.w	r9, r3, r1
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800654e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006556:	4690      	mov	r8, r2
 8006558:	4699      	mov	r9, r3
 800655a:	4623      	mov	r3, r4
 800655c:	eb18 0303 	adds.w	r3, r8, r3
 8006560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006564:	462b      	mov	r3, r5
 8006566:	eb49 0303 	adc.w	r3, r9, r3
 800656a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800656e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800657a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800657e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006582:	460b      	mov	r3, r1
 8006584:	18db      	adds	r3, r3, r3
 8006586:	653b      	str	r3, [r7, #80]	@ 0x50
 8006588:	4613      	mov	r3, r2
 800658a:	eb42 0303 	adc.w	r3, r2, r3
 800658e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006590:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006594:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006598:	f7fa fb06 	bl	8000ba8 <__aeabi_uldivmod>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4b61      	ldr	r3, [pc, #388]	@ (8006728 <UART_SetConfig+0x2d4>)
 80065a2:	fba3 2302 	umull	r2, r3, r3, r2
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	011c      	lsls	r4, r3, #4
 80065aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80065b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80065bc:	4642      	mov	r2, r8
 80065be:	464b      	mov	r3, r9
 80065c0:	1891      	adds	r1, r2, r2
 80065c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80065c4:	415b      	adcs	r3, r3
 80065c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80065cc:	4641      	mov	r1, r8
 80065ce:	eb12 0a01 	adds.w	sl, r2, r1
 80065d2:	4649      	mov	r1, r9
 80065d4:	eb43 0b01 	adc.w	fp, r3, r1
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065ec:	4692      	mov	sl, r2
 80065ee:	469b      	mov	fp, r3
 80065f0:	4643      	mov	r3, r8
 80065f2:	eb1a 0303 	adds.w	r3, sl, r3
 80065f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065fa:	464b      	mov	r3, r9
 80065fc:	eb4b 0303 	adc.w	r3, fp, r3
 8006600:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006610:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006614:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006618:	460b      	mov	r3, r1
 800661a:	18db      	adds	r3, r3, r3
 800661c:	643b      	str	r3, [r7, #64]	@ 0x40
 800661e:	4613      	mov	r3, r2
 8006620:	eb42 0303 	adc.w	r3, r2, r3
 8006624:	647b      	str	r3, [r7, #68]	@ 0x44
 8006626:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800662a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800662e:	f7fa fabb 	bl	8000ba8 <__aeabi_uldivmod>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4611      	mov	r1, r2
 8006638:	4b3b      	ldr	r3, [pc, #236]	@ (8006728 <UART_SetConfig+0x2d4>)
 800663a:	fba3 2301 	umull	r2, r3, r3, r1
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	2264      	movs	r2, #100	@ 0x64
 8006642:	fb02 f303 	mul.w	r3, r2, r3
 8006646:	1acb      	subs	r3, r1, r3
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800664e:	4b36      	ldr	r3, [pc, #216]	@ (8006728 <UART_SetConfig+0x2d4>)
 8006650:	fba3 2302 	umull	r2, r3, r3, r2
 8006654:	095b      	lsrs	r3, r3, #5
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800665c:	441c      	add	r4, r3
 800665e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006662:	2200      	movs	r2, #0
 8006664:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006668:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800666c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006670:	4642      	mov	r2, r8
 8006672:	464b      	mov	r3, r9
 8006674:	1891      	adds	r1, r2, r2
 8006676:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006678:	415b      	adcs	r3, r3
 800667a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800667c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006680:	4641      	mov	r1, r8
 8006682:	1851      	adds	r1, r2, r1
 8006684:	6339      	str	r1, [r7, #48]	@ 0x30
 8006686:	4649      	mov	r1, r9
 8006688:	414b      	adcs	r3, r1
 800668a:	637b      	str	r3, [r7, #52]	@ 0x34
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	f04f 0300 	mov.w	r3, #0
 8006694:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006698:	4659      	mov	r1, fp
 800669a:	00cb      	lsls	r3, r1, #3
 800669c:	4651      	mov	r1, sl
 800669e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066a2:	4651      	mov	r1, sl
 80066a4:	00ca      	lsls	r2, r1, #3
 80066a6:	4610      	mov	r0, r2
 80066a8:	4619      	mov	r1, r3
 80066aa:	4603      	mov	r3, r0
 80066ac:	4642      	mov	r2, r8
 80066ae:	189b      	adds	r3, r3, r2
 80066b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066b4:	464b      	mov	r3, r9
 80066b6:	460a      	mov	r2, r1
 80066b8:	eb42 0303 	adc.w	r3, r2, r3
 80066bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80066d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066d4:	460b      	mov	r3, r1
 80066d6:	18db      	adds	r3, r3, r3
 80066d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066da:	4613      	mov	r3, r2
 80066dc:	eb42 0303 	adc.w	r3, r2, r3
 80066e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80066ea:	f7fa fa5d 	bl	8000ba8 <__aeabi_uldivmod>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006728 <UART_SetConfig+0x2d4>)
 80066f4:	fba3 1302 	umull	r1, r3, r3, r2
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	2164      	movs	r1, #100	@ 0x64
 80066fc:	fb01 f303 	mul.w	r3, r1, r3
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	3332      	adds	r3, #50	@ 0x32
 8006706:	4a08      	ldr	r2, [pc, #32]	@ (8006728 <UART_SetConfig+0x2d4>)
 8006708:	fba2 2303 	umull	r2, r3, r2, r3
 800670c:	095b      	lsrs	r3, r3, #5
 800670e:	f003 0207 	and.w	r2, r3, #7
 8006712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4422      	add	r2, r4
 800671a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800671c:	e106      	b.n	800692c <UART_SetConfig+0x4d8>
 800671e:	bf00      	nop
 8006720:	40011000 	.word	0x40011000
 8006724:	40011400 	.word	0x40011400
 8006728:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800672c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006730:	2200      	movs	r2, #0
 8006732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006736:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800673a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800673e:	4642      	mov	r2, r8
 8006740:	464b      	mov	r3, r9
 8006742:	1891      	adds	r1, r2, r2
 8006744:	6239      	str	r1, [r7, #32]
 8006746:	415b      	adcs	r3, r3
 8006748:	627b      	str	r3, [r7, #36]	@ 0x24
 800674a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800674e:	4641      	mov	r1, r8
 8006750:	1854      	adds	r4, r2, r1
 8006752:	4649      	mov	r1, r9
 8006754:	eb43 0501 	adc.w	r5, r3, r1
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	00eb      	lsls	r3, r5, #3
 8006762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006766:	00e2      	lsls	r2, r4, #3
 8006768:	4614      	mov	r4, r2
 800676a:	461d      	mov	r5, r3
 800676c:	4643      	mov	r3, r8
 800676e:	18e3      	adds	r3, r4, r3
 8006770:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006774:	464b      	mov	r3, r9
 8006776:	eb45 0303 	adc.w	r3, r5, r3
 800677a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800677e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800678a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800679a:	4629      	mov	r1, r5
 800679c:	008b      	lsls	r3, r1, #2
 800679e:	4621      	mov	r1, r4
 80067a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067a4:	4621      	mov	r1, r4
 80067a6:	008a      	lsls	r2, r1, #2
 80067a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80067ac:	f7fa f9fc 	bl	8000ba8 <__aeabi_uldivmod>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4b60      	ldr	r3, [pc, #384]	@ (8006938 <UART_SetConfig+0x4e4>)
 80067b6:	fba3 2302 	umull	r2, r3, r3, r2
 80067ba:	095b      	lsrs	r3, r3, #5
 80067bc:	011c      	lsls	r4, r3, #4
 80067be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80067cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80067d0:	4642      	mov	r2, r8
 80067d2:	464b      	mov	r3, r9
 80067d4:	1891      	adds	r1, r2, r2
 80067d6:	61b9      	str	r1, [r7, #24]
 80067d8:	415b      	adcs	r3, r3
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067e0:	4641      	mov	r1, r8
 80067e2:	1851      	adds	r1, r2, r1
 80067e4:	6139      	str	r1, [r7, #16]
 80067e6:	4649      	mov	r1, r9
 80067e8:	414b      	adcs	r3, r1
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067f8:	4659      	mov	r1, fp
 80067fa:	00cb      	lsls	r3, r1, #3
 80067fc:	4651      	mov	r1, sl
 80067fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006802:	4651      	mov	r1, sl
 8006804:	00ca      	lsls	r2, r1, #3
 8006806:	4610      	mov	r0, r2
 8006808:	4619      	mov	r1, r3
 800680a:	4603      	mov	r3, r0
 800680c:	4642      	mov	r2, r8
 800680e:	189b      	adds	r3, r3, r2
 8006810:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006814:	464b      	mov	r3, r9
 8006816:	460a      	mov	r2, r1
 8006818:	eb42 0303 	adc.w	r3, r2, r3
 800681c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	67bb      	str	r3, [r7, #120]	@ 0x78
 800682a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006838:	4649      	mov	r1, r9
 800683a:	008b      	lsls	r3, r1, #2
 800683c:	4641      	mov	r1, r8
 800683e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006842:	4641      	mov	r1, r8
 8006844:	008a      	lsls	r2, r1, #2
 8006846:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800684a:	f7fa f9ad 	bl	8000ba8 <__aeabi_uldivmod>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4611      	mov	r1, r2
 8006854:	4b38      	ldr	r3, [pc, #224]	@ (8006938 <UART_SetConfig+0x4e4>)
 8006856:	fba3 2301 	umull	r2, r3, r3, r1
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	2264      	movs	r2, #100	@ 0x64
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	1acb      	subs	r3, r1, r3
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	3332      	adds	r3, #50	@ 0x32
 8006868:	4a33      	ldr	r2, [pc, #204]	@ (8006938 <UART_SetConfig+0x4e4>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006874:	441c      	add	r4, r3
 8006876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800687a:	2200      	movs	r2, #0
 800687c:	673b      	str	r3, [r7, #112]	@ 0x70
 800687e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006880:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006884:	4642      	mov	r2, r8
 8006886:	464b      	mov	r3, r9
 8006888:	1891      	adds	r1, r2, r2
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	415b      	adcs	r3, r3
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006894:	4641      	mov	r1, r8
 8006896:	1851      	adds	r1, r2, r1
 8006898:	6039      	str	r1, [r7, #0]
 800689a:	4649      	mov	r1, r9
 800689c:	414b      	adcs	r3, r1
 800689e:	607b      	str	r3, [r7, #4]
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068ac:	4659      	mov	r1, fp
 80068ae:	00cb      	lsls	r3, r1, #3
 80068b0:	4651      	mov	r1, sl
 80068b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068b6:	4651      	mov	r1, sl
 80068b8:	00ca      	lsls	r2, r1, #3
 80068ba:	4610      	mov	r0, r2
 80068bc:	4619      	mov	r1, r3
 80068be:	4603      	mov	r3, r0
 80068c0:	4642      	mov	r2, r8
 80068c2:	189b      	adds	r3, r3, r2
 80068c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068c6:	464b      	mov	r3, r9
 80068c8:	460a      	mov	r2, r1
 80068ca:	eb42 0303 	adc.w	r3, r2, r3
 80068ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80068da:	667a      	str	r2, [r7, #100]	@ 0x64
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80068e8:	4649      	mov	r1, r9
 80068ea:	008b      	lsls	r3, r1, #2
 80068ec:	4641      	mov	r1, r8
 80068ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068f2:	4641      	mov	r1, r8
 80068f4:	008a      	lsls	r2, r1, #2
 80068f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80068fa:	f7fa f955 	bl	8000ba8 <__aeabi_uldivmod>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4b0d      	ldr	r3, [pc, #52]	@ (8006938 <UART_SetConfig+0x4e4>)
 8006904:	fba3 1302 	umull	r1, r3, r3, r2
 8006908:	095b      	lsrs	r3, r3, #5
 800690a:	2164      	movs	r1, #100	@ 0x64
 800690c:	fb01 f303 	mul.w	r3, r1, r3
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	3332      	adds	r3, #50	@ 0x32
 8006916:	4a08      	ldr	r2, [pc, #32]	@ (8006938 <UART_SetConfig+0x4e4>)
 8006918:	fba2 2303 	umull	r2, r3, r2, r3
 800691c:	095b      	lsrs	r3, r3, #5
 800691e:	f003 020f 	and.w	r2, r3, #15
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4422      	add	r2, r4
 800692a:	609a      	str	r2, [r3, #8]
}
 800692c:	bf00      	nop
 800692e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006932:	46bd      	mov	sp, r7
 8006934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006938:	51eb851f 	.word	0x51eb851f

0800693c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f103 0208 	add.w	r2, r3, #8
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f04f 32ff 	mov.w	r2, #4294967295
 8006954:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f103 0208 	add.w	r2, r3, #8
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f103 0208 	add.w	r2, r3, #8
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006996:	b480      	push	{r7}
 8006998:	b085      	sub	sp, #20
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ac:	d103      	bne.n	80069b6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	e00c      	b.n	80069d0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3308      	adds	r3, #8
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	e002      	b.n	80069c4 <vListInsert+0x2e>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d2f6      	bcs.n	80069be <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	601a      	str	r2, [r3, #0]
}
 80069fc:	bf00      	nop
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6892      	ldr	r2, [r2, #8]
 8006a1e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6852      	ldr	r2, [r2, #4]
 8006a28:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d103      	bne.n	8006a3c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	1e5a      	subs	r2, r3, #1
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8006a66:	2301      	movs	r3, #1
 8006a68:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10b      	bne.n	8006a8c <xQueueGenericReset+0x30>
        __asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	60fb      	str	r3, [r7, #12]
    }
 8006a86:	bf00      	nop
 8006a88:	bf00      	nop
 8006a8a:	e7fd      	b.n	8006a88 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d05d      	beq.n	8006b4e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d059      	beq.n	8006b4e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	fba3 2302 	umull	r2, r3, r3, r2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d000      	beq.n	8006aae <xQueueGenericReset+0x52>
 8006aac:	2101      	movs	r1, #1
 8006aae:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d14c      	bne.n	8006b4e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8006ab4:	f002 f932 	bl	8008d1c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac0:	6939      	ldr	r1, [r7, #16]
 8006ac2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ac4:	fb01 f303 	mul.w	r3, r1, r3
 8006ac8:	441a      	add	r2, r3
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	6939      	ldr	r1, [r7, #16]
 8006ae8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006aea:	fb01 f303 	mul.w	r3, r1, r3
 8006aee:	441a      	add	r2, r3
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	22ff      	movs	r2, #255	@ 0xff
 8006af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	22ff      	movs	r2, #255	@ 0xff
 8006b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d114      	bne.n	8006b34 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d01a      	beq.n	8006b48 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	3310      	adds	r3, #16
 8006b16:	4618      	mov	r0, r3
 8006b18:	f001 f9cc 	bl	8007eb4 <xTaskRemoveFromEventList>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d012      	beq.n	8006b48 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006b22:	4b16      	ldr	r3, [pc, #88]	@ (8006b7c <xQueueGenericReset+0x120>)
 8006b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	e009      	b.n	8006b48 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	3310      	adds	r3, #16
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7ff feff 	bl	800693c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	3324      	adds	r3, #36	@ 0x24
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7ff fefa 	bl	800693c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8006b48:	f002 f91a 	bl	8008d80 <vPortExitCritical>
 8006b4c:	e001      	b.n	8006b52 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10b      	bne.n	8006b70 <xQueueGenericReset+0x114>
        __asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	60bb      	str	r3, [r7, #8]
    }
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	e7fd      	b.n	8006b6c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8006b70:	697b      	ldr	r3, [r7, #20]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	e000ed04 	.word	0xe000ed04

08006b80 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08a      	sub	sp, #40	@ 0x28
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d02e      	beq.n	8006bf6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8006b98:	2100      	movs	r1, #0
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d000      	beq.n	8006ba8 <xQueueGenericCreate+0x28>
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d123      	bne.n	8006bf6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8006bb6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8006bba:	d81c      	bhi.n	8006bf6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	fb02 f303 	mul.w	r3, r2, r3
 8006bc4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	3350      	adds	r3, #80	@ 0x50
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f002 f9d0 	bl	8008f70 <pvPortMalloc>
 8006bd0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01d      	beq.n	8006c14 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	3350      	adds	r3, #80	@ 0x50
 8006be0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006be2:	79fa      	ldrb	r2, [r7, #7]
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	4613      	mov	r3, r2
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	68b9      	ldr	r1, [r7, #8]
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 f815 	bl	8006c1e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8006bf4:	e00e      	b.n	8006c14 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10b      	bne.n	8006c14 <xQueueGenericCreate+0x94>
        __asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	613b      	str	r3, [r7, #16]
    }
 8006c0e:	bf00      	nop
 8006c10:	bf00      	nop
 8006c12:	e7fd      	b.n	8006c10 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006c14:	69fb      	ldr	r3, [r7, #28]
    }
 8006c16:	4618      	mov	r0, r3
 8006c18:	3720      	adds	r7, #32
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d103      	bne.n	8006c3a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	e002      	b.n	8006c40 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	69b8      	ldr	r0, [r7, #24]
 8006c50:	f7ff ff04 	bl	8006a5c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	78fa      	ldrb	r2, [r7, #3]
 8006c58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8006c5c:	bf00      	nop
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08e      	sub	sp, #56	@ 0x38
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c72:	2300      	movs	r3, #0
 8006c74:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10b      	bne.n	8006c98 <xQueueGenericSend+0x34>
        __asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006c92:	bf00      	nop
 8006c94:	bf00      	nop
 8006c96:	e7fd      	b.n	8006c94 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d103      	bne.n	8006ca6 <xQueueGenericSend+0x42>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <xQueueGenericSend+0x46>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <xQueueGenericSend+0x48>
 8006caa:	2300      	movs	r3, #0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10b      	bne.n	8006cc8 <xQueueGenericSend+0x64>
        __asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	e7fd      	b.n	8006cc4 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d103      	bne.n	8006cd6 <xQueueGenericSend+0x72>
 8006cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <xQueueGenericSend+0x76>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <xQueueGenericSend+0x78>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10b      	bne.n	8006cf8 <xQueueGenericSend+0x94>
        __asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	623b      	str	r3, [r7, #32]
    }
 8006cf2:	bf00      	nop
 8006cf4:	bf00      	nop
 8006cf6:	e7fd      	b.n	8006cf4 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cf8:	f001 faf0 	bl	80082dc <xTaskGetSchedulerState>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d102      	bne.n	8006d08 <xQueueGenericSend+0xa4>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <xQueueGenericSend+0xa8>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <xQueueGenericSend+0xaa>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10b      	bne.n	8006d2a <xQueueGenericSend+0xc6>
        __asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	61fb      	str	r3, [r7, #28]
    }
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	e7fd      	b.n	8006d26 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006d2a:	f001 fff7 	bl	8008d1c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d302      	bcc.n	8006d40 <xQueueGenericSend+0xdc>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d129      	bne.n	8006d94 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d46:	f000 fa27 	bl	8007198 <prvCopyDataToQueue>
 8006d4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d010      	beq.n	8006d76 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d56:	3324      	adds	r3, #36	@ 0x24
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f001 f8ab 	bl	8007eb4 <xTaskRemoveFromEventList>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d013      	beq.n	8006d8c <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006d64:	4b3f      	ldr	r3, [pc, #252]	@ (8006e64 <xQueueGenericSend+0x200>)
 8006d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	e00a      	b.n	8006d8c <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8006d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d007      	beq.n	8006d8c <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8006d7c:	4b39      	ldr	r3, [pc, #228]	@ (8006e64 <xQueueGenericSend+0x200>)
 8006d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006d8c:	f001 fff8 	bl	8008d80 <vPortExitCritical>
                return pdPASS;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e063      	b.n	8006e5c <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d103      	bne.n	8006da2 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006d9a:	f001 fff1 	bl	8008d80 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e05c      	b.n	8006e5c <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d106      	bne.n	8006db6 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006da8:	f107 0314 	add.w	r3, r7, #20
 8006dac:	4618      	mov	r0, r3
 8006dae:	f001 f959 	bl	8008064 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006db2:	2301      	movs	r3, #1
 8006db4:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006db6:	f001 ffe3 	bl	8008d80 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006dba:	f000 fd75 	bl	80078a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006dbe:	f001 ffad 	bl	8008d1c <vPortEnterCritical>
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dc8:	b25b      	sxtb	r3, r3
 8006dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dce:	d103      	bne.n	8006dd8 <xQueueGenericSend+0x174>
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dde:	b25b      	sxtb	r3, r3
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d103      	bne.n	8006dee <xQueueGenericSend+0x18a>
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dee:	f001 ffc7 	bl	8008d80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006df2:	1d3a      	adds	r2, r7, #4
 8006df4:	f107 0314 	add.w	r3, r7, #20
 8006df8:	4611      	mov	r1, r2
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 f948 	bl	8008090 <xTaskCheckForTimeOut>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d124      	bne.n	8006e50 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e08:	f000 fabe 	bl	8007388 <prvIsQueueFull>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d018      	beq.n	8006e44 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e14:	3310      	adds	r3, #16
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	4611      	mov	r1, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 ffde 	bl	8007ddc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8006e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e22:	f000 fa49 	bl	80072b8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8006e26:	f000 fd4d 	bl	80078c4 <xTaskResumeAll>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f47f af7c 	bne.w	8006d2a <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8006e32:	4b0c      	ldr	r3, [pc, #48]	@ (8006e64 <xQueueGenericSend+0x200>)
 8006e34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	e772      	b.n	8006d2a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e46:	f000 fa37 	bl	80072b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006e4a:	f000 fd3b 	bl	80078c4 <xTaskResumeAll>
 8006e4e:	e76c      	b.n	8006d2a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e52:	f000 fa31 	bl	80072b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006e56:	f000 fd35 	bl	80078c4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8006e5a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3738      	adds	r7, #56	@ 0x38
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	e000ed04 	.word	0xe000ed04

08006e68 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b092      	sub	sp, #72	@ 0x48
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 8006e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10b      	bne.n	8006e98 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8006e92:	bf00      	nop
 8006e94:	bf00      	nop
 8006e96:	e7fd      	b.n	8006e94 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d103      	bne.n	8006ea6 <xQueueGenericSendFromISR+0x3e>
 8006e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <xQueueGenericSendFromISR+0x42>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e000      	b.n	8006eac <xQueueGenericSendFromISR+0x44>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10b      	bne.n	8006ec8 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	e7fd      	b.n	8006ec4 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d103      	bne.n	8006ed6 <xQueueGenericSendFromISR+0x6e>
 8006ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <xQueueGenericSendFromISR+0x72>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <xQueueGenericSendFromISR+0x74>
 8006eda:	2300      	movs	r3, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10b      	bne.n	8006ef8 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	e7fd      	b.n	8006ef4 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ef8:	f001 fff8 	bl	8008eec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006efc:	f3ef 8211 	mrs	r2, BASEPRI
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	623a      	str	r2, [r7, #32]
 8006f12:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006f14:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d302      	bcc.n	8006f2a <xQueueGenericSendFromISR+0xc2>
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d147      	bne.n	8006fba <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f30:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f38:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	68b9      	ldr	r1, [r7, #8]
 8006f3e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006f40:	f000 f92a 	bl	8007198 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006f44:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4c:	d112      	bne.n	8006f74 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d02e      	beq.n	8006fb4 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f58:	3324      	adds	r3, #36	@ 0x24
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 ffaa 	bl	8007eb4 <xTaskRemoveFromEventList>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d026      	beq.n	8006fb4 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d023      	beq.n	8006fb4 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	e01f      	b.n	8006fb4 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8006f74:	f000 fdb2 	bl	8007adc <uxTaskGetNumberOfTasks>
 8006f78:	6338      	str	r0, [r7, #48]	@ 0x30
 8006f7a:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8006f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d917      	bls.n	8006fb4 <xQueueGenericSendFromISR+0x14c>
 8006f84:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8006f88:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f8a:	d10b      	bne.n	8006fa4 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	61bb      	str	r3, [r7, #24]
    }
 8006f9e:	bf00      	nop
 8006fa0:	bf00      	nop
 8006fa2:	e7fd      	b.n	8006fa0 <xQueueGenericSendFromISR+0x138>
 8006fa4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006fa8:	3301      	adds	r3, #1
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	b25a      	sxtb	r2, r3
 8006fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8006fb8:	e001      	b.n	8006fbe <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fc0:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006fc8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3748      	adds	r7, #72	@ 0x48
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08c      	sub	sp, #48	@ 0x30
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10b      	bne.n	8007006 <xQueueReceive+0x32>
        __asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	623b      	str	r3, [r7, #32]
    }
 8007000:	bf00      	nop
 8007002:	bf00      	nop
 8007004:	e7fd      	b.n	8007002 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d103      	bne.n	8007014 <xQueueReceive+0x40>
 800700c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <xQueueReceive+0x44>
 8007014:	2301      	movs	r3, #1
 8007016:	e000      	b.n	800701a <xQueueReceive+0x46>
 8007018:	2300      	movs	r3, #0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10b      	bne.n	8007036 <xQueueReceive+0x62>
        __asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	61fb      	str	r3, [r7, #28]
    }
 8007030:	bf00      	nop
 8007032:	bf00      	nop
 8007034:	e7fd      	b.n	8007032 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007036:	f001 f951 	bl	80082dc <xTaskGetSchedulerState>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d102      	bne.n	8007046 <xQueueReceive+0x72>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <xQueueReceive+0x76>
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <xQueueReceive+0x78>
 800704a:	2300      	movs	r3, #0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10b      	bne.n	8007068 <xQueueReceive+0x94>
        __asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	61bb      	str	r3, [r7, #24]
    }
 8007062:	bf00      	nop
 8007064:	bf00      	nop
 8007066:	e7fd      	b.n	8007064 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007068:	f001 fe58 	bl	8008d1c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800706c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007070:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01f      	beq.n	80070b8 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007078:	68b9      	ldr	r1, [r7, #8]
 800707a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800707c:	f000 f8f6 	bl	800726c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007082:	1e5a      	subs	r2, r3, #1
 8007084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007086:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00f      	beq.n	80070b0 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	3310      	adds	r3, #16
 8007094:	4618      	mov	r0, r3
 8007096:	f000 ff0d 	bl	8007eb4 <xTaskRemoveFromEventList>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d007      	beq.n	80070b0 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80070a0:	4b3c      	ldr	r3, [pc, #240]	@ (8007194 <xQueueReceive+0x1c0>)
 80070a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80070b0:	f001 fe66 	bl	8008d80 <vPortExitCritical>
                return pdPASS;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e069      	b.n	800718c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d103      	bne.n	80070c6 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80070be:	f001 fe5f 	bl	8008d80 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e062      	b.n	800718c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80070c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d106      	bne.n	80070da <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80070cc:	f107 0310 	add.w	r3, r7, #16
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 ffc7 	bl	8008064 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80070d6:	2301      	movs	r3, #1
 80070d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80070da:	f001 fe51 	bl	8008d80 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80070de:	f000 fbe3 	bl	80078a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80070e2:	f001 fe1b 	bl	8008d1c <vPortEnterCritical>
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070ec:	b25b      	sxtb	r3, r3
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f2:	d103      	bne.n	80070fc <xQueueReceive+0x128>
 80070f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007102:	b25b      	sxtb	r3, r3
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007108:	d103      	bne.n	8007112 <xQueueReceive+0x13e>
 800710a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007112:	f001 fe35 	bl	8008d80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007116:	1d3a      	adds	r2, r7, #4
 8007118:	f107 0310 	add.w	r3, r7, #16
 800711c:	4611      	mov	r1, r2
 800711e:	4618      	mov	r0, r3
 8007120:	f000 ffb6 	bl	8008090 <xTaskCheckForTimeOut>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d123      	bne.n	8007172 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800712a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800712c:	f000 f916 	bl	800735c <prvIsQueueEmpty>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d017      	beq.n	8007166 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007138:	3324      	adds	r3, #36	@ 0x24
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	4611      	mov	r1, r2
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fe4c 	bl	8007ddc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007144:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007146:	f000 f8b7 	bl	80072b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800714a:	f000 fbbb 	bl	80078c4 <xTaskResumeAll>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d189      	bne.n	8007068 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8007154:	4b0f      	ldr	r3, [pc, #60]	@ (8007194 <xQueueReceive+0x1c0>)
 8007156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	e780      	b.n	8007068 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8007166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007168:	f000 f8a6 	bl	80072b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800716c:	f000 fbaa 	bl	80078c4 <xTaskResumeAll>
 8007170:	e77a      	b.n	8007068 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8007172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007174:	f000 f8a0 	bl	80072b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007178:	f000 fba4 	bl	80078c4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800717c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800717e:	f000 f8ed 	bl	800735c <prvIsQueueEmpty>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	f43f af6f 	beq.w	8007068 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800718a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800718c:	4618      	mov	r0, r3
 800718e:	3730      	adds	r7, #48	@ 0x30
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	e000ed04 	.word	0xe000ed04

08007198 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80071a4:	2300      	movs	r3, #0
 80071a6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ac:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10d      	bne.n	80071d2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d14d      	bne.n	800725a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f001 f8a8 	bl	8008318 <xTaskPriorityDisinherit>
 80071c8:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	609a      	str	r2, [r3, #8]
 80071d0:	e043      	b.n	800725a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d119      	bne.n	800720c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6858      	ldr	r0, [r3, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e0:	461a      	mov	r2, r3
 80071e2:	68b9      	ldr	r1, [r7, #8]
 80071e4:	f002 ffbb 	bl	800a15e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f0:	441a      	add	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d32b      	bcc.n	800725a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	605a      	str	r2, [r3, #4]
 800720a:	e026      	b.n	800725a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	68d8      	ldr	r0, [r3, #12]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007214:	461a      	mov	r2, r3
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	f002 ffa1 	bl	800a15e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007224:	425b      	negs	r3, r3
 8007226:	441a      	add	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d207      	bcs.n	8007248 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007240:	425b      	negs	r3, r3
 8007242:	441a      	add	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d105      	bne.n	800725a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	3b01      	subs	r3, #1
 8007258:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8007262:	697b      	ldr	r3, [r7, #20]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d018      	beq.n	80072b0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007286:	441a      	add	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	429a      	cmp	r2, r3
 8007296:	d303      	bcc.n	80072a0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68d9      	ldr	r1, [r3, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a8:	461a      	mov	r2, r3
 80072aa:	6838      	ldr	r0, [r7, #0]
 80072ac:	f002 ff57 	bl	800a15e <memcpy>
    }
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80072c0:	f001 fd2c 	bl	8008d1c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072ca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80072cc:	e011      	b.n	80072f2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d012      	beq.n	80072fc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3324      	adds	r3, #36	@ 0x24
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fdea 	bl	8007eb4 <xTaskRemoveFromEventList>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80072e6:	f000 ff3b 	bl	8008160 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80072f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	dce9      	bgt.n	80072ce <prvUnlockQueue+0x16>
 80072fa:	e000      	b.n	80072fe <prvUnlockQueue+0x46>
                    break;
 80072fc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	22ff      	movs	r2, #255	@ 0xff
 8007302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8007306:	f001 fd3b 	bl	8008d80 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800730a:	f001 fd07 	bl	8008d1c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007314:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007316:	e011      	b.n	800733c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d012      	beq.n	8007346 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3310      	adds	r3, #16
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fdc5 	bl	8007eb4 <xTaskRemoveFromEventList>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8007330:	f000 ff16 	bl	8008160 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	3b01      	subs	r3, #1
 8007338:	b2db      	uxtb	r3, r3
 800733a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800733c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007340:	2b00      	cmp	r3, #0
 8007342:	dce9      	bgt.n	8007318 <prvUnlockQueue+0x60>
 8007344:	e000      	b.n	8007348 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8007346:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	22ff      	movs	r2, #255	@ 0xff
 800734c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8007350:	f001 fd16 	bl	8008d80 <vPortExitCritical>
}
 8007354:	bf00      	nop
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007364:	f001 fcda 	bl	8008d1c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736c:	2b00      	cmp	r3, #0
 800736e:	d102      	bne.n	8007376 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8007370:	2301      	movs	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e001      	b.n	800737a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800737a:	f001 fd01 	bl	8008d80 <vPortExitCritical>

    return xReturn;
 800737e:	68fb      	ldr	r3, [r7, #12]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007390:	f001 fcc4 	bl	8008d1c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800739c:	429a      	cmp	r2, r3
 800739e:	d102      	bne.n	80073a6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80073a0:	2301      	movs	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	e001      	b.n	80073aa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80073aa:	f001 fce9 	bl	8008d80 <vPortExitCritical>

    return xReturn;
 80073ae:	68fb      	ldr	r3, [r7, #12]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10b      	bne.n	80073e4 <vQueueAddToRegistry+0x2c>
        __asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	60fb      	str	r3, [r7, #12]
    }
 80073de:	bf00      	nop
 80073e0:	bf00      	nop
 80073e2:	e7fd      	b.n	80073e0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d024      	beq.n	8007434 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073ea:	2300      	movs	r3, #0
 80073ec:	617b      	str	r3, [r7, #20]
 80073ee:	e01e      	b.n	800742e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80073f0:	4a18      	ldr	r2, [pc, #96]	@ (8007454 <vQueueAddToRegistry+0x9c>)
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	4413      	add	r3, r2
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d105      	bne.n	800740c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	4a13      	ldr	r2, [pc, #76]	@ (8007454 <vQueueAddToRegistry+0x9c>)
 8007406:	4413      	add	r3, r2
 8007408:	613b      	str	r3, [r7, #16]
                    break;
 800740a:	e013      	b.n	8007434 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <vQueueAddToRegistry+0x70>
 8007412:	4a10      	ldr	r2, [pc, #64]	@ (8007454 <vQueueAddToRegistry+0x9c>)
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d104      	bne.n	8007428 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	4a0c      	ldr	r2, [pc, #48]	@ (8007454 <vQueueAddToRegistry+0x9c>)
 8007424:	4413      	add	r3, r2
 8007426:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	3301      	adds	r3, #1
 800742c:	617b      	str	r3, [r7, #20]
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b07      	cmp	r3, #7
 8007432:	d9dd      	bls.n	80073f0 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8007446:	bf00      	nop
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	200013e8 	.word	0x200013e8

08007458 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8007468:	f001 fc58 	bl	8008d1c <vPortEnterCritical>
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007472:	b25b      	sxtb	r3, r3
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d103      	bne.n	8007482 <vQueueWaitForMessageRestricted+0x2a>
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007488:	b25b      	sxtb	r3, r3
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748e:	d103      	bne.n	8007498 <vQueueWaitForMessageRestricted+0x40>
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007498:	f001 fc72 	bl	8008d80 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d106      	bne.n	80074b2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	3324      	adds	r3, #36	@ 0x24
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 fcbb 	bl	8007e28 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80074b2:	6978      	ldr	r0, [r7, #20]
 80074b4:	f7ff ff00 	bl	80072b8 <prvUnlockQueue>
    }
 80074b8:	bf00      	nop
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b08c      	sub	sp, #48	@ 0x30
 80074c4:	af04      	add	r7, sp, #16
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	603b      	str	r3, [r7, #0]
 80074cc:	4613      	mov	r3, r2
 80074ce:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074d0:	88fb      	ldrh	r3, [r7, #6]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4618      	mov	r0, r3
 80074d6:	f001 fd4b 	bl	8008f70 <pvPortMalloc>
 80074da:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d013      	beq.n	800750a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074e2:	2058      	movs	r0, #88	@ 0x58
 80074e4:	f001 fd44 	bl	8008f70 <pvPortMalloc>
 80074e8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d008      	beq.n	8007502 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80074f0:	2258      	movs	r2, #88	@ 0x58
 80074f2:	2100      	movs	r1, #0
 80074f4:	69f8      	ldr	r0, [r7, #28]
 80074f6:	f002 fda1 	bl	800a03c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8007500:	e005      	b.n	800750e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8007502:	6978      	ldr	r0, [r7, #20]
 8007504:	f001 fdf0 	bl	80090e8 <vPortFree>
 8007508:	e001      	b.n	800750e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800750a:	2300      	movs	r3, #0
 800750c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d013      	beq.n	800753c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007514:	88fa      	ldrh	r2, [r7, #6]
 8007516:	2300      	movs	r3, #0
 8007518:	9303      	str	r3, [sp, #12]
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	9302      	str	r3, [sp, #8]
 800751e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007520:	9301      	str	r3, [sp, #4]
 8007522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	68b9      	ldr	r1, [r7, #8]
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f000 f80e 	bl	800754c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007530:	69f8      	ldr	r0, [r7, #28]
 8007532:	f000 f89b 	bl	800766c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8007536:	2301      	movs	r3, #1
 8007538:	61bb      	str	r3, [r7, #24]
 800753a:	e002      	b.n	8007542 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800753c:	f04f 33ff 	mov.w	r3, #4294967295
 8007540:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007542:	69bb      	ldr	r3, [r7, #24]
    }
 8007544:	4618      	mov	r0, r3
 8007546:	3720      	adds	r7, #32
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b088      	sub	sp, #32
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800755a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	461a      	mov	r2, r3
 8007564:	21a5      	movs	r1, #165	@ 0xa5
 8007566:	f002 fd69 	bl	800a03c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800756a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007574:	3b01      	subs	r3, #1
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	f023 0307 	bic.w	r3, r3, #7
 8007582:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00b      	beq.n	80075a6 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	617b      	str	r3, [r7, #20]
    }
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	e7fd      	b.n	80075a2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01e      	beq.n	80075ea <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075ac:	2300      	movs	r3, #0
 80075ae:	61fb      	str	r3, [r7, #28]
 80075b0:	e012      	b.n	80075d8 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	4413      	add	r3, r2
 80075b8:	7819      	ldrb	r1, [r3, #0]
 80075ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	4413      	add	r3, r2
 80075c0:	3334      	adds	r3, #52	@ 0x34
 80075c2:	460a      	mov	r2, r1
 80075c4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	4413      	add	r3, r2
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d006      	beq.n	80075e0 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	3301      	adds	r3, #1
 80075d6:	61fb      	str	r3, [r7, #28]
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	2b09      	cmp	r3, #9
 80075dc:	d9e9      	bls.n	80075b2 <prvInitialiseNewTask+0x66>
 80075de:	e000      	b.n	80075e2 <prvInitialiseNewTask+0x96>
            {
                break;
 80075e0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ec:	2b04      	cmp	r3, #4
 80075ee:	d90b      	bls.n	8007608 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	613b      	str	r3, [r7, #16]
    }
 8007602:	bf00      	nop
 8007604:	bf00      	nop
 8007606:	e7fd      	b.n	8007604 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760a:	2b04      	cmp	r3, #4
 800760c:	d901      	bls.n	8007612 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800760e:	2304      	movs	r3, #4
 8007610:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007616:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8007618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800761c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800761e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007620:	3304      	adds	r3, #4
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff f9aa 	bl	800697c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762a:	3318      	adds	r3, #24
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff f9a5 	bl	800697c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007636:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763a:	f1c3 0205 	rsb	r2, r3, #5
 800763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007640:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007646:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	68f9      	ldr	r1, [r7, #12]
 800764c:	69b8      	ldr	r0, [r7, #24]
 800764e:	f001 fa31 	bl	8008ab4 <pxPortInitialiseStack>
 8007652:	4602      	mov	r2, r0
 8007654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007656:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800765e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007662:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007664:	bf00      	nop
 8007666:	3720      	adds	r7, #32
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007674:	f001 fb52 	bl	8008d1c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007678:	4b40      	ldr	r3, [pc, #256]	@ (800777c <prvAddNewTaskToReadyList+0x110>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3301      	adds	r3, #1
 800767e:	4a3f      	ldr	r2, [pc, #252]	@ (800777c <prvAddNewTaskToReadyList+0x110>)
 8007680:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007682:	4b3f      	ldr	r3, [pc, #252]	@ (8007780 <prvAddNewTaskToReadyList+0x114>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d109      	bne.n	800769e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800768a:	4a3d      	ldr	r2, [pc, #244]	@ (8007780 <prvAddNewTaskToReadyList+0x114>)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007690:	4b3a      	ldr	r3, [pc, #232]	@ (800777c <prvAddNewTaskToReadyList+0x110>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d110      	bne.n	80076ba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007698:	f000 fd86 	bl	80081a8 <prvInitialiseTaskLists>
 800769c:	e00d      	b.n	80076ba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800769e:	4b39      	ldr	r3, [pc, #228]	@ (8007784 <prvAddNewTaskToReadyList+0x118>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d109      	bne.n	80076ba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076a6:	4b36      	ldr	r3, [pc, #216]	@ (8007780 <prvAddNewTaskToReadyList+0x114>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d802      	bhi.n	80076ba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80076b4:	4a32      	ldr	r2, [pc, #200]	@ (8007780 <prvAddNewTaskToReadyList+0x114>)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80076ba:	4b33      	ldr	r3, [pc, #204]	@ (8007788 <prvAddNewTaskToReadyList+0x11c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3301      	adds	r3, #1
 80076c0:	4a31      	ldr	r2, [pc, #196]	@ (8007788 <prvAddNewTaskToReadyList+0x11c>)
 80076c2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076c4:	4b30      	ldr	r3, [pc, #192]	@ (8007788 <prvAddNewTaskToReadyList+0x11c>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d0:	2201      	movs	r2, #1
 80076d2:	409a      	lsls	r2, r3
 80076d4:	4b2d      	ldr	r3, [pc, #180]	@ (800778c <prvAddNewTaskToReadyList+0x120>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4313      	orrs	r3, r2
 80076da:	4a2c      	ldr	r2, [pc, #176]	@ (800778c <prvAddNewTaskToReadyList+0x120>)
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076e2:	492b      	ldr	r1, [pc, #172]	@ (8007790 <prvAddNewTaskToReadyList+0x124>)
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	3304      	adds	r3, #4
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	609a      	str	r2, [r3, #8]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	60da      	str	r2, [r3, #12]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	3204      	adds	r2, #4
 800770a:	605a      	str	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	1d1a      	adds	r2, r3, #4
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	609a      	str	r2, [r3, #8]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4a1b      	ldr	r2, [pc, #108]	@ (8007790 <prvAddNewTaskToReadyList+0x124>)
 8007722:	441a      	add	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	615a      	str	r2, [r3, #20]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800772c:	4918      	ldr	r1, [pc, #96]	@ (8007790 <prvAddNewTaskToReadyList+0x124>)
 800772e:	4613      	mov	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	440b      	add	r3, r1
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	1c59      	adds	r1, r3, #1
 800773c:	4814      	ldr	r0, [pc, #80]	@ (8007790 <prvAddNewTaskToReadyList+0x124>)
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4403      	add	r3, r0
 8007748:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800774a:	f001 fb19 	bl	8008d80 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800774e:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <prvAddNewTaskToReadyList+0x118>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00e      	beq.n	8007774 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007756:	4b0a      	ldr	r3, [pc, #40]	@ (8007780 <prvAddNewTaskToReadyList+0x114>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007760:	429a      	cmp	r2, r3
 8007762:	d207      	bcs.n	8007774 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007764:	4b0b      	ldr	r3, [pc, #44]	@ (8007794 <prvAddNewTaskToReadyList+0x128>)
 8007766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007774:	bf00      	nop
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20001500 	.word	0x20001500
 8007780:	20001428 	.word	0x20001428
 8007784:	2000150c 	.word	0x2000150c
 8007788:	2000151c 	.word	0x2000151c
 800778c:	20001508 	.word	0x20001508
 8007790:	2000142c 	.word	0x2000142c
 8007794:	e000ed04 	.word	0xe000ed04

08007798 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d018      	beq.n	80077dc <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80077aa:	4b14      	ldr	r3, [pc, #80]	@ (80077fc <vTaskDelay+0x64>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00b      	beq.n	80077ca <vTaskDelay+0x32>
        __asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	60bb      	str	r3, [r7, #8]
    }
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop
 80077c8:	e7fd      	b.n	80077c6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80077ca:	f000 f86d 	bl	80078a8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077ce:	2100      	movs	r1, #0
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fe47 	bl	8008464 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80077d6:	f000 f875 	bl	80078c4 <xTaskResumeAll>
 80077da:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d107      	bne.n	80077f2 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80077e2:	4b07      	ldr	r3, [pc, #28]	@ (8007800 <vTaskDelay+0x68>)
 80077e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80077f2:	bf00      	nop
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20001528 	.word	0x20001528
 8007800:	e000ed04 	.word	0xe000ed04

08007804 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800780a:	4b20      	ldr	r3, [pc, #128]	@ (800788c <vTaskStartScheduler+0x88>)
 800780c:	9301      	str	r3, [sp, #4]
 800780e:	2300      	movs	r3, #0
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	2300      	movs	r3, #0
 8007814:	2282      	movs	r2, #130	@ 0x82
 8007816:	491e      	ldr	r1, [pc, #120]	@ (8007890 <vTaskStartScheduler+0x8c>)
 8007818:	481e      	ldr	r0, [pc, #120]	@ (8007894 <vTaskStartScheduler+0x90>)
 800781a:	f7ff fe51 	bl	80074c0 <xTaskCreate>
 800781e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d102      	bne.n	800782c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8007826:	f000 fe9d 	bl	8008564 <xTimerCreateTimerTask>
 800782a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d116      	bne.n	8007860 <vTaskStartScheduler+0x5c>
        __asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60bb      	str	r3, [r7, #8]
    }
 8007844:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8007846:	4b14      	ldr	r3, [pc, #80]	@ (8007898 <vTaskStartScheduler+0x94>)
 8007848:	f04f 32ff 	mov.w	r2, #4294967295
 800784c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800784e:	4b13      	ldr	r3, [pc, #76]	@ (800789c <vTaskStartScheduler+0x98>)
 8007850:	2201      	movs	r2, #1
 8007852:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007854:	4b12      	ldr	r3, [pc, #72]	@ (80078a0 <vTaskStartScheduler+0x9c>)
 8007856:	2200      	movs	r2, #0
 8007858:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800785a:	f001 f9bb 	bl	8008bd4 <xPortStartScheduler>
 800785e:	e00f      	b.n	8007880 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007866:	d10b      	bne.n	8007880 <vTaskStartScheduler+0x7c>
        __asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	607b      	str	r3, [r7, #4]
    }
 800787a:	bf00      	nop
 800787c:	bf00      	nop
 800787e:	e7fd      	b.n	800787c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007880:	4b08      	ldr	r3, [pc, #32]	@ (80078a4 <vTaskStartScheduler+0xa0>)
 8007882:	681b      	ldr	r3, [r3, #0]
}
 8007884:	bf00      	nop
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20001524 	.word	0x20001524
 8007890:	0800c1e0 	.word	0x0800c1e0
 8007894:	08008179 	.word	0x08008179
 8007898:	20001520 	.word	0x20001520
 800789c:	2000150c 	.word	0x2000150c
 80078a0:	20001504 	.word	0x20001504
 80078a4:	2000000c 	.word	0x2000000c

080078a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80078ac:	4b04      	ldr	r3, [pc, #16]	@ (80078c0 <vTaskSuspendAll+0x18>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3301      	adds	r3, #1
 80078b2:	4a03      	ldr	r2, [pc, #12]	@ (80078c0 <vTaskSuspendAll+0x18>)
 80078b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80078b6:	bf00      	nop
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	20001528 	.word	0x20001528

080078c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b088      	sub	sp, #32
 80078c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80078ce:	2300      	movs	r3, #0
 80078d0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80078d2:	4b71      	ldr	r3, [pc, #452]	@ (8007a98 <xTaskResumeAll+0x1d4>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10b      	bne.n	80078f2 <xTaskResumeAll+0x2e>
        __asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	607b      	str	r3, [r7, #4]
    }
 80078ec:	bf00      	nop
 80078ee:	bf00      	nop
 80078f0:	e7fd      	b.n	80078ee <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80078f2:	f001 fa13 	bl	8008d1c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80078f6:	4b68      	ldr	r3, [pc, #416]	@ (8007a98 <xTaskResumeAll+0x1d4>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	4a66      	ldr	r2, [pc, #408]	@ (8007a98 <xTaskResumeAll+0x1d4>)
 80078fe:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007900:	4b65      	ldr	r3, [pc, #404]	@ (8007a98 <xTaskResumeAll+0x1d4>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	f040 80c0 	bne.w	8007a8a <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800790a:	4b64      	ldr	r3, [pc, #400]	@ (8007a9c <xTaskResumeAll+0x1d8>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 80bb 	beq.w	8007a8a <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007914:	e08a      	b.n	8007a2c <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007916:	4b62      	ldr	r3, [pc, #392]	@ (8007aa0 <xTaskResumeAll+0x1dc>)
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007922:	613b      	str	r3, [r7, #16]
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	69fa      	ldr	r2, [r7, #28]
 800792a:	6a12      	ldr	r2, [r2, #32]
 800792c:	609a      	str	r2, [r3, #8]
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	69d2      	ldr	r2, [r2, #28]
 8007936:	605a      	str	r2, [r3, #4]
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	3318      	adds	r3, #24
 8007940:	429a      	cmp	r2, r3
 8007942:	d103      	bne.n	800794c <xTaskResumeAll+0x88>
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	6a1a      	ldr	r2, [r3, #32]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	605a      	str	r2, [r3, #4]
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	2200      	movs	r2, #0
 8007950:	629a      	str	r2, [r3, #40]	@ 0x28
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	1e5a      	subs	r2, r3, #1
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	60fb      	str	r3, [r7, #12]
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	69fa      	ldr	r2, [r7, #28]
 8007968:	68d2      	ldr	r2, [r2, #12]
 800796a:	609a      	str	r2, [r3, #8]
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	6892      	ldr	r2, [r2, #8]
 8007974:	605a      	str	r2, [r3, #4]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	3304      	adds	r3, #4
 800797e:	429a      	cmp	r2, r3
 8007980:	d103      	bne.n	800798a <xTaskResumeAll+0xc6>
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	605a      	str	r2, [r3, #4]
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	2200      	movs	r2, #0
 800798e:	615a      	str	r2, [r3, #20]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	1e5a      	subs	r2, r3, #1
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799e:	2201      	movs	r2, #1
 80079a0:	409a      	lsls	r2, r3
 80079a2:	4b40      	ldr	r3, [pc, #256]	@ (8007aa4 <xTaskResumeAll+0x1e0>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	4a3e      	ldr	r2, [pc, #248]	@ (8007aa4 <xTaskResumeAll+0x1e0>)
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b0:	493d      	ldr	r1, [pc, #244]	@ (8007aa8 <xTaskResumeAll+0x1e4>)
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	440b      	add	r3, r1
 80079bc:	3304      	adds	r3, #4
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	60bb      	str	r3, [r7, #8]
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	609a      	str	r2, [r3, #8]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	60da      	str	r2, [r3, #12]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	69fa      	ldr	r2, [r7, #28]
 80079d6:	3204      	adds	r2, #4
 80079d8:	605a      	str	r2, [r3, #4]
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	1d1a      	adds	r2, r3, #4
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	609a      	str	r2, [r3, #8]
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4a2e      	ldr	r2, [pc, #184]	@ (8007aa8 <xTaskResumeAll+0x1e4>)
 80079f0:	441a      	add	r2, r3
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	615a      	str	r2, [r3, #20]
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079fa:	492b      	ldr	r1, [pc, #172]	@ (8007aa8 <xTaskResumeAll+0x1e4>)
 80079fc:	4613      	mov	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	440b      	add	r3, r1
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	1c59      	adds	r1, r3, #1
 8007a0a:	4827      	ldr	r0, [pc, #156]	@ (8007aa8 <xTaskResumeAll+0x1e4>)
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4403      	add	r3, r0
 8007a16:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a1c:	4b23      	ldr	r3, [pc, #140]	@ (8007aac <xTaskResumeAll+0x1e8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d302      	bcc.n	8007a2c <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8007a26:	4b22      	ldr	r3, [pc, #136]	@ (8007ab0 <xTaskResumeAll+0x1ec>)
 8007a28:	2201      	movs	r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8007aa0 <xTaskResumeAll+0x1dc>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f47f af70 	bne.w	8007916 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007a3c:	f000 fc32 	bl	80082a4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a40:	4b1c      	ldr	r3, [pc, #112]	@ (8007ab4 <xTaskResumeAll+0x1f0>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d010      	beq.n	8007a6e <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007a4c:	f000 f852 	bl	8007af4 <xTaskIncrementTick>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8007a56:	4b16      	ldr	r3, [pc, #88]	@ (8007ab0 <xTaskResumeAll+0x1ec>)
 8007a58:	2201      	movs	r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1f1      	bne.n	8007a4c <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8007a68:	4b12      	ldr	r3, [pc, #72]	@ (8007ab4 <xTaskResumeAll+0x1f0>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007a6e:	4b10      	ldr	r3, [pc, #64]	@ (8007ab0 <xTaskResumeAll+0x1ec>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8007a76:	2301      	movs	r3, #1
 8007a78:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ab8 <xTaskResumeAll+0x1f4>)
 8007a7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007a8a:	f001 f979 	bl	8008d80 <vPortExitCritical>

    return xAlreadyYielded;
 8007a8e:	69bb      	ldr	r3, [r7, #24]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3720      	adds	r7, #32
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	20001528 	.word	0x20001528
 8007a9c:	20001500 	.word	0x20001500
 8007aa0:	200014c0 	.word	0x200014c0
 8007aa4:	20001508 	.word	0x20001508
 8007aa8:	2000142c 	.word	0x2000142c
 8007aac:	20001428 	.word	0x20001428
 8007ab0:	20001514 	.word	0x20001514
 8007ab4:	20001510 	.word	0x20001510
 8007ab8:	e000ed04 	.word	0xe000ed04

08007abc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8007ac2:	4b05      	ldr	r3, [pc, #20]	@ (8007ad8 <xTaskGetTickCount+0x1c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007ac8:	687b      	ldr	r3, [r7, #4]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	20001504 	.word	0x20001504

08007adc <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8007ae0:	4b03      	ldr	r3, [pc, #12]	@ (8007af0 <uxTaskGetNumberOfTasks+0x14>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	20001500 	.word	0x20001500

08007af4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08a      	sub	sp, #40	@ 0x28
 8007af8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007afa:	2300      	movs	r3, #0
 8007afc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007afe:	4b7e      	ldr	r3, [pc, #504]	@ (8007cf8 <xTaskIncrementTick+0x204>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f040 80ed 	bne.w	8007ce2 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b08:	4b7c      	ldr	r3, [pc, #496]	@ (8007cfc <xTaskIncrementTick+0x208>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007b10:	4a7a      	ldr	r2, [pc, #488]	@ (8007cfc <xTaskIncrementTick+0x208>)
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d121      	bne.n	8007b60 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8007b1c:	4b78      	ldr	r3, [pc, #480]	@ (8007d00 <xTaskIncrementTick+0x20c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00b      	beq.n	8007b3e <xTaskIncrementTick+0x4a>
        __asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	607b      	str	r3, [r7, #4]
    }
 8007b38:	bf00      	nop
 8007b3a:	bf00      	nop
 8007b3c:	e7fd      	b.n	8007b3a <xTaskIncrementTick+0x46>
 8007b3e:	4b70      	ldr	r3, [pc, #448]	@ (8007d00 <xTaskIncrementTick+0x20c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	4b6f      	ldr	r3, [pc, #444]	@ (8007d04 <xTaskIncrementTick+0x210>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a6d      	ldr	r2, [pc, #436]	@ (8007d00 <xTaskIncrementTick+0x20c>)
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	4a6d      	ldr	r2, [pc, #436]	@ (8007d04 <xTaskIncrementTick+0x210>)
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	4b6d      	ldr	r3, [pc, #436]	@ (8007d08 <xTaskIncrementTick+0x214>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3301      	adds	r3, #1
 8007b58:	4a6b      	ldr	r2, [pc, #428]	@ (8007d08 <xTaskIncrementTick+0x214>)
 8007b5a:	6013      	str	r3, [r2, #0]
 8007b5c:	f000 fba2 	bl	80082a4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007b60:	4b6a      	ldr	r3, [pc, #424]	@ (8007d0c <xTaskIncrementTick+0x218>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6a3a      	ldr	r2, [r7, #32]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	f0c0 80a6 	bcc.w	8007cb8 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b6c:	4b64      	ldr	r3, [pc, #400]	@ (8007d00 <xTaskIncrementTick+0x20c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d104      	bne.n	8007b80 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b76:	4b65      	ldr	r3, [pc, #404]	@ (8007d0c <xTaskIncrementTick+0x218>)
 8007b78:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7c:	601a      	str	r2, [r3, #0]
                    break;
 8007b7e:	e09b      	b.n	8007cb8 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b80:	4b5f      	ldr	r3, [pc, #380]	@ (8007d00 <xTaskIncrementTick+0x20c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8007b90:	6a3a      	ldr	r2, [r7, #32]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d203      	bcs.n	8007ba0 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007b98:	4a5c      	ldr	r2, [pc, #368]	@ (8007d0c <xTaskIncrementTick+0x218>)
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007b9e:	e08b      	b.n	8007cb8 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	613b      	str	r3, [r7, #16]
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	68d2      	ldr	r2, [r2, #12]
 8007bae:	609a      	str	r2, [r3, #8]
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	6892      	ldr	r2, [r2, #8]
 8007bb8:	605a      	str	r2, [r3, #4]
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d103      	bne.n	8007bce <xTaskIncrementTick+0xda>
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	605a      	str	r2, [r3, #4]
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	615a      	str	r2, [r3, #20]
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	1e5a      	subs	r2, r3, #1
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d01e      	beq.n	8007c24 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	69db      	ldr	r3, [r3, #28]
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	6a12      	ldr	r2, [r2, #32]
 8007bf4:	609a      	str	r2, [r3, #8]
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	69d2      	ldr	r2, [r2, #28]
 8007bfe:	605a      	str	r2, [r3, #4]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	3318      	adds	r3, #24
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d103      	bne.n	8007c14 <xTaskIncrementTick+0x120>
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	6a1a      	ldr	r2, [r3, #32]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	605a      	str	r2, [r3, #4]
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	2200      	movs	r2, #0
 8007c18:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	1e5a      	subs	r2, r3, #1
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c28:	2201      	movs	r2, #1
 8007c2a:	409a      	lsls	r2, r3
 8007c2c:	4b38      	ldr	r3, [pc, #224]	@ (8007d10 <xTaskIncrementTick+0x21c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	4a37      	ldr	r2, [pc, #220]	@ (8007d10 <xTaskIncrementTick+0x21c>)
 8007c34:	6013      	str	r3, [r2, #0]
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c3a:	4936      	ldr	r1, [pc, #216]	@ (8007d14 <xTaskIncrementTick+0x220>)
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	440b      	add	r3, r1
 8007c46:	3304      	adds	r3, #4
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60bb      	str	r3, [r7, #8]
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	609a      	str	r2, [r3, #8]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	60da      	str	r2, [r3, #12]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	3204      	adds	r2, #4
 8007c62:	605a      	str	r2, [r3, #4]
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	1d1a      	adds	r2, r3, #4
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	609a      	str	r2, [r3, #8]
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c70:	4613      	mov	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4a26      	ldr	r2, [pc, #152]	@ (8007d14 <xTaskIncrementTick+0x220>)
 8007c7a:	441a      	add	r2, r3
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	615a      	str	r2, [r3, #20]
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c84:	4923      	ldr	r1, [pc, #140]	@ (8007d14 <xTaskIncrementTick+0x220>)
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	440b      	add	r3, r1
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	1c59      	adds	r1, r3, #1
 8007c94:	481f      	ldr	r0, [pc, #124]	@ (8007d14 <xTaskIncrementTick+0x220>)
 8007c96:	4613      	mov	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4403      	add	r3, r0
 8007ca0:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8007d18 <xTaskIncrementTick+0x224>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cac:	429a      	cmp	r2, r3
 8007cae:	f67f af5d 	bls.w	8007b6c <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cb6:	e759      	b.n	8007b6c <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007cb8:	4b17      	ldr	r3, [pc, #92]	@ (8007d18 <xTaskIncrementTick+0x224>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cbe:	4915      	ldr	r1, [pc, #84]	@ (8007d14 <xTaskIncrementTick+0x220>)
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	440b      	add	r3, r1
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d901      	bls.n	8007cd4 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8007cd4:	4b11      	ldr	r3, [pc, #68]	@ (8007d1c <xTaskIncrementTick+0x228>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d007      	beq.n	8007cec <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ce0:	e004      	b.n	8007cec <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8007d20 <xTaskIncrementTick+0x22c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8007d20 <xTaskIncrementTick+0x22c>)
 8007cea:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8007cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3728      	adds	r7, #40	@ 0x28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20001528 	.word	0x20001528
 8007cfc:	20001504 	.word	0x20001504
 8007d00:	200014b8 	.word	0x200014b8
 8007d04:	200014bc 	.word	0x200014bc
 8007d08:	20001518 	.word	0x20001518
 8007d0c:	20001520 	.word	0x20001520
 8007d10:	20001508 	.word	0x20001508
 8007d14:	2000142c 	.word	0x2000142c
 8007d18:	20001428 	.word	0x20001428
 8007d1c:	20001514 	.word	0x20001514
 8007d20:	20001510 	.word	0x20001510

08007d24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d2a:	4b27      	ldr	r3, [pc, #156]	@ (8007dc8 <vTaskSwitchContext+0xa4>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007d32:	4b26      	ldr	r3, [pc, #152]	@ (8007dcc <vTaskSwitchContext+0xa8>)
 8007d34:	2201      	movs	r2, #1
 8007d36:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007d38:	e040      	b.n	8007dbc <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8007d3a:	4b24      	ldr	r3, [pc, #144]	@ (8007dcc <vTaskSwitchContext+0xa8>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d40:	4b23      	ldr	r3, [pc, #140]	@ (8007dd0 <vTaskSwitchContext+0xac>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	fab3 f383 	clz	r3, r3
 8007d4c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
 8007d50:	f1c3 031f 	rsb	r3, r3, #31
 8007d54:	617b      	str	r3, [r7, #20]
 8007d56:	491f      	ldr	r1, [pc, #124]	@ (8007dd4 <vTaskSwitchContext+0xb0>)
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	440b      	add	r3, r1
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10b      	bne.n	8007d82 <vTaskSwitchContext+0x5e>
        __asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	607b      	str	r3, [r7, #4]
    }
 8007d7c:	bf00      	nop
 8007d7e:	bf00      	nop
 8007d80:	e7fd      	b.n	8007d7e <vTaskSwitchContext+0x5a>
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4a11      	ldr	r2, [pc, #68]	@ (8007dd4 <vTaskSwitchContext+0xb0>)
 8007d8e:	4413      	add	r3, r2
 8007d90:	613b      	str	r3, [r7, #16]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	605a      	str	r2, [r3, #4]
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	3308      	adds	r3, #8
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d104      	bne.n	8007db2 <vTaskSwitchContext+0x8e>
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	605a      	str	r2, [r3, #4]
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	4a07      	ldr	r2, [pc, #28]	@ (8007dd8 <vTaskSwitchContext+0xb4>)
 8007dba:	6013      	str	r3, [r2, #0]
}
 8007dbc:	bf00      	nop
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	20001528 	.word	0x20001528
 8007dcc:	20001514 	.word	0x20001514
 8007dd0:	20001508 	.word	0x20001508
 8007dd4:	2000142c 	.word	0x2000142c
 8007dd8:	20001428 	.word	0x20001428

08007ddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10b      	bne.n	8007e04 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	60fb      	str	r3, [r7, #12]
    }
 8007dfe:	bf00      	nop
 8007e00:	bf00      	nop
 8007e02:	e7fd      	b.n	8007e00 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e04:	4b07      	ldr	r3, [pc, #28]	@ (8007e24 <vTaskPlaceOnEventList+0x48>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3318      	adds	r3, #24
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7fe fdc2 	bl	8006996 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e12:	2101      	movs	r1, #1
 8007e14:	6838      	ldr	r0, [r7, #0]
 8007e16:	f000 fb25 	bl	8008464 <prvAddCurrentTaskToDelayedList>
}
 8007e1a:	bf00      	nop
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20001428 	.word	0x20001428

08007e28 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10b      	bne.n	8007e52 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	613b      	str	r3, [r7, #16]
    }
 8007e4c:	bf00      	nop
 8007e4e:	bf00      	nop
 8007e50:	e7fd      	b.n	8007e4e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	617b      	str	r3, [r7, #20]
 8007e58:	4b15      	ldr	r3, [pc, #84]	@ (8007eb0 <vTaskPlaceOnEventListRestricted+0x88>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	61da      	str	r2, [r3, #28]
 8007e60:	4b13      	ldr	r3, [pc, #76]	@ (8007eb0 <vTaskPlaceOnEventListRestricted+0x88>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	6892      	ldr	r2, [r2, #8]
 8007e68:	621a      	str	r2, [r3, #32]
 8007e6a:	4b11      	ldr	r3, [pc, #68]	@ (8007eb0 <vTaskPlaceOnEventListRestricted+0x88>)
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	3218      	adds	r2, #24
 8007e74:	605a      	str	r2, [r3, #4]
 8007e76:	4b0e      	ldr	r3, [pc, #56]	@ (8007eb0 <vTaskPlaceOnEventListRestricted+0x88>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f103 0218 	add.w	r2, r3, #24
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	609a      	str	r2, [r3, #8]
 8007e82:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb0 <vTaskPlaceOnEventListRestricted+0x88>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8007e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	68b8      	ldr	r0, [r7, #8]
 8007ea4:	f000 fade 	bl	8008464 <prvAddCurrentTaskToDelayedList>
    }
 8007ea8:	bf00      	nop
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20001428 	.word	0x20001428

08007eb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b08b      	sub	sp, #44	@ 0x2c
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	60fb      	str	r3, [r7, #12]
    }
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	e7fd      	b.n	8007ede <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee6:	61fb      	str	r3, [r7, #28]
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	6a3a      	ldr	r2, [r7, #32]
 8007eee:	6a12      	ldr	r2, [r2, #32]
 8007ef0:	609a      	str	r2, [r3, #8]
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	6a3a      	ldr	r2, [r7, #32]
 8007ef8:	69d2      	ldr	r2, [r2, #28]
 8007efa:	605a      	str	r2, [r3, #4]
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	3318      	adds	r3, #24
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d103      	bne.n	8007f10 <xTaskRemoveFromEventList+0x5c>
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	6a1a      	ldr	r2, [r3, #32]
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	605a      	str	r2, [r3, #4]
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	2200      	movs	r2, #0
 8007f14:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	1e5a      	subs	r2, r3, #1
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f20:	4b4a      	ldr	r3, [pc, #296]	@ (800804c <xTaskRemoveFromEventList+0x198>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d15e      	bne.n	8007fe6 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	617b      	str	r3, [r7, #20]
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	6a3a      	ldr	r2, [r7, #32]
 8007f34:	68d2      	ldr	r2, [r2, #12]
 8007f36:	609a      	str	r2, [r3, #8]
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	6a3a      	ldr	r2, [r7, #32]
 8007f3e:	6892      	ldr	r2, [r2, #8]
 8007f40:	605a      	str	r2, [r3, #4]
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d103      	bne.n	8007f56 <xTaskRemoveFromEventList+0xa2>
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	605a      	str	r2, [r3, #4]
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	615a      	str	r2, [r3, #20]
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	1e5a      	subs	r2, r3, #1
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	409a      	lsls	r2, r3
 8007f6e:	4b38      	ldr	r3, [pc, #224]	@ (8008050 <xTaskRemoveFromEventList+0x19c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	4a36      	ldr	r2, [pc, #216]	@ (8008050 <xTaskRemoveFromEventList+0x19c>)
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f7c:	4935      	ldr	r1, [pc, #212]	@ (8008054 <xTaskRemoveFromEventList+0x1a0>)
 8007f7e:	4613      	mov	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	440b      	add	r3, r1
 8007f88:	3304      	adds	r3, #4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	613b      	str	r3, [r7, #16]
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	609a      	str	r2, [r3, #8]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	689a      	ldr	r2, [r3, #8]
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	60da      	str	r2, [r3, #12]
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	6a3a      	ldr	r2, [r7, #32]
 8007fa2:	3204      	adds	r2, #4
 8007fa4:	605a      	str	r2, [r3, #4]
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	1d1a      	adds	r2, r3, #4
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	609a      	str	r2, [r3, #8]
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4a26      	ldr	r2, [pc, #152]	@ (8008054 <xTaskRemoveFromEventList+0x1a0>)
 8007fbc:	441a      	add	r2, r3
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	615a      	str	r2, [r3, #20]
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc6:	4923      	ldr	r1, [pc, #140]	@ (8008054 <xTaskRemoveFromEventList+0x1a0>)
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	1c59      	adds	r1, r3, #1
 8007fd6:	481f      	ldr	r0, [pc, #124]	@ (8008054 <xTaskRemoveFromEventList+0x1a0>)
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4403      	add	r3, r0
 8007fe2:	6019      	str	r1, [r3, #0]
 8007fe4:	e01b      	b.n	800801e <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8008058 <xTaskRemoveFromEventList+0x1a4>)
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	61bb      	str	r3, [r7, #24]
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	61da      	str	r2, [r3, #28]
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	689a      	ldr	r2, [r3, #8]
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	621a      	str	r2, [r3, #32]
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	6a3a      	ldr	r2, [r7, #32]
 8008000:	3218      	adds	r2, #24
 8008002:	605a      	str	r2, [r3, #4]
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	f103 0218 	add.w	r2, r3, #24
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	609a      	str	r2, [r3, #8]
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	4a11      	ldr	r2, [pc, #68]	@ (8008058 <xTaskRemoveFromEventList+0x1a4>)
 8008012:	629a      	str	r2, [r3, #40]	@ 0x28
 8008014:	4b10      	ldr	r3, [pc, #64]	@ (8008058 <xTaskRemoveFromEventList+0x1a4>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3301      	adds	r3, #1
 800801a:	4a0f      	ldr	r2, [pc, #60]	@ (8008058 <xTaskRemoveFromEventList+0x1a4>)
 800801c:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008022:	4b0e      	ldr	r3, [pc, #56]	@ (800805c <xTaskRemoveFromEventList+0x1a8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008028:	429a      	cmp	r2, r3
 800802a:	d905      	bls.n	8008038 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800802c:	2301      	movs	r3, #1
 800802e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8008030:	4b0b      	ldr	r3, [pc, #44]	@ (8008060 <xTaskRemoveFromEventList+0x1ac>)
 8008032:	2201      	movs	r2, #1
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	e001      	b.n	800803c <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8008038:	2300      	movs	r3, #0
 800803a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 800803c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800803e:	4618      	mov	r0, r3
 8008040:	372c      	adds	r7, #44	@ 0x2c
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	20001528 	.word	0x20001528
 8008050:	20001508 	.word	0x20001508
 8008054:	2000142c 	.word	0x2000142c
 8008058:	200014c0 	.word	0x200014c0
 800805c:	20001428 	.word	0x20001428
 8008060:	20001514 	.word	0x20001514

08008064 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800806c:	4b06      	ldr	r3, [pc, #24]	@ (8008088 <vTaskInternalSetTimeOutState+0x24>)
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008074:	4b05      	ldr	r3, [pc, #20]	@ (800808c <vTaskInternalSetTimeOutState+0x28>)
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	605a      	str	r2, [r3, #4]
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	20001518 	.word	0x20001518
 800808c:	20001504 	.word	0x20001504

08008090 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10b      	bne.n	80080b8 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	613b      	str	r3, [r7, #16]
    }
 80080b2:	bf00      	nop
 80080b4:	bf00      	nop
 80080b6:	e7fd      	b.n	80080b4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10b      	bne.n	80080d6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	60fb      	str	r3, [r7, #12]
    }
 80080d0:	bf00      	nop
 80080d2:	bf00      	nop
 80080d4:	e7fd      	b.n	80080d2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80080d6:	f000 fe21 	bl	8008d1c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80080da:	4b1f      	ldr	r3, [pc, #124]	@ (8008158 <xTaskCheckForTimeOut+0xc8>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f2:	d102      	bne.n	80080fa <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80080f4:	2300      	movs	r3, #0
 80080f6:	61fb      	str	r3, [r7, #28]
 80080f8:	e026      	b.n	8008148 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	4b17      	ldr	r3, [pc, #92]	@ (800815c <xTaskCheckForTimeOut+0xcc>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	429a      	cmp	r2, r3
 8008104:	d00a      	beq.n	800811c <xTaskCheckForTimeOut+0x8c>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	69ba      	ldr	r2, [r7, #24]
 800810c:	429a      	cmp	r2, r3
 800810e:	d305      	bcc.n	800811c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008110:	2301      	movs	r3, #1
 8008112:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	e015      	b.n	8008148 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	429a      	cmp	r2, r3
 8008124:	d20b      	bcs.n	800813e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	1ad2      	subs	r2, r2, r3
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff ff96 	bl	8008064 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008138:	2300      	movs	r3, #0
 800813a:	61fb      	str	r3, [r7, #28]
 800813c:	e004      	b.n	8008148 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008144:	2301      	movs	r3, #1
 8008146:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8008148:	f000 fe1a 	bl	8008d80 <vPortExitCritical>

    return xReturn;
 800814c:	69fb      	ldr	r3, [r7, #28]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3720      	adds	r7, #32
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	20001504 	.word	0x20001504
 800815c:	20001518 	.word	0x20001518

08008160 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008160:	b480      	push	{r7}
 8008162:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8008164:	4b03      	ldr	r3, [pc, #12]	@ (8008174 <vTaskMissedYield+0x14>)
 8008166:	2201      	movs	r2, #1
 8008168:	601a      	str	r2, [r3, #0]
}
 800816a:	bf00      	nop
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	20001514 	.word	0x20001514

08008178 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8008180:	f000 f852 	bl	8008228 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008184:	4b06      	ldr	r3, [pc, #24]	@ (80081a0 <prvIdleTask+0x28>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d9f9      	bls.n	8008180 <prvIdleTask+0x8>
            {
                taskYIELD();
 800818c:	4b05      	ldr	r3, [pc, #20]	@ (80081a4 <prvIdleTask+0x2c>)
 800818e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800819c:	e7f0      	b.n	8008180 <prvIdleTask+0x8>
 800819e:	bf00      	nop
 80081a0:	2000142c 	.word	0x2000142c
 80081a4:	e000ed04 	.word	0xe000ed04

080081a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081ae:	2300      	movs	r3, #0
 80081b0:	607b      	str	r3, [r7, #4]
 80081b2:	e00c      	b.n	80081ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4a12      	ldr	r2, [pc, #72]	@ (8008208 <prvInitialiseTaskLists+0x60>)
 80081c0:	4413      	add	r3, r2
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe fbba 	bl	800693c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3301      	adds	r3, #1
 80081cc:	607b      	str	r3, [r7, #4]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b04      	cmp	r3, #4
 80081d2:	d9ef      	bls.n	80081b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80081d4:	480d      	ldr	r0, [pc, #52]	@ (800820c <prvInitialiseTaskLists+0x64>)
 80081d6:	f7fe fbb1 	bl	800693c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80081da:	480d      	ldr	r0, [pc, #52]	@ (8008210 <prvInitialiseTaskLists+0x68>)
 80081dc:	f7fe fbae 	bl	800693c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80081e0:	480c      	ldr	r0, [pc, #48]	@ (8008214 <prvInitialiseTaskLists+0x6c>)
 80081e2:	f7fe fbab 	bl	800693c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80081e6:	480c      	ldr	r0, [pc, #48]	@ (8008218 <prvInitialiseTaskLists+0x70>)
 80081e8:	f7fe fba8 	bl	800693c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80081ec:	480b      	ldr	r0, [pc, #44]	@ (800821c <prvInitialiseTaskLists+0x74>)
 80081ee:	f7fe fba5 	bl	800693c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80081f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008220 <prvInitialiseTaskLists+0x78>)
 80081f4:	4a05      	ldr	r2, [pc, #20]	@ (800820c <prvInitialiseTaskLists+0x64>)
 80081f6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008224 <prvInitialiseTaskLists+0x7c>)
 80081fa:	4a05      	ldr	r2, [pc, #20]	@ (8008210 <prvInitialiseTaskLists+0x68>)
 80081fc:	601a      	str	r2, [r3, #0]
}
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	2000142c 	.word	0x2000142c
 800820c:	20001490 	.word	0x20001490
 8008210:	200014a4 	.word	0x200014a4
 8008214:	200014c0 	.word	0x200014c0
 8008218:	200014d4 	.word	0x200014d4
 800821c:	200014ec 	.word	0x200014ec
 8008220:	200014b8 	.word	0x200014b8
 8008224:	200014bc 	.word	0x200014bc

08008228 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800822e:	e019      	b.n	8008264 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8008230:	f000 fd74 	bl	8008d1c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008234:	4b10      	ldr	r3, [pc, #64]	@ (8008278 <prvCheckTasksWaitingTermination+0x50>)
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	3304      	adds	r3, #4
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe fbe1 	bl	8006a08 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8008246:	4b0d      	ldr	r3, [pc, #52]	@ (800827c <prvCheckTasksWaitingTermination+0x54>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3b01      	subs	r3, #1
 800824c:	4a0b      	ldr	r2, [pc, #44]	@ (800827c <prvCheckTasksWaitingTermination+0x54>)
 800824e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8008250:	4b0b      	ldr	r3, [pc, #44]	@ (8008280 <prvCheckTasksWaitingTermination+0x58>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3b01      	subs	r3, #1
 8008256:	4a0a      	ldr	r2, [pc, #40]	@ (8008280 <prvCheckTasksWaitingTermination+0x58>)
 8008258:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800825a:	f000 fd91 	bl	8008d80 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f810 	bl	8008284 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008264:	4b06      	ldr	r3, [pc, #24]	@ (8008280 <prvCheckTasksWaitingTermination+0x58>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1e1      	bne.n	8008230 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800826c:	bf00      	nop
 800826e:	bf00      	nop
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	200014d4 	.word	0x200014d4
 800827c:	20001500 	.word	0x20001500
 8008280:	200014e8 	.word	0x200014e8

08008284 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008290:	4618      	mov	r0, r3
 8008292:	f000 ff29 	bl	80090e8 <vPortFree>
            vPortFree( pxTCB );
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 ff26 	bl	80090e8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082a8:	4b0a      	ldr	r3, [pc, #40]	@ (80082d4 <prvResetNextTaskUnblockTime+0x30>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d104      	bne.n	80082bc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80082b2:	4b09      	ldr	r3, [pc, #36]	@ (80082d8 <prvResetNextTaskUnblockTime+0x34>)
 80082b4:	f04f 32ff 	mov.w	r2, #4294967295
 80082b8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80082ba:	e005      	b.n	80082c8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80082bc:	4b05      	ldr	r3, [pc, #20]	@ (80082d4 <prvResetNextTaskUnblockTime+0x30>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a04      	ldr	r2, [pc, #16]	@ (80082d8 <prvResetNextTaskUnblockTime+0x34>)
 80082c6:	6013      	str	r3, [r2, #0]
}
 80082c8:	bf00      	nop
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	200014b8 	.word	0x200014b8
 80082d8:	20001520 	.word	0x20001520

080082dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80082e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008310 <xTaskGetSchedulerState+0x34>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d102      	bne.n	80082f0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80082ea:	2301      	movs	r3, #1
 80082ec:	607b      	str	r3, [r7, #4]
 80082ee:	e008      	b.n	8008302 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082f0:	4b08      	ldr	r3, [pc, #32]	@ (8008314 <xTaskGetSchedulerState+0x38>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d102      	bne.n	80082fe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80082f8:	2302      	movs	r3, #2
 80082fa:	607b      	str	r3, [r7, #4]
 80082fc:	e001      	b.n	8008302 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80082fe:	2300      	movs	r3, #0
 8008300:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8008302:	687b      	ldr	r3, [r7, #4]
    }
 8008304:	4618      	mov	r0, r3
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	2000150c 	.word	0x2000150c
 8008314:	20001528 	.word	0x20001528

08008318 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8008324:	2300      	movs	r3, #0
 8008326:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 808e 	beq.w	800844c <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8008330:	4b49      	ldr	r3, [pc, #292]	@ (8008458 <xTaskPriorityDisinherit+0x140>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	429a      	cmp	r2, r3
 8008338:	d00b      	beq.n	8008352 <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	613b      	str	r3, [r7, #16]
    }
 800834c:	bf00      	nop
 800834e:	bf00      	nop
 8008350:	e7fd      	b.n	800834e <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10b      	bne.n	8008372 <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	60fb      	str	r3, [r7, #12]
    }
 800836c:	bf00      	nop
 800836e:	bf00      	nop
 8008370:	e7fd      	b.n	800836e <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008376:	1e5a      	subs	r2, r3, #1
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008384:	429a      	cmp	r2, r3
 8008386:	d061      	beq.n	800844c <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800838c:	2b00      	cmp	r3, #0
 800838e:	d15d      	bne.n	800844c <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	3304      	adds	r3, #4
 8008394:	4618      	mov	r0, r3
 8008396:	f7fe fb37 	bl	8006a08 <uxListRemove>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10a      	bne.n	80083b6 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a4:	2201      	movs	r2, #1
 80083a6:	fa02 f303 	lsl.w	r3, r2, r3
 80083aa:	43da      	mvns	r2, r3
 80083ac:	4b2b      	ldr	r3, [pc, #172]	@ (800845c <xTaskPriorityDisinherit+0x144>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4013      	ands	r3, r2
 80083b2:	4a2a      	ldr	r2, [pc, #168]	@ (800845c <xTaskPriorityDisinherit+0x144>)
 80083b4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c2:	f1c3 0205 	rsb	r2, r3, #5
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ce:	2201      	movs	r2, #1
 80083d0:	409a      	lsls	r2, r3
 80083d2:	4b22      	ldr	r3, [pc, #136]	@ (800845c <xTaskPriorityDisinherit+0x144>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	4a20      	ldr	r2, [pc, #128]	@ (800845c <xTaskPriorityDisinherit+0x144>)
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e0:	491f      	ldr	r1, [pc, #124]	@ (8008460 <xTaskPriorityDisinherit+0x148>)
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	440b      	add	r3, r1
 80083ec:	3304      	adds	r3, #4
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	617b      	str	r3, [r7, #20]
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	609a      	str	r2, [r3, #8]
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	60da      	str	r2, [r3, #12]
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	3204      	adds	r2, #4
 8008408:	605a      	str	r2, [r3, #4]
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	1d1a      	adds	r2, r3, #4
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	609a      	str	r2, [r3, #8]
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008416:	4613      	mov	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4a10      	ldr	r2, [pc, #64]	@ (8008460 <xTaskPriorityDisinherit+0x148>)
 8008420:	441a      	add	r2, r3
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	615a      	str	r2, [r3, #20]
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800842a:	490d      	ldr	r1, [pc, #52]	@ (8008460 <xTaskPriorityDisinherit+0x148>)
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	1c59      	adds	r1, r3, #1
 800843a:	4809      	ldr	r0, [pc, #36]	@ (8008460 <xTaskPriorityDisinherit+0x148>)
 800843c:	4613      	mov	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4403      	add	r3, r0
 8008446:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8008448:	2301      	movs	r3, #1
 800844a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800844c:	69fb      	ldr	r3, [r7, #28]
    }
 800844e:	4618      	mov	r0, r3
 8008450:	3720      	adds	r7, #32
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20001428 	.word	0x20001428
 800845c:	20001508 	.word	0x20001508
 8008460:	2000142c 	.word	0x2000142c

08008464 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800846e:	4b36      	ldr	r3, [pc, #216]	@ (8008548 <prvAddCurrentTaskToDelayedList+0xe4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008474:	4b35      	ldr	r3, [pc, #212]	@ (800854c <prvAddCurrentTaskToDelayedList+0xe8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3304      	adds	r3, #4
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe fac4 	bl	8006a08 <uxListRemove>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10b      	bne.n	800849e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008486:	4b31      	ldr	r3, [pc, #196]	@ (800854c <prvAddCurrentTaskToDelayedList+0xe8>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848c:	2201      	movs	r2, #1
 800848e:	fa02 f303 	lsl.w	r3, r2, r3
 8008492:	43da      	mvns	r2, r3
 8008494:	4b2e      	ldr	r3, [pc, #184]	@ (8008550 <prvAddCurrentTaskToDelayedList+0xec>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4013      	ands	r3, r2
 800849a:	4a2d      	ldr	r2, [pc, #180]	@ (8008550 <prvAddCurrentTaskToDelayedList+0xec>)
 800849c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a4:	d124      	bne.n	80084f0 <prvAddCurrentTaskToDelayedList+0x8c>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d021      	beq.n	80084f0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084ac:	4b29      	ldr	r3, [pc, #164]	@ (8008554 <prvAddCurrentTaskToDelayedList+0xf0>)
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	613b      	str	r3, [r7, #16]
 80084b2:	4b26      	ldr	r3, [pc, #152]	@ (800854c <prvAddCurrentTaskToDelayedList+0xe8>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	609a      	str	r2, [r3, #8]
 80084ba:	4b24      	ldr	r3, [pc, #144]	@ (800854c <prvAddCurrentTaskToDelayedList+0xe8>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	6892      	ldr	r2, [r2, #8]
 80084c2:	60da      	str	r2, [r3, #12]
 80084c4:	4b21      	ldr	r3, [pc, #132]	@ (800854c <prvAddCurrentTaskToDelayedList+0xe8>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	3204      	adds	r2, #4
 80084ce:	605a      	str	r2, [r3, #4]
 80084d0:	4b1e      	ldr	r3, [pc, #120]	@ (800854c <prvAddCurrentTaskToDelayedList+0xe8>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	1d1a      	adds	r2, r3, #4
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	609a      	str	r2, [r3, #8]
 80084da:	4b1c      	ldr	r3, [pc, #112]	@ (800854c <prvAddCurrentTaskToDelayedList+0xe8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a1d      	ldr	r2, [pc, #116]	@ (8008554 <prvAddCurrentTaskToDelayedList+0xf0>)
 80084e0:	615a      	str	r2, [r3, #20]
 80084e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008554 <prvAddCurrentTaskToDelayedList+0xf0>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3301      	adds	r3, #1
 80084e8:	4a1a      	ldr	r2, [pc, #104]	@ (8008554 <prvAddCurrentTaskToDelayedList+0xf0>)
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80084ee:	e026      	b.n	800853e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4413      	add	r3, r2
 80084f6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084f8:	4b14      	ldr	r3, [pc, #80]	@ (800854c <prvAddCurrentTaskToDelayedList+0xe8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	429a      	cmp	r2, r3
 8008506:	d209      	bcs.n	800851c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008508:	4b13      	ldr	r3, [pc, #76]	@ (8008558 <prvAddCurrentTaskToDelayedList+0xf4>)
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	4b0f      	ldr	r3, [pc, #60]	@ (800854c <prvAddCurrentTaskToDelayedList+0xe8>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3304      	adds	r3, #4
 8008512:	4619      	mov	r1, r3
 8008514:	4610      	mov	r0, r2
 8008516:	f7fe fa3e 	bl	8006996 <vListInsert>
}
 800851a:	e010      	b.n	800853e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800851c:	4b0f      	ldr	r3, [pc, #60]	@ (800855c <prvAddCurrentTaskToDelayedList+0xf8>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	4b0a      	ldr	r3, [pc, #40]	@ (800854c <prvAddCurrentTaskToDelayedList+0xe8>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3304      	adds	r3, #4
 8008526:	4619      	mov	r1, r3
 8008528:	4610      	mov	r0, r2
 800852a:	f7fe fa34 	bl	8006996 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800852e:	4b0c      	ldr	r3, [pc, #48]	@ (8008560 <prvAddCurrentTaskToDelayedList+0xfc>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	429a      	cmp	r2, r3
 8008536:	d202      	bcs.n	800853e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8008538:	4a09      	ldr	r2, [pc, #36]	@ (8008560 <prvAddCurrentTaskToDelayedList+0xfc>)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6013      	str	r3, [r2, #0]
}
 800853e:	bf00      	nop
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20001504 	.word	0x20001504
 800854c:	20001428 	.word	0x20001428
 8008550:	20001508 	.word	0x20001508
 8008554:	200014ec 	.word	0x200014ec
 8008558:	200014bc 	.word	0x200014bc
 800855c:	200014b8 	.word	0x200014b8
 8008560:	20001520 	.word	0x20001520

08008564 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800856a:	2300      	movs	r3, #0
 800856c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800856e:	f000 fa6b 	bl	8008a48 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8008572:	4b12      	ldr	r3, [pc, #72]	@ (80085bc <xTimerCreateTimerTask+0x58>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00b      	beq.n	8008592 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800857a:	4b11      	ldr	r3, [pc, #68]	@ (80085c0 <xTimerCreateTimerTask+0x5c>)
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	2302      	movs	r3, #2
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	2300      	movs	r3, #0
 8008584:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008588:	490e      	ldr	r1, [pc, #56]	@ (80085c4 <xTimerCreateTimerTask+0x60>)
 800858a:	480f      	ldr	r0, [pc, #60]	@ (80085c8 <xTimerCreateTimerTask+0x64>)
 800858c:	f7fe ff98 	bl	80074c0 <xTaskCreate>
 8008590:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10b      	bne.n	80085b0 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	603b      	str	r3, [r7, #0]
    }
 80085aa:	bf00      	nop
 80085ac:	bf00      	nop
 80085ae:	e7fd      	b.n	80085ac <xTimerCreateTimerTask+0x48>
        return xReturn;
 80085b0:	687b      	ldr	r3, [r7, #4]
    }
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	2000155c 	.word	0x2000155c
 80085c0:	20001560 	.word	0x20001560
 80085c4:	0800c1e8 	.word	0x0800c1e8
 80085c8:	08008671 	.word	0x08008671

080085cc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80085d8:	e008      	b.n	80085ec <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	4413      	add	r3, r2
 80085e2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	699a      	ldr	r2, [r3, #24]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	18d1      	adds	r1, r2, r3
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 f8df 	bl	80087bc <prvInsertTimerInActiveList>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1ea      	bne.n	80085da <prvReloadTimer+0xe>
        }
    }
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800861a:	4b14      	ldr	r3, [pc, #80]	@ (800866c <prvProcessExpiredTimer+0x5c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3304      	adds	r3, #4
 8008628:	4618      	mov	r0, r3
 800862a:	f7fe f9ed 	bl	8006a08 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	6879      	ldr	r1, [r7, #4]
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f7ff ffc3 	bl	80085cc <prvReloadTimer>
 8008646:	e008      	b.n	800865a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800864e:	f023 0301 	bic.w	r3, r3, #1
 8008652:	b2da      	uxtb	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	4798      	blx	r3
    }
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20001554 	.word	0x20001554

08008670 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008678:	f107 0308 	add.w	r3, r7, #8
 800867c:	4618      	mov	r0, r3
 800867e:	f000 f859 	bl	8008734 <prvGetNextExpireTime>
 8008682:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	4619      	mov	r1, r3
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 f805 	bl	8008698 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800868e:	f000 f8d7 	bl	8008840 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008692:	bf00      	nop
 8008694:	e7f0      	b.n	8008678 <prvTimerTask+0x8>
	...

08008698 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80086a2:	f7ff f901 	bl	80078a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086a6:	f107 0308 	add.w	r3, r7, #8
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 f866 	bl	800877c <prvSampleTimeNow>
 80086b0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d130      	bne.n	800871a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10a      	bne.n	80086d4 <prvProcessTimerOrBlockTask+0x3c>
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d806      	bhi.n	80086d4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80086c6:	f7ff f8fd 	bl	80078c4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff ff9f 	bl	8008610 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80086d2:	e024      	b.n	800871e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d008      	beq.n	80086ec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086da:	4b13      	ldr	r3, [pc, #76]	@ (8008728 <prvProcessTimerOrBlockTask+0x90>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <prvProcessTimerOrBlockTask+0x50>
 80086e4:	2301      	movs	r3, #1
 80086e6:	e000      	b.n	80086ea <prvProcessTimerOrBlockTask+0x52>
 80086e8:	2300      	movs	r3, #0
 80086ea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086ec:	4b0f      	ldr	r3, [pc, #60]	@ (800872c <prvProcessTimerOrBlockTask+0x94>)
 80086ee:	6818      	ldr	r0, [r3, #0]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	4619      	mov	r1, r3
 80086fa:	f7fe fead 	bl	8007458 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80086fe:	f7ff f8e1 	bl	80078c4 <xTaskResumeAll>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10a      	bne.n	800871e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8008708:	4b09      	ldr	r3, [pc, #36]	@ (8008730 <prvProcessTimerOrBlockTask+0x98>)
 800870a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	f3bf 8f6f 	isb	sy
    }
 8008718:	e001      	b.n	800871e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800871a:	f7ff f8d3 	bl	80078c4 <xTaskResumeAll>
    }
 800871e:	bf00      	nop
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20001558 	.word	0x20001558
 800872c:	2000155c 	.word	0x2000155c
 8008730:	e000ed04 	.word	0xe000ed04

08008734 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800873c:	4b0e      	ldr	r3, [pc, #56]	@ (8008778 <prvGetNextExpireTime+0x44>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <prvGetNextExpireTime+0x16>
 8008746:	2201      	movs	r2, #1
 8008748:	e000      	b.n	800874c <prvGetNextExpireTime+0x18>
 800874a:	2200      	movs	r2, #0
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d105      	bne.n	8008764 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008758:	4b07      	ldr	r3, [pc, #28]	@ (8008778 <prvGetNextExpireTime+0x44>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	e001      	b.n	8008768 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008768:	68fb      	ldr	r3, [r7, #12]
    }
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	20001554 	.word	0x20001554

0800877c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008784:	f7ff f99a 	bl	8007abc <xTaskGetTickCount>
 8008788:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800878a:	4b0b      	ldr	r3, [pc, #44]	@ (80087b8 <prvSampleTimeNow+0x3c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	429a      	cmp	r2, r3
 8008792:	d205      	bcs.n	80087a0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008794:	f000 f932 	bl	80089fc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	e002      	b.n	80087a6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80087a6:	4a04      	ldr	r2, [pc, #16]	@ (80087b8 <prvSampleTimeNow+0x3c>)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80087ac:	68fb      	ldr	r3, [r7, #12]
    }
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	20001564 	.word	0x20001564

080087bc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80087ca:	2300      	movs	r3, #0
 80087cc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d812      	bhi.n	8008808 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	1ad2      	subs	r2, r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d302      	bcc.n	80087f6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80087f0:	2301      	movs	r3, #1
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	e01b      	b.n	800882e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087f6:	4b10      	ldr	r3, [pc, #64]	@ (8008838 <prvInsertTimerInActiveList+0x7c>)
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3304      	adds	r3, #4
 80087fe:	4619      	mov	r1, r3
 8008800:	4610      	mov	r0, r2
 8008802:	f7fe f8c8 	bl	8006996 <vListInsert>
 8008806:	e012      	b.n	800882e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	429a      	cmp	r2, r3
 800880e:	d206      	bcs.n	800881e <prvInsertTimerInActiveList+0x62>
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	429a      	cmp	r2, r3
 8008816:	d302      	bcc.n	800881e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008818:	2301      	movs	r3, #1
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	e007      	b.n	800882e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800881e:	4b07      	ldr	r3, [pc, #28]	@ (800883c <prvInsertTimerInActiveList+0x80>)
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3304      	adds	r3, #4
 8008826:	4619      	mov	r1, r3
 8008828:	4610      	mov	r0, r2
 800882a:	f7fe f8b4 	bl	8006996 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800882e:	697b      	ldr	r3, [r7, #20]
    }
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	20001558 	.word	0x20001558
 800883c:	20001554 	.word	0x20001554

08008840 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008840:	b580      	push	{r7, lr}
 8008842:	b08a      	sub	sp, #40	@ 0x28
 8008844:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008846:	e0c7      	b.n	80089d8 <prvProcessReceivedCommands+0x198>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	da19      	bge.n	8008882 <prvProcessReceivedCommands+0x42>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800884e:	1d3b      	adds	r3, r7, #4
 8008850:	3304      	adds	r3, #4
 8008852:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8008854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10b      	bne.n	8008872 <prvProcessReceivedCommands+0x32>
        __asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	61bb      	str	r3, [r7, #24]
    }
 800886c:	bf00      	nop
 800886e:	bf00      	nop
 8008870:	e7fd      	b.n	800886e <prvProcessReceivedCommands+0x2e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008878:	6850      	ldr	r0, [r2, #4]
 800887a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800887c:	6892      	ldr	r2, [r2, #8]
 800887e:	4611      	mov	r1, r2
 8008880:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	f2c0 80a7 	blt.w	80089d8 <prvProcessReceivedCommands+0x198>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d004      	beq.n	80088a0 <prvProcessReceivedCommands+0x60>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	3304      	adds	r3, #4
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe f8b4 	bl	8006a08 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088a0:	463b      	mov	r3, r7
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff ff6a 	bl	800877c <prvSampleTimeNow>
 80088a8:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	2b08      	cmp	r3, #8
 80088b0:	f200 808f 	bhi.w	80089d2 <prvProcessReceivedCommands+0x192>
 80088b4:	a201      	add	r2, pc, #4	@ (adr r2, 80088bc <prvProcessReceivedCommands+0x7c>)
 80088b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ba:	bf00      	nop
 80088bc:	080088e1 	.word	0x080088e1
 80088c0:	080088e1 	.word	0x080088e1
 80088c4:	08008949 	.word	0x08008949
 80088c8:	0800895d 	.word	0x0800895d
 80088cc:	080089a9 	.word	0x080089a9
 80088d0:	080088e1 	.word	0x080088e1
 80088d4:	080088e1 	.word	0x080088e1
 80088d8:	08008949 	.word	0x08008949
 80088dc:	0800895d 	.word	0x0800895d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088e6:	f043 0301 	orr.w	r3, r3, #1
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	18d1      	adds	r1, r2, r3
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	69fa      	ldr	r2, [r7, #28]
 80088fe:	6a38      	ldr	r0, [r7, #32]
 8008900:	f7ff ff5c 	bl	80087bc <prvInsertTimerInActiveList>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d065      	beq.n	80089d6 <prvProcessReceivedCommands+0x196>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008910:	f003 0304 	and.w	r3, r3, #4
 8008914:	2b00      	cmp	r3, #0
 8008916:	d009      	beq.n	800892c <prvProcessReceivedCommands+0xec>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	4413      	add	r3, r2
 8008920:	69fa      	ldr	r2, [r7, #28]
 8008922:	4619      	mov	r1, r3
 8008924:	6a38      	ldr	r0, [r7, #32]
 8008926:	f7ff fe51 	bl	80085cc <prvReloadTimer>
 800892a:	e008      	b.n	800893e <prvProcessReceivedCommands+0xfe>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008932:	f023 0301 	bic.w	r3, r3, #1
 8008936:	b2da      	uxtb	r2, r3
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	6a38      	ldr	r0, [r7, #32]
 8008944:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8008946:	e046      	b.n	80089d6 <prvProcessReceivedCommands+0x196>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800894e:	f023 0301 	bic.w	r3, r3, #1
 8008952:	b2da      	uxtb	r2, r3
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800895a:	e03d      	b.n	80089d8 <prvProcessReceivedCommands+0x198>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008962:	f043 0301 	orr.w	r3, r3, #1
 8008966:	b2da      	uxtb	r2, r3
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	6a3b      	ldr	r3, [r7, #32]
 8008972:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10b      	bne.n	8008994 <prvProcessReceivedCommands+0x154>
        __asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	617b      	str	r3, [r7, #20]
    }
 800898e:	bf00      	nop
 8008990:	bf00      	nop
 8008992:	e7fd      	b.n	8008990 <prvProcessReceivedCommands+0x150>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	699a      	ldr	r2, [r3, #24]
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	18d1      	adds	r1, r2, r3
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	6a38      	ldr	r0, [r7, #32]
 80089a2:	f7ff ff0b 	bl	80087bc <prvInsertTimerInActiveList>
                        break;
 80089a6:	e017      	b.n	80089d8 <prvProcessReceivedCommands+0x198>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d103      	bne.n	80089be <prvProcessReceivedCommands+0x17e>
                            {
                                vPortFree( pxTimer );
 80089b6:	6a38      	ldr	r0, [r7, #32]
 80089b8:	f000 fb96 	bl	80090e8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80089bc:	e00c      	b.n	80089d8 <prvProcessReceivedCommands+0x198>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089c4:	f023 0301 	bic.w	r3, r3, #1
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80089d0:	e002      	b.n	80089d8 <prvProcessReceivedCommands+0x198>

                    default:
                        /* Don't expect to get here. */
                        break;
 80089d2:	bf00      	nop
 80089d4:	e000      	b.n	80089d8 <prvProcessReceivedCommands+0x198>
                        break;
 80089d6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089d8:	4b07      	ldr	r3, [pc, #28]	@ (80089f8 <prvProcessReceivedCommands+0x1b8>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	1d39      	adds	r1, r7, #4
 80089de:	2200      	movs	r2, #0
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fe faf7 	bl	8006fd4 <xQueueReceive>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f47f af2d 	bne.w	8008848 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80089ee:	bf00      	nop
 80089f0:	bf00      	nop
 80089f2:	3728      	adds	r7, #40	@ 0x28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	2000155c 	.word	0x2000155c

080089fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a02:	e009      	b.n	8008a18 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a04:	4b0e      	ldr	r3, [pc, #56]	@ (8008a40 <prvSwitchTimerLists+0x44>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8008a0e:	f04f 31ff 	mov.w	r1, #4294967295
 8008a12:	6838      	ldr	r0, [r7, #0]
 8008a14:	f7ff fdfc 	bl	8008610 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a18:	4b09      	ldr	r3, [pc, #36]	@ (8008a40 <prvSwitchTimerLists+0x44>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1f0      	bne.n	8008a04 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008a22:	4b07      	ldr	r3, [pc, #28]	@ (8008a40 <prvSwitchTimerLists+0x44>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8008a28:	4b06      	ldr	r3, [pc, #24]	@ (8008a44 <prvSwitchTimerLists+0x48>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a04      	ldr	r2, [pc, #16]	@ (8008a40 <prvSwitchTimerLists+0x44>)
 8008a2e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008a30:	4a04      	ldr	r2, [pc, #16]	@ (8008a44 <prvSwitchTimerLists+0x48>)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6013      	str	r3, [r2, #0]
    }
 8008a36:	bf00      	nop
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20001554 	.word	0x20001554
 8008a44:	20001558 	.word	0x20001558

08008a48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008a4c:	f000 f966 	bl	8008d1c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008a50:	4b12      	ldr	r3, [pc, #72]	@ (8008a9c <prvCheckForValidListAndQueue+0x54>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d11d      	bne.n	8008a94 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008a58:	4811      	ldr	r0, [pc, #68]	@ (8008aa0 <prvCheckForValidListAndQueue+0x58>)
 8008a5a:	f7fd ff6f 	bl	800693c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008a5e:	4811      	ldr	r0, [pc, #68]	@ (8008aa4 <prvCheckForValidListAndQueue+0x5c>)
 8008a60:	f7fd ff6c 	bl	800693c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008a64:	4b10      	ldr	r3, [pc, #64]	@ (8008aa8 <prvCheckForValidListAndQueue+0x60>)
 8008a66:	4a0e      	ldr	r2, [pc, #56]	@ (8008aa0 <prvCheckForValidListAndQueue+0x58>)
 8008a68:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008a6a:	4b10      	ldr	r3, [pc, #64]	@ (8008aac <prvCheckForValidListAndQueue+0x64>)
 8008a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8008aa4 <prvCheckForValidListAndQueue+0x5c>)
 8008a6e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008a70:	2200      	movs	r2, #0
 8008a72:	2110      	movs	r1, #16
 8008a74:	200a      	movs	r0, #10
 8008a76:	f7fe f883 	bl	8006b80 <xQueueGenericCreate>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	4a07      	ldr	r2, [pc, #28]	@ (8008a9c <prvCheckForValidListAndQueue+0x54>)
 8008a7e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8008a80:	4b06      	ldr	r3, [pc, #24]	@ (8008a9c <prvCheckForValidListAndQueue+0x54>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a88:	4b04      	ldr	r3, [pc, #16]	@ (8008a9c <prvCheckForValidListAndQueue+0x54>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4908      	ldr	r1, [pc, #32]	@ (8008ab0 <prvCheckForValidListAndQueue+0x68>)
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fe fc92 	bl	80073b8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008a94:	f000 f974 	bl	8008d80 <vPortExitCritical>
    }
 8008a98:	bf00      	nop
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	2000155c 	.word	0x2000155c
 8008aa0:	2000152c 	.word	0x2000152c
 8008aa4:	20001540 	.word	0x20001540
 8008aa8:	20001554 	.word	0x20001554
 8008aac:	20001558 	.word	0x20001558
 8008ab0:	0800c1f0 	.word	0x0800c1f0

08008ab4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	3b04      	subs	r3, #4
 8008ac4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008acc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3b04      	subs	r3, #4
 8008ad2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	f023 0201 	bic.w	r2, r3, #1
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3b04      	subs	r3, #4
 8008ae2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8008b18 <pxPortInitialiseStack+0x64>)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3b14      	subs	r3, #20
 8008aee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3b04      	subs	r3, #4
 8008afa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f06f 0202 	mvn.w	r2, #2
 8008b02:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3b20      	subs	r3, #32
 8008b08:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	08008b1d 	.word	0x08008b1d

08008b1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008b26:	4b13      	ldr	r3, [pc, #76]	@ (8008b74 <prvTaskExitError+0x58>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2e:	d00b      	beq.n	8008b48 <prvTaskExitError+0x2c>
        __asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	60fb      	str	r3, [r7, #12]
    }
 8008b42:	bf00      	nop
 8008b44:	bf00      	nop
 8008b46:	e7fd      	b.n	8008b44 <prvTaskExitError+0x28>
        __asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	60bb      	str	r3, [r7, #8]
    }
 8008b5a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008b5c:	bf00      	nop
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d0fc      	beq.n	8008b5e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	20000010 	.word	0x20000010
	...

08008b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008b80:	4b07      	ldr	r3, [pc, #28]	@ (8008ba0 <pxCurrentTCBConst2>)
 8008b82:	6819      	ldr	r1, [r3, #0]
 8008b84:	6808      	ldr	r0, [r1, #0]
 8008b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8a:	f380 8809 	msr	PSP, r0
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f04f 0000 	mov.w	r0, #0
 8008b96:	f380 8811 	msr	BASEPRI, r0
 8008b9a:	4770      	bx	lr
 8008b9c:	f3af 8000 	nop.w

08008ba0 <pxCurrentTCBConst2>:
 8008ba0:	20001428 	.word	0x20001428
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop

08008ba8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008ba8:	4808      	ldr	r0, [pc, #32]	@ (8008bcc <prvPortStartFirstTask+0x24>)
 8008baa:	6800      	ldr	r0, [r0, #0]
 8008bac:	6800      	ldr	r0, [r0, #0]
 8008bae:	f380 8808 	msr	MSP, r0
 8008bb2:	f04f 0000 	mov.w	r0, #0
 8008bb6:	f380 8814 	msr	CONTROL, r0
 8008bba:	b662      	cpsie	i
 8008bbc:	b661      	cpsie	f
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	df00      	svc	0
 8008bc8:	bf00      	nop
 8008bca:	0000      	.short	0x0000
 8008bcc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008bd0:	bf00      	nop
 8008bd2:	bf00      	nop

08008bd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008bda:	4b47      	ldr	r3, [pc, #284]	@ (8008cf8 <xPortStartScheduler+0x124>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a47      	ldr	r2, [pc, #284]	@ (8008cfc <xPortStartScheduler+0x128>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d10b      	bne.n	8008bfc <xPortStartScheduler+0x28>
        __asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	613b      	str	r3, [r7, #16]
    }
 8008bf6:	bf00      	nop
 8008bf8:	bf00      	nop
 8008bfa:	e7fd      	b.n	8008bf8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008bfc:	4b3e      	ldr	r3, [pc, #248]	@ (8008cf8 <xPortStartScheduler+0x124>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a3f      	ldr	r2, [pc, #252]	@ (8008d00 <xPortStartScheduler+0x12c>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d10b      	bne.n	8008c1e <xPortStartScheduler+0x4a>
        __asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0a:	f383 8811 	msr	BASEPRI, r3
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	f3bf 8f4f 	dsb	sy
 8008c16:	60fb      	str	r3, [r7, #12]
    }
 8008c18:	bf00      	nop
 8008c1a:	bf00      	nop
 8008c1c:	e7fd      	b.n	8008c1a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c1e:	4b39      	ldr	r3, [pc, #228]	@ (8008d04 <xPortStartScheduler+0x130>)
 8008c20:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	22ff      	movs	r2, #255	@ 0xff
 8008c2e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c38:	78fb      	ldrb	r3, [r7, #3]
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	4b31      	ldr	r3, [pc, #196]	@ (8008d08 <xPortStartScheduler+0x134>)
 8008c44:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c46:	4b31      	ldr	r3, [pc, #196]	@ (8008d0c <xPortStartScheduler+0x138>)
 8008c48:	2207      	movs	r2, #7
 8008c4a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c4c:	e009      	b.n	8008c62 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8008c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8008d0c <xPortStartScheduler+0x138>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	4a2d      	ldr	r2, [pc, #180]	@ (8008d0c <xPortStartScheduler+0x138>)
 8008c56:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c58:	78fb      	ldrb	r3, [r7, #3]
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c62:	78fb      	ldrb	r3, [r7, #3]
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c6a:	2b80      	cmp	r3, #128	@ 0x80
 8008c6c:	d0ef      	beq.n	8008c4e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c6e:	4b27      	ldr	r3, [pc, #156]	@ (8008d0c <xPortStartScheduler+0x138>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f1c3 0307 	rsb	r3, r3, #7
 8008c76:	2b04      	cmp	r3, #4
 8008c78:	d00b      	beq.n	8008c92 <xPortStartScheduler+0xbe>
        __asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	60bb      	str	r3, [r7, #8]
    }
 8008c8c:	bf00      	nop
 8008c8e:	bf00      	nop
 8008c90:	e7fd      	b.n	8008c8e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c92:	4b1e      	ldr	r3, [pc, #120]	@ (8008d0c <xPortStartScheduler+0x138>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	021b      	lsls	r3, r3, #8
 8008c98:	4a1c      	ldr	r2, [pc, #112]	@ (8008d0c <xPortStartScheduler+0x138>)
 8008c9a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8008d0c <xPortStartScheduler+0x138>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ca4:	4a19      	ldr	r2, [pc, #100]	@ (8008d0c <xPortStartScheduler+0x138>)
 8008ca6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008cb0:	4b17      	ldr	r3, [pc, #92]	@ (8008d10 <xPortStartScheduler+0x13c>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a16      	ldr	r2, [pc, #88]	@ (8008d10 <xPortStartScheduler+0x13c>)
 8008cb6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008cba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008cbc:	4b14      	ldr	r3, [pc, #80]	@ (8008d10 <xPortStartScheduler+0x13c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a13      	ldr	r2, [pc, #76]	@ (8008d10 <xPortStartScheduler+0x13c>)
 8008cc2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008cc6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008cc8:	f000 f8e0 	bl	8008e8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008ccc:	4b11      	ldr	r3, [pc, #68]	@ (8008d14 <xPortStartScheduler+0x140>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008cd2:	f000 f8ff 	bl	8008ed4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cd6:	4b10      	ldr	r3, [pc, #64]	@ (8008d18 <xPortStartScheduler+0x144>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a0f      	ldr	r2, [pc, #60]	@ (8008d18 <xPortStartScheduler+0x144>)
 8008cdc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008ce0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008ce2:	f7ff ff61 	bl	8008ba8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008ce6:	f7ff f81d 	bl	8007d24 <vTaskSwitchContext>
    prvTaskExitError();
 8008cea:	f7ff ff17 	bl	8008b1c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3718      	adds	r7, #24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	e000ed00 	.word	0xe000ed00
 8008cfc:	410fc271 	.word	0x410fc271
 8008d00:	410fc270 	.word	0x410fc270
 8008d04:	e000e400 	.word	0xe000e400
 8008d08:	20001568 	.word	0x20001568
 8008d0c:	2000156c 	.word	0x2000156c
 8008d10:	e000ed20 	.word	0xe000ed20
 8008d14:	20000010 	.word	0x20000010
 8008d18:	e000ef34 	.word	0xe000ef34

08008d1c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
        __asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	607b      	str	r3, [r7, #4]
    }
 8008d34:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008d36:	4b10      	ldr	r3, [pc, #64]	@ (8008d78 <vPortEnterCritical+0x5c>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8008d78 <vPortEnterCritical+0x5c>)
 8008d3e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008d40:	4b0d      	ldr	r3, [pc, #52]	@ (8008d78 <vPortEnterCritical+0x5c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d110      	bne.n	8008d6a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d48:	4b0c      	ldr	r3, [pc, #48]	@ (8008d7c <vPortEnterCritical+0x60>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00b      	beq.n	8008d6a <vPortEnterCritical+0x4e>
        __asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	603b      	str	r3, [r7, #0]
    }
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop
 8008d68:	e7fd      	b.n	8008d66 <vPortEnterCritical+0x4a>
    }
}
 8008d6a:	bf00      	nop
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	20000010 	.word	0x20000010
 8008d7c:	e000ed04 	.word	0xe000ed04

08008d80 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008d86:	4b12      	ldr	r3, [pc, #72]	@ (8008dd0 <vPortExitCritical+0x50>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10b      	bne.n	8008da6 <vPortExitCritical+0x26>
        __asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	607b      	str	r3, [r7, #4]
    }
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	e7fd      	b.n	8008da2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8008da6:	4b0a      	ldr	r3, [pc, #40]	@ (8008dd0 <vPortExitCritical+0x50>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	4a08      	ldr	r2, [pc, #32]	@ (8008dd0 <vPortExitCritical+0x50>)
 8008dae:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008db0:	4b07      	ldr	r3, [pc, #28]	@ (8008dd0 <vPortExitCritical+0x50>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d105      	bne.n	8008dc4 <vPortExitCritical+0x44>
 8008db8:	2300      	movs	r3, #0
 8008dba:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	f383 8811 	msr	BASEPRI, r3
    }
 8008dc2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	20000010 	.word	0x20000010
	...

08008de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008de0:	f3ef 8009 	mrs	r0, PSP
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	4b15      	ldr	r3, [pc, #84]	@ (8008e40 <pxCurrentTCBConst>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	f01e 0f10 	tst.w	lr, #16
 8008df0:	bf08      	it	eq
 8008df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfa:	6010      	str	r0, [r2, #0]
 8008dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008e04:	f380 8811 	msr	BASEPRI, r0
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f7fe ff88 	bl	8007d24 <vTaskSwitchContext>
 8008e14:	f04f 0000 	mov.w	r0, #0
 8008e18:	f380 8811 	msr	BASEPRI, r0
 8008e1c:	bc09      	pop	{r0, r3}
 8008e1e:	6819      	ldr	r1, [r3, #0]
 8008e20:	6808      	ldr	r0, [r1, #0]
 8008e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e26:	f01e 0f10 	tst.w	lr, #16
 8008e2a:	bf08      	it	eq
 8008e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e30:	f380 8809 	msr	PSP, r0
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	f3af 8000 	nop.w

08008e40 <pxCurrentTCBConst>:
 8008e40:	20001428 	.word	0x20001428
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop

08008e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
        __asm volatile
 8008e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	607b      	str	r3, [r7, #4]
    }
 8008e60:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008e62:	f7fe fe47 	bl	8007af4 <xTaskIncrementTick>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d003      	beq.n	8008e74 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e6c:	4b06      	ldr	r3, [pc, #24]	@ (8008e88 <SysTick_Handler+0x40>)
 8008e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	2300      	movs	r3, #0
 8008e76:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	f383 8811 	msr	BASEPRI, r3
    }
 8008e7e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	e000ed04 	.word	0xe000ed04

08008e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e90:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec0 <vPortSetupTimerInterrupt+0x34>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e96:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec4 <vPortSetupTimerInterrupt+0x38>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec8 <vPortSetupTimerInterrupt+0x3c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8008ecc <vPortSetupTimerInterrupt+0x40>)
 8008ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea6:	099b      	lsrs	r3, r3, #6
 8008ea8:	4a09      	ldr	r2, [pc, #36]	@ (8008ed0 <vPortSetupTimerInterrupt+0x44>)
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008eae:	4b04      	ldr	r3, [pc, #16]	@ (8008ec0 <vPortSetupTimerInterrupt+0x34>)
 8008eb0:	2207      	movs	r2, #7
 8008eb2:	601a      	str	r2, [r3, #0]
}
 8008eb4:	bf00      	nop
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	e000e010 	.word	0xe000e010
 8008ec4:	e000e018 	.word	0xe000e018
 8008ec8:	20000000 	.word	0x20000000
 8008ecc:	10624dd3 	.word	0x10624dd3
 8008ed0:	e000e014 	.word	0xe000e014

08008ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008ee4 <vPortEnableVFP+0x10>
 8008ed8:	6801      	ldr	r1, [r0, #0]
 8008eda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008ede:	6001      	str	r1, [r0, #0]
 8008ee0:	4770      	bx	lr
 8008ee2:	0000      	.short	0x0000
 8008ee4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008ee8:	bf00      	nop
 8008eea:	bf00      	nop

08008eec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008ef2:	f3ef 8305 	mrs	r3, IPSR
 8008ef6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b0f      	cmp	r3, #15
 8008efc:	d915      	bls.n	8008f2a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008efe:	4a18      	ldr	r2, [pc, #96]	@ (8008f60 <vPortValidateInterruptPriority+0x74>)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	4413      	add	r3, r2
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f08:	4b16      	ldr	r3, [pc, #88]	@ (8008f64 <vPortValidateInterruptPriority+0x78>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	7afa      	ldrb	r2, [r7, #11]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d20b      	bcs.n	8008f2a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	607b      	str	r3, [r7, #4]
    }
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop
 8008f28:	e7fd      	b.n	8008f26 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8008f68 <vPortValidateInterruptPriority+0x7c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008f32:	4b0e      	ldr	r3, [pc, #56]	@ (8008f6c <vPortValidateInterruptPriority+0x80>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d90b      	bls.n	8008f52 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	603b      	str	r3, [r7, #0]
    }
 8008f4c:	bf00      	nop
 8008f4e:	bf00      	nop
 8008f50:	e7fd      	b.n	8008f4e <vPortValidateInterruptPriority+0x62>
    }
 8008f52:	bf00      	nop
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	e000e3f0 	.word	0xe000e3f0
 8008f64:	20001568 	.word	0x20001568
 8008f68:	e000ed0c 	.word	0xe000ed0c
 8008f6c:	2000156c 	.word	0x2000156c

08008f70 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b08a      	sub	sp, #40	@ 0x28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8008f7c:	f7fe fc94 	bl	80078a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008f80:	4b54      	ldr	r3, [pc, #336]	@ (80090d4 <pvPortMalloc+0x164>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008f88:	f000 f90c 	bl	80091a4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d012      	beq.n	8008fb8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8008f92:	2208      	movs	r2, #8
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f003 0307 	and.w	r3, r3, #7
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	3308      	adds	r3, #8
 8008f9e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	43db      	mvns	r3, r3
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d804      	bhi.n	8008fb4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	4413      	add	r3, r2
 8008fb0:	607b      	str	r3, [r7, #4]
 8008fb2:	e001      	b.n	8008fb8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	db71      	blt.n	80090a2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d06e      	beq.n	80090a2 <pvPortMalloc+0x132>
 8008fc4:	4b44      	ldr	r3, [pc, #272]	@ (80090d8 <pvPortMalloc+0x168>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d869      	bhi.n	80090a2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008fce:	4b43      	ldr	r3, [pc, #268]	@ (80090dc <pvPortMalloc+0x16c>)
 8008fd0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008fd2:	4b42      	ldr	r3, [pc, #264]	@ (80090dc <pvPortMalloc+0x16c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fd8:	e004      	b.n	8008fe4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8008fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fdc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d903      	bls.n	8008ff6 <pvPortMalloc+0x86>
 8008fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1f1      	bne.n	8008fda <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008ff6:	4b37      	ldr	r3, [pc, #220]	@ (80090d4 <pvPortMalloc+0x164>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d050      	beq.n	80090a2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2208      	movs	r2, #8
 8009006:	4413      	add	r3, r2
 8009008:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800900a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	1ad2      	subs	r2, r2, r3
 800901a:	2308      	movs	r3, #8
 800901c:	005b      	lsls	r3, r3, #1
 800901e:	429a      	cmp	r2, r3
 8009020:	d920      	bls.n	8009064 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4413      	add	r3, r2
 8009028:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f003 0307 	and.w	r3, r3, #7
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00b      	beq.n	800904c <pvPortMalloc+0xdc>
        __asm volatile
 8009034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	613b      	str	r3, [r7, #16]
    }
 8009046:	bf00      	nop
 8009048:	bf00      	nop
 800904a:	e7fd      	b.n	8009048 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800904c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	1ad2      	subs	r2, r2, r3
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8009058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800905e:	6978      	ldr	r0, [r7, #20]
 8009060:	f000 f8fc 	bl	800925c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009064:	4b1c      	ldr	r3, [pc, #112]	@ (80090d8 <pvPortMalloc+0x168>)
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	4a1a      	ldr	r2, [pc, #104]	@ (80090d8 <pvPortMalloc+0x168>)
 8009070:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009072:	4b19      	ldr	r3, [pc, #100]	@ (80090d8 <pvPortMalloc+0x168>)
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	4b1a      	ldr	r3, [pc, #104]	@ (80090e0 <pvPortMalloc+0x170>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	429a      	cmp	r2, r3
 800907c:	d203      	bcs.n	8009086 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800907e:	4b16      	ldr	r3, [pc, #88]	@ (80090d8 <pvPortMalloc+0x168>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a17      	ldr	r2, [pc, #92]	@ (80090e0 <pvPortMalloc+0x170>)
 8009084:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009090:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8009092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009094:	2200      	movs	r2, #0
 8009096:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8009098:	4b12      	ldr	r3, [pc, #72]	@ (80090e4 <pvPortMalloc+0x174>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3301      	adds	r3, #1
 800909e:	4a11      	ldr	r2, [pc, #68]	@ (80090e4 <pvPortMalloc+0x174>)
 80090a0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80090a2:	f7fe fc0f 	bl	80078c4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00b      	beq.n	80090c8 <pvPortMalloc+0x158>
        __asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	60fb      	str	r3, [r7, #12]
    }
 80090c2:	bf00      	nop
 80090c4:	bf00      	nop
 80090c6:	e7fd      	b.n	80090c4 <pvPortMalloc+0x154>
    return pvReturn;
 80090c8:	69fb      	ldr	r3, [r7, #28]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3728      	adds	r7, #40	@ 0x28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	20015578 	.word	0x20015578
 80090d8:	2001557c 	.word	0x2001557c
 80090dc:	20015570 	.word	0x20015570
 80090e0:	20015580 	.word	0x20015580
 80090e4:	20015584 	.word	0x20015584

080090e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d04b      	beq.n	8009192 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80090fa:	2308      	movs	r3, #8
 80090fc:	425b      	negs	r3, r3
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	4413      	add	r3, r2
 8009102:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	db0b      	blt.n	8009128 <vPortFree+0x40>
        __asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	60fb      	str	r3, [r7, #12]
    }
 8009122:	bf00      	nop
 8009124:	bf00      	nop
 8009126:	e7fd      	b.n	8009124 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00b      	beq.n	8009148 <vPortFree+0x60>
        __asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	60bb      	str	r3, [r7, #8]
    }
 8009142:	bf00      	nop
 8009144:	bf00      	nop
 8009146:	e7fd      	b.n	8009144 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	0fdb      	lsrs	r3, r3, #31
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b00      	cmp	r3, #0
 8009156:	d01c      	beq.n	8009192 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d118      	bne.n	8009192 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800916c:	f7fe fb9c 	bl	80078a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	4b09      	ldr	r3, [pc, #36]	@ (800919c <vPortFree+0xb4>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4413      	add	r3, r2
 800917a:	4a08      	ldr	r2, [pc, #32]	@ (800919c <vPortFree+0xb4>)
 800917c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800917e:	6938      	ldr	r0, [r7, #16]
 8009180:	f000 f86c 	bl	800925c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8009184:	4b06      	ldr	r3, [pc, #24]	@ (80091a0 <vPortFree+0xb8>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3301      	adds	r3, #1
 800918a:	4a05      	ldr	r2, [pc, #20]	@ (80091a0 <vPortFree+0xb8>)
 800918c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800918e:	f7fe fb99 	bl	80078c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8009192:	bf00      	nop
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	2001557c 	.word	0x2001557c
 80091a0:	20015588 	.word	0x20015588

080091a4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091aa:	f44f 33a0 	mov.w	r3, #81920	@ 0x14000
 80091ae:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80091b0:	4b25      	ldr	r3, [pc, #148]	@ (8009248 <prvHeapInit+0xa4>)
 80091b2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00c      	beq.n	80091d8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3307      	adds	r3, #7
 80091c2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 0307 	bic.w	r3, r3, #7
 80091ca:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	4a1d      	ldr	r2, [pc, #116]	@ (8009248 <prvHeapInit+0xa4>)
 80091d4:	4413      	add	r3, r2
 80091d6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091dc:	4a1b      	ldr	r2, [pc, #108]	@ (800924c <prvHeapInit+0xa8>)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80091e2:	4b1a      	ldr	r3, [pc, #104]	@ (800924c <prvHeapInit+0xa8>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	4413      	add	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80091f0:	2208      	movs	r2, #8
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1a9b      	subs	r3, r3, r2
 80091f6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f023 0307 	bic.w	r3, r3, #7
 80091fe:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4a13      	ldr	r2, [pc, #76]	@ (8009250 <prvHeapInit+0xac>)
 8009204:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009206:	4b12      	ldr	r3, [pc, #72]	@ (8009250 <prvHeapInit+0xac>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2200      	movs	r2, #0
 800920c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800920e:	4b10      	ldr	r3, [pc, #64]	@ (8009250 <prvHeapInit+0xac>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	1ad2      	subs	r2, r2, r3
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009224:	4b0a      	ldr	r3, [pc, #40]	@ (8009250 <prvHeapInit+0xac>)
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	4a08      	ldr	r2, [pc, #32]	@ (8009254 <prvHeapInit+0xb0>)
 8009232:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	4a07      	ldr	r2, [pc, #28]	@ (8009258 <prvHeapInit+0xb4>)
 800923a:	6013      	str	r3, [r2, #0]
}
 800923c:	bf00      	nop
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	20001570 	.word	0x20001570
 800924c:	20015570 	.word	0x20015570
 8009250:	20015578 	.word	0x20015578
 8009254:	20015580 	.word	0x20015580
 8009258:	2001557c 	.word	0x2001557c

0800925c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009264:	4b28      	ldr	r3, [pc, #160]	@ (8009308 <prvInsertBlockIntoFreeList+0xac>)
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	e002      	b.n	8009270 <prvInsertBlockIntoFreeList+0x14>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	429a      	cmp	r2, r3
 8009278:	d8f7      	bhi.n	800926a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	4413      	add	r3, r2
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	429a      	cmp	r2, r3
 800928a:	d108      	bne.n	800929e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	441a      	add	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	441a      	add	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d118      	bne.n	80092e4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	4b15      	ldr	r3, [pc, #84]	@ (800930c <prvInsertBlockIntoFreeList+0xb0>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d00d      	beq.n	80092da <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	441a      	add	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	e008      	b.n	80092ec <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092da:	4b0c      	ldr	r3, [pc, #48]	@ (800930c <prvInsertBlockIntoFreeList+0xb0>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	e003      	b.n	80092ec <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d002      	beq.n	80092fa <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80092fa:	bf00      	nop
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	20015570 	.word	0x20015570
 800930c:	20015578 	.word	0x20015578

08009310 <__cvt>:
 8009310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009314:	ec57 6b10 	vmov	r6, r7, d0
 8009318:	2f00      	cmp	r7, #0
 800931a:	460c      	mov	r4, r1
 800931c:	4619      	mov	r1, r3
 800931e:	463b      	mov	r3, r7
 8009320:	bfbb      	ittet	lt
 8009322:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009326:	461f      	movlt	r7, r3
 8009328:	2300      	movge	r3, #0
 800932a:	232d      	movlt	r3, #45	@ 0x2d
 800932c:	700b      	strb	r3, [r1, #0]
 800932e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009330:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009334:	4691      	mov	r9, r2
 8009336:	f023 0820 	bic.w	r8, r3, #32
 800933a:	bfbc      	itt	lt
 800933c:	4632      	movlt	r2, r6
 800933e:	4616      	movlt	r6, r2
 8009340:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009344:	d005      	beq.n	8009352 <__cvt+0x42>
 8009346:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800934a:	d100      	bne.n	800934e <__cvt+0x3e>
 800934c:	3401      	adds	r4, #1
 800934e:	2102      	movs	r1, #2
 8009350:	e000      	b.n	8009354 <__cvt+0x44>
 8009352:	2103      	movs	r1, #3
 8009354:	ab03      	add	r3, sp, #12
 8009356:	9301      	str	r3, [sp, #4]
 8009358:	ab02      	add	r3, sp, #8
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	ec47 6b10 	vmov	d0, r6, r7
 8009360:	4653      	mov	r3, sl
 8009362:	4622      	mov	r2, r4
 8009364:	f000 ff94 	bl	800a290 <_dtoa_r>
 8009368:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800936c:	4605      	mov	r5, r0
 800936e:	d119      	bne.n	80093a4 <__cvt+0x94>
 8009370:	f019 0f01 	tst.w	r9, #1
 8009374:	d00e      	beq.n	8009394 <__cvt+0x84>
 8009376:	eb00 0904 	add.w	r9, r0, r4
 800937a:	2200      	movs	r2, #0
 800937c:	2300      	movs	r3, #0
 800937e:	4630      	mov	r0, r6
 8009380:	4639      	mov	r1, r7
 8009382:	f7f7 fba1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009386:	b108      	cbz	r0, 800938c <__cvt+0x7c>
 8009388:	f8cd 900c 	str.w	r9, [sp, #12]
 800938c:	2230      	movs	r2, #48	@ 0x30
 800938e:	9b03      	ldr	r3, [sp, #12]
 8009390:	454b      	cmp	r3, r9
 8009392:	d31e      	bcc.n	80093d2 <__cvt+0xc2>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009398:	1b5b      	subs	r3, r3, r5
 800939a:	4628      	mov	r0, r5
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	b004      	add	sp, #16
 80093a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80093a8:	eb00 0904 	add.w	r9, r0, r4
 80093ac:	d1e5      	bne.n	800937a <__cvt+0x6a>
 80093ae:	7803      	ldrb	r3, [r0, #0]
 80093b0:	2b30      	cmp	r3, #48	@ 0x30
 80093b2:	d10a      	bne.n	80093ca <__cvt+0xba>
 80093b4:	2200      	movs	r2, #0
 80093b6:	2300      	movs	r3, #0
 80093b8:	4630      	mov	r0, r6
 80093ba:	4639      	mov	r1, r7
 80093bc:	f7f7 fb84 	bl	8000ac8 <__aeabi_dcmpeq>
 80093c0:	b918      	cbnz	r0, 80093ca <__cvt+0xba>
 80093c2:	f1c4 0401 	rsb	r4, r4, #1
 80093c6:	f8ca 4000 	str.w	r4, [sl]
 80093ca:	f8da 3000 	ldr.w	r3, [sl]
 80093ce:	4499      	add	r9, r3
 80093d0:	e7d3      	b.n	800937a <__cvt+0x6a>
 80093d2:	1c59      	adds	r1, r3, #1
 80093d4:	9103      	str	r1, [sp, #12]
 80093d6:	701a      	strb	r2, [r3, #0]
 80093d8:	e7d9      	b.n	800938e <__cvt+0x7e>

080093da <__exponent>:
 80093da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093dc:	2900      	cmp	r1, #0
 80093de:	bfba      	itte	lt
 80093e0:	4249      	neglt	r1, r1
 80093e2:	232d      	movlt	r3, #45	@ 0x2d
 80093e4:	232b      	movge	r3, #43	@ 0x2b
 80093e6:	2909      	cmp	r1, #9
 80093e8:	7002      	strb	r2, [r0, #0]
 80093ea:	7043      	strb	r3, [r0, #1]
 80093ec:	dd29      	ble.n	8009442 <__exponent+0x68>
 80093ee:	f10d 0307 	add.w	r3, sp, #7
 80093f2:	461d      	mov	r5, r3
 80093f4:	270a      	movs	r7, #10
 80093f6:	461a      	mov	r2, r3
 80093f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80093fc:	fb07 1416 	mls	r4, r7, r6, r1
 8009400:	3430      	adds	r4, #48	@ 0x30
 8009402:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009406:	460c      	mov	r4, r1
 8009408:	2c63      	cmp	r4, #99	@ 0x63
 800940a:	f103 33ff 	add.w	r3, r3, #4294967295
 800940e:	4631      	mov	r1, r6
 8009410:	dcf1      	bgt.n	80093f6 <__exponent+0x1c>
 8009412:	3130      	adds	r1, #48	@ 0x30
 8009414:	1e94      	subs	r4, r2, #2
 8009416:	f803 1c01 	strb.w	r1, [r3, #-1]
 800941a:	1c41      	adds	r1, r0, #1
 800941c:	4623      	mov	r3, r4
 800941e:	42ab      	cmp	r3, r5
 8009420:	d30a      	bcc.n	8009438 <__exponent+0x5e>
 8009422:	f10d 0309 	add.w	r3, sp, #9
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	42ac      	cmp	r4, r5
 800942a:	bf88      	it	hi
 800942c:	2300      	movhi	r3, #0
 800942e:	3302      	adds	r3, #2
 8009430:	4403      	add	r3, r0
 8009432:	1a18      	subs	r0, r3, r0
 8009434:	b003      	add	sp, #12
 8009436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009438:	f813 6b01 	ldrb.w	r6, [r3], #1
 800943c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009440:	e7ed      	b.n	800941e <__exponent+0x44>
 8009442:	2330      	movs	r3, #48	@ 0x30
 8009444:	3130      	adds	r1, #48	@ 0x30
 8009446:	7083      	strb	r3, [r0, #2]
 8009448:	70c1      	strb	r1, [r0, #3]
 800944a:	1d03      	adds	r3, r0, #4
 800944c:	e7f1      	b.n	8009432 <__exponent+0x58>
	...

08009450 <_printf_float>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	b08d      	sub	sp, #52	@ 0x34
 8009456:	460c      	mov	r4, r1
 8009458:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800945c:	4616      	mov	r6, r2
 800945e:	461f      	mov	r7, r3
 8009460:	4605      	mov	r5, r0
 8009462:	f000 fe05 	bl	800a070 <_localeconv_r>
 8009466:	6803      	ldr	r3, [r0, #0]
 8009468:	9304      	str	r3, [sp, #16]
 800946a:	4618      	mov	r0, r3
 800946c:	f7f6 ff00 	bl	8000270 <strlen>
 8009470:	2300      	movs	r3, #0
 8009472:	930a      	str	r3, [sp, #40]	@ 0x28
 8009474:	f8d8 3000 	ldr.w	r3, [r8]
 8009478:	9005      	str	r0, [sp, #20]
 800947a:	3307      	adds	r3, #7
 800947c:	f023 0307 	bic.w	r3, r3, #7
 8009480:	f103 0208 	add.w	r2, r3, #8
 8009484:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009488:	f8d4 b000 	ldr.w	fp, [r4]
 800948c:	f8c8 2000 	str.w	r2, [r8]
 8009490:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009494:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009498:	9307      	str	r3, [sp, #28]
 800949a:	f8cd 8018 	str.w	r8, [sp, #24]
 800949e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80094a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094a6:	4b9c      	ldr	r3, [pc, #624]	@ (8009718 <_printf_float+0x2c8>)
 80094a8:	f04f 32ff 	mov.w	r2, #4294967295
 80094ac:	f7f7 fb3e 	bl	8000b2c <__aeabi_dcmpun>
 80094b0:	bb70      	cbnz	r0, 8009510 <_printf_float+0xc0>
 80094b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094b6:	4b98      	ldr	r3, [pc, #608]	@ (8009718 <_printf_float+0x2c8>)
 80094b8:	f04f 32ff 	mov.w	r2, #4294967295
 80094bc:	f7f7 fb18 	bl	8000af0 <__aeabi_dcmple>
 80094c0:	bb30      	cbnz	r0, 8009510 <_printf_float+0xc0>
 80094c2:	2200      	movs	r2, #0
 80094c4:	2300      	movs	r3, #0
 80094c6:	4640      	mov	r0, r8
 80094c8:	4649      	mov	r1, r9
 80094ca:	f7f7 fb07 	bl	8000adc <__aeabi_dcmplt>
 80094ce:	b110      	cbz	r0, 80094d6 <_printf_float+0x86>
 80094d0:	232d      	movs	r3, #45	@ 0x2d
 80094d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094d6:	4a91      	ldr	r2, [pc, #580]	@ (800971c <_printf_float+0x2cc>)
 80094d8:	4b91      	ldr	r3, [pc, #580]	@ (8009720 <_printf_float+0x2d0>)
 80094da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80094de:	bf94      	ite	ls
 80094e0:	4690      	movls	r8, r2
 80094e2:	4698      	movhi	r8, r3
 80094e4:	2303      	movs	r3, #3
 80094e6:	6123      	str	r3, [r4, #16]
 80094e8:	f02b 0304 	bic.w	r3, fp, #4
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	f04f 0900 	mov.w	r9, #0
 80094f2:	9700      	str	r7, [sp, #0]
 80094f4:	4633      	mov	r3, r6
 80094f6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80094f8:	4621      	mov	r1, r4
 80094fa:	4628      	mov	r0, r5
 80094fc:	f000 f9d2 	bl	80098a4 <_printf_common>
 8009500:	3001      	adds	r0, #1
 8009502:	f040 808d 	bne.w	8009620 <_printf_float+0x1d0>
 8009506:	f04f 30ff 	mov.w	r0, #4294967295
 800950a:	b00d      	add	sp, #52	@ 0x34
 800950c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009510:	4642      	mov	r2, r8
 8009512:	464b      	mov	r3, r9
 8009514:	4640      	mov	r0, r8
 8009516:	4649      	mov	r1, r9
 8009518:	f7f7 fb08 	bl	8000b2c <__aeabi_dcmpun>
 800951c:	b140      	cbz	r0, 8009530 <_printf_float+0xe0>
 800951e:	464b      	mov	r3, r9
 8009520:	2b00      	cmp	r3, #0
 8009522:	bfbc      	itt	lt
 8009524:	232d      	movlt	r3, #45	@ 0x2d
 8009526:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800952a:	4a7e      	ldr	r2, [pc, #504]	@ (8009724 <_printf_float+0x2d4>)
 800952c:	4b7e      	ldr	r3, [pc, #504]	@ (8009728 <_printf_float+0x2d8>)
 800952e:	e7d4      	b.n	80094da <_printf_float+0x8a>
 8009530:	6863      	ldr	r3, [r4, #4]
 8009532:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009536:	9206      	str	r2, [sp, #24]
 8009538:	1c5a      	adds	r2, r3, #1
 800953a:	d13b      	bne.n	80095b4 <_printf_float+0x164>
 800953c:	2306      	movs	r3, #6
 800953e:	6063      	str	r3, [r4, #4]
 8009540:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009544:	2300      	movs	r3, #0
 8009546:	6022      	str	r2, [r4, #0]
 8009548:	9303      	str	r3, [sp, #12]
 800954a:	ab0a      	add	r3, sp, #40	@ 0x28
 800954c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009550:	ab09      	add	r3, sp, #36	@ 0x24
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	6861      	ldr	r1, [r4, #4]
 8009556:	ec49 8b10 	vmov	d0, r8, r9
 800955a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800955e:	4628      	mov	r0, r5
 8009560:	f7ff fed6 	bl	8009310 <__cvt>
 8009564:	9b06      	ldr	r3, [sp, #24]
 8009566:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009568:	2b47      	cmp	r3, #71	@ 0x47
 800956a:	4680      	mov	r8, r0
 800956c:	d129      	bne.n	80095c2 <_printf_float+0x172>
 800956e:	1cc8      	adds	r0, r1, #3
 8009570:	db02      	blt.n	8009578 <_printf_float+0x128>
 8009572:	6863      	ldr	r3, [r4, #4]
 8009574:	4299      	cmp	r1, r3
 8009576:	dd41      	ble.n	80095fc <_printf_float+0x1ac>
 8009578:	f1aa 0a02 	sub.w	sl, sl, #2
 800957c:	fa5f fa8a 	uxtb.w	sl, sl
 8009580:	3901      	subs	r1, #1
 8009582:	4652      	mov	r2, sl
 8009584:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009588:	9109      	str	r1, [sp, #36]	@ 0x24
 800958a:	f7ff ff26 	bl	80093da <__exponent>
 800958e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009590:	1813      	adds	r3, r2, r0
 8009592:	2a01      	cmp	r2, #1
 8009594:	4681      	mov	r9, r0
 8009596:	6123      	str	r3, [r4, #16]
 8009598:	dc02      	bgt.n	80095a0 <_printf_float+0x150>
 800959a:	6822      	ldr	r2, [r4, #0]
 800959c:	07d2      	lsls	r2, r2, #31
 800959e:	d501      	bpl.n	80095a4 <_printf_float+0x154>
 80095a0:	3301      	adds	r3, #1
 80095a2:	6123      	str	r3, [r4, #16]
 80095a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0a2      	beq.n	80094f2 <_printf_float+0xa2>
 80095ac:	232d      	movs	r3, #45	@ 0x2d
 80095ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095b2:	e79e      	b.n	80094f2 <_printf_float+0xa2>
 80095b4:	9a06      	ldr	r2, [sp, #24]
 80095b6:	2a47      	cmp	r2, #71	@ 0x47
 80095b8:	d1c2      	bne.n	8009540 <_printf_float+0xf0>
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1c0      	bne.n	8009540 <_printf_float+0xf0>
 80095be:	2301      	movs	r3, #1
 80095c0:	e7bd      	b.n	800953e <_printf_float+0xee>
 80095c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80095c6:	d9db      	bls.n	8009580 <_printf_float+0x130>
 80095c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80095cc:	d118      	bne.n	8009600 <_printf_float+0x1b0>
 80095ce:	2900      	cmp	r1, #0
 80095d0:	6863      	ldr	r3, [r4, #4]
 80095d2:	dd0b      	ble.n	80095ec <_printf_float+0x19c>
 80095d4:	6121      	str	r1, [r4, #16]
 80095d6:	b913      	cbnz	r3, 80095de <_printf_float+0x18e>
 80095d8:	6822      	ldr	r2, [r4, #0]
 80095da:	07d0      	lsls	r0, r2, #31
 80095dc:	d502      	bpl.n	80095e4 <_printf_float+0x194>
 80095de:	3301      	adds	r3, #1
 80095e0:	440b      	add	r3, r1
 80095e2:	6123      	str	r3, [r4, #16]
 80095e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80095e6:	f04f 0900 	mov.w	r9, #0
 80095ea:	e7db      	b.n	80095a4 <_printf_float+0x154>
 80095ec:	b913      	cbnz	r3, 80095f4 <_printf_float+0x1a4>
 80095ee:	6822      	ldr	r2, [r4, #0]
 80095f0:	07d2      	lsls	r2, r2, #31
 80095f2:	d501      	bpl.n	80095f8 <_printf_float+0x1a8>
 80095f4:	3302      	adds	r3, #2
 80095f6:	e7f4      	b.n	80095e2 <_printf_float+0x192>
 80095f8:	2301      	movs	r3, #1
 80095fa:	e7f2      	b.n	80095e2 <_printf_float+0x192>
 80095fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009602:	4299      	cmp	r1, r3
 8009604:	db05      	blt.n	8009612 <_printf_float+0x1c2>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	6121      	str	r1, [r4, #16]
 800960a:	07d8      	lsls	r0, r3, #31
 800960c:	d5ea      	bpl.n	80095e4 <_printf_float+0x194>
 800960e:	1c4b      	adds	r3, r1, #1
 8009610:	e7e7      	b.n	80095e2 <_printf_float+0x192>
 8009612:	2900      	cmp	r1, #0
 8009614:	bfd4      	ite	le
 8009616:	f1c1 0202 	rsble	r2, r1, #2
 800961a:	2201      	movgt	r2, #1
 800961c:	4413      	add	r3, r2
 800961e:	e7e0      	b.n	80095e2 <_printf_float+0x192>
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	055a      	lsls	r2, r3, #21
 8009624:	d407      	bmi.n	8009636 <_printf_float+0x1e6>
 8009626:	6923      	ldr	r3, [r4, #16]
 8009628:	4642      	mov	r2, r8
 800962a:	4631      	mov	r1, r6
 800962c:	4628      	mov	r0, r5
 800962e:	47b8      	blx	r7
 8009630:	3001      	adds	r0, #1
 8009632:	d12b      	bne.n	800968c <_printf_float+0x23c>
 8009634:	e767      	b.n	8009506 <_printf_float+0xb6>
 8009636:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800963a:	f240 80dd 	bls.w	80097f8 <_printf_float+0x3a8>
 800963e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009642:	2200      	movs	r2, #0
 8009644:	2300      	movs	r3, #0
 8009646:	f7f7 fa3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800964a:	2800      	cmp	r0, #0
 800964c:	d033      	beq.n	80096b6 <_printf_float+0x266>
 800964e:	4a37      	ldr	r2, [pc, #220]	@ (800972c <_printf_float+0x2dc>)
 8009650:	2301      	movs	r3, #1
 8009652:	4631      	mov	r1, r6
 8009654:	4628      	mov	r0, r5
 8009656:	47b8      	blx	r7
 8009658:	3001      	adds	r0, #1
 800965a:	f43f af54 	beq.w	8009506 <_printf_float+0xb6>
 800965e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009662:	4543      	cmp	r3, r8
 8009664:	db02      	blt.n	800966c <_printf_float+0x21c>
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	07d8      	lsls	r0, r3, #31
 800966a:	d50f      	bpl.n	800968c <_printf_float+0x23c>
 800966c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009670:	4631      	mov	r1, r6
 8009672:	4628      	mov	r0, r5
 8009674:	47b8      	blx	r7
 8009676:	3001      	adds	r0, #1
 8009678:	f43f af45 	beq.w	8009506 <_printf_float+0xb6>
 800967c:	f04f 0900 	mov.w	r9, #0
 8009680:	f108 38ff 	add.w	r8, r8, #4294967295
 8009684:	f104 0a1a 	add.w	sl, r4, #26
 8009688:	45c8      	cmp	r8, r9
 800968a:	dc09      	bgt.n	80096a0 <_printf_float+0x250>
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	079b      	lsls	r3, r3, #30
 8009690:	f100 8103 	bmi.w	800989a <_printf_float+0x44a>
 8009694:	68e0      	ldr	r0, [r4, #12]
 8009696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009698:	4298      	cmp	r0, r3
 800969a:	bfb8      	it	lt
 800969c:	4618      	movlt	r0, r3
 800969e:	e734      	b.n	800950a <_printf_float+0xba>
 80096a0:	2301      	movs	r3, #1
 80096a2:	4652      	mov	r2, sl
 80096a4:	4631      	mov	r1, r6
 80096a6:	4628      	mov	r0, r5
 80096a8:	47b8      	blx	r7
 80096aa:	3001      	adds	r0, #1
 80096ac:	f43f af2b 	beq.w	8009506 <_printf_float+0xb6>
 80096b0:	f109 0901 	add.w	r9, r9, #1
 80096b4:	e7e8      	b.n	8009688 <_printf_float+0x238>
 80096b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	dc39      	bgt.n	8009730 <_printf_float+0x2e0>
 80096bc:	4a1b      	ldr	r2, [pc, #108]	@ (800972c <_printf_float+0x2dc>)
 80096be:	2301      	movs	r3, #1
 80096c0:	4631      	mov	r1, r6
 80096c2:	4628      	mov	r0, r5
 80096c4:	47b8      	blx	r7
 80096c6:	3001      	adds	r0, #1
 80096c8:	f43f af1d 	beq.w	8009506 <_printf_float+0xb6>
 80096cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80096d0:	ea59 0303 	orrs.w	r3, r9, r3
 80096d4:	d102      	bne.n	80096dc <_printf_float+0x28c>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	07d9      	lsls	r1, r3, #31
 80096da:	d5d7      	bpl.n	800968c <_printf_float+0x23c>
 80096dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096e0:	4631      	mov	r1, r6
 80096e2:	4628      	mov	r0, r5
 80096e4:	47b8      	blx	r7
 80096e6:	3001      	adds	r0, #1
 80096e8:	f43f af0d 	beq.w	8009506 <_printf_float+0xb6>
 80096ec:	f04f 0a00 	mov.w	sl, #0
 80096f0:	f104 0b1a 	add.w	fp, r4, #26
 80096f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f6:	425b      	negs	r3, r3
 80096f8:	4553      	cmp	r3, sl
 80096fa:	dc01      	bgt.n	8009700 <_printf_float+0x2b0>
 80096fc:	464b      	mov	r3, r9
 80096fe:	e793      	b.n	8009628 <_printf_float+0x1d8>
 8009700:	2301      	movs	r3, #1
 8009702:	465a      	mov	r2, fp
 8009704:	4631      	mov	r1, r6
 8009706:	4628      	mov	r0, r5
 8009708:	47b8      	blx	r7
 800970a:	3001      	adds	r0, #1
 800970c:	f43f aefb 	beq.w	8009506 <_printf_float+0xb6>
 8009710:	f10a 0a01 	add.w	sl, sl, #1
 8009714:	e7ee      	b.n	80096f4 <_printf_float+0x2a4>
 8009716:	bf00      	nop
 8009718:	7fefffff 	.word	0x7fefffff
 800971c:	0800c218 	.word	0x0800c218
 8009720:	0800c21c 	.word	0x0800c21c
 8009724:	0800c220 	.word	0x0800c220
 8009728:	0800c224 	.word	0x0800c224
 800972c:	0800c228 	.word	0x0800c228
 8009730:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009732:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009736:	4553      	cmp	r3, sl
 8009738:	bfa8      	it	ge
 800973a:	4653      	movge	r3, sl
 800973c:	2b00      	cmp	r3, #0
 800973e:	4699      	mov	r9, r3
 8009740:	dc36      	bgt.n	80097b0 <_printf_float+0x360>
 8009742:	f04f 0b00 	mov.w	fp, #0
 8009746:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800974a:	f104 021a 	add.w	r2, r4, #26
 800974e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009750:	9306      	str	r3, [sp, #24]
 8009752:	eba3 0309 	sub.w	r3, r3, r9
 8009756:	455b      	cmp	r3, fp
 8009758:	dc31      	bgt.n	80097be <_printf_float+0x36e>
 800975a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800975c:	459a      	cmp	sl, r3
 800975e:	dc3a      	bgt.n	80097d6 <_printf_float+0x386>
 8009760:	6823      	ldr	r3, [r4, #0]
 8009762:	07da      	lsls	r2, r3, #31
 8009764:	d437      	bmi.n	80097d6 <_printf_float+0x386>
 8009766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009768:	ebaa 0903 	sub.w	r9, sl, r3
 800976c:	9b06      	ldr	r3, [sp, #24]
 800976e:	ebaa 0303 	sub.w	r3, sl, r3
 8009772:	4599      	cmp	r9, r3
 8009774:	bfa8      	it	ge
 8009776:	4699      	movge	r9, r3
 8009778:	f1b9 0f00 	cmp.w	r9, #0
 800977c:	dc33      	bgt.n	80097e6 <_printf_float+0x396>
 800977e:	f04f 0800 	mov.w	r8, #0
 8009782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009786:	f104 0b1a 	add.w	fp, r4, #26
 800978a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800978c:	ebaa 0303 	sub.w	r3, sl, r3
 8009790:	eba3 0309 	sub.w	r3, r3, r9
 8009794:	4543      	cmp	r3, r8
 8009796:	f77f af79 	ble.w	800968c <_printf_float+0x23c>
 800979a:	2301      	movs	r3, #1
 800979c:	465a      	mov	r2, fp
 800979e:	4631      	mov	r1, r6
 80097a0:	4628      	mov	r0, r5
 80097a2:	47b8      	blx	r7
 80097a4:	3001      	adds	r0, #1
 80097a6:	f43f aeae 	beq.w	8009506 <_printf_float+0xb6>
 80097aa:	f108 0801 	add.w	r8, r8, #1
 80097ae:	e7ec      	b.n	800978a <_printf_float+0x33a>
 80097b0:	4642      	mov	r2, r8
 80097b2:	4631      	mov	r1, r6
 80097b4:	4628      	mov	r0, r5
 80097b6:	47b8      	blx	r7
 80097b8:	3001      	adds	r0, #1
 80097ba:	d1c2      	bne.n	8009742 <_printf_float+0x2f2>
 80097bc:	e6a3      	b.n	8009506 <_printf_float+0xb6>
 80097be:	2301      	movs	r3, #1
 80097c0:	4631      	mov	r1, r6
 80097c2:	4628      	mov	r0, r5
 80097c4:	9206      	str	r2, [sp, #24]
 80097c6:	47b8      	blx	r7
 80097c8:	3001      	adds	r0, #1
 80097ca:	f43f ae9c 	beq.w	8009506 <_printf_float+0xb6>
 80097ce:	9a06      	ldr	r2, [sp, #24]
 80097d0:	f10b 0b01 	add.w	fp, fp, #1
 80097d4:	e7bb      	b.n	800974e <_printf_float+0x2fe>
 80097d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097da:	4631      	mov	r1, r6
 80097dc:	4628      	mov	r0, r5
 80097de:	47b8      	blx	r7
 80097e0:	3001      	adds	r0, #1
 80097e2:	d1c0      	bne.n	8009766 <_printf_float+0x316>
 80097e4:	e68f      	b.n	8009506 <_printf_float+0xb6>
 80097e6:	9a06      	ldr	r2, [sp, #24]
 80097e8:	464b      	mov	r3, r9
 80097ea:	4442      	add	r2, r8
 80097ec:	4631      	mov	r1, r6
 80097ee:	4628      	mov	r0, r5
 80097f0:	47b8      	blx	r7
 80097f2:	3001      	adds	r0, #1
 80097f4:	d1c3      	bne.n	800977e <_printf_float+0x32e>
 80097f6:	e686      	b.n	8009506 <_printf_float+0xb6>
 80097f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80097fc:	f1ba 0f01 	cmp.w	sl, #1
 8009800:	dc01      	bgt.n	8009806 <_printf_float+0x3b6>
 8009802:	07db      	lsls	r3, r3, #31
 8009804:	d536      	bpl.n	8009874 <_printf_float+0x424>
 8009806:	2301      	movs	r3, #1
 8009808:	4642      	mov	r2, r8
 800980a:	4631      	mov	r1, r6
 800980c:	4628      	mov	r0, r5
 800980e:	47b8      	blx	r7
 8009810:	3001      	adds	r0, #1
 8009812:	f43f ae78 	beq.w	8009506 <_printf_float+0xb6>
 8009816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800981a:	4631      	mov	r1, r6
 800981c:	4628      	mov	r0, r5
 800981e:	47b8      	blx	r7
 8009820:	3001      	adds	r0, #1
 8009822:	f43f ae70 	beq.w	8009506 <_printf_float+0xb6>
 8009826:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800982a:	2200      	movs	r2, #0
 800982c:	2300      	movs	r3, #0
 800982e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009832:	f7f7 f949 	bl	8000ac8 <__aeabi_dcmpeq>
 8009836:	b9c0      	cbnz	r0, 800986a <_printf_float+0x41a>
 8009838:	4653      	mov	r3, sl
 800983a:	f108 0201 	add.w	r2, r8, #1
 800983e:	4631      	mov	r1, r6
 8009840:	4628      	mov	r0, r5
 8009842:	47b8      	blx	r7
 8009844:	3001      	adds	r0, #1
 8009846:	d10c      	bne.n	8009862 <_printf_float+0x412>
 8009848:	e65d      	b.n	8009506 <_printf_float+0xb6>
 800984a:	2301      	movs	r3, #1
 800984c:	465a      	mov	r2, fp
 800984e:	4631      	mov	r1, r6
 8009850:	4628      	mov	r0, r5
 8009852:	47b8      	blx	r7
 8009854:	3001      	adds	r0, #1
 8009856:	f43f ae56 	beq.w	8009506 <_printf_float+0xb6>
 800985a:	f108 0801 	add.w	r8, r8, #1
 800985e:	45d0      	cmp	r8, sl
 8009860:	dbf3      	blt.n	800984a <_printf_float+0x3fa>
 8009862:	464b      	mov	r3, r9
 8009864:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009868:	e6df      	b.n	800962a <_printf_float+0x1da>
 800986a:	f04f 0800 	mov.w	r8, #0
 800986e:	f104 0b1a 	add.w	fp, r4, #26
 8009872:	e7f4      	b.n	800985e <_printf_float+0x40e>
 8009874:	2301      	movs	r3, #1
 8009876:	4642      	mov	r2, r8
 8009878:	e7e1      	b.n	800983e <_printf_float+0x3ee>
 800987a:	2301      	movs	r3, #1
 800987c:	464a      	mov	r2, r9
 800987e:	4631      	mov	r1, r6
 8009880:	4628      	mov	r0, r5
 8009882:	47b8      	blx	r7
 8009884:	3001      	adds	r0, #1
 8009886:	f43f ae3e 	beq.w	8009506 <_printf_float+0xb6>
 800988a:	f108 0801 	add.w	r8, r8, #1
 800988e:	68e3      	ldr	r3, [r4, #12]
 8009890:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009892:	1a5b      	subs	r3, r3, r1
 8009894:	4543      	cmp	r3, r8
 8009896:	dcf0      	bgt.n	800987a <_printf_float+0x42a>
 8009898:	e6fc      	b.n	8009694 <_printf_float+0x244>
 800989a:	f04f 0800 	mov.w	r8, #0
 800989e:	f104 0919 	add.w	r9, r4, #25
 80098a2:	e7f4      	b.n	800988e <_printf_float+0x43e>

080098a4 <_printf_common>:
 80098a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a8:	4616      	mov	r6, r2
 80098aa:	4698      	mov	r8, r3
 80098ac:	688a      	ldr	r2, [r1, #8]
 80098ae:	690b      	ldr	r3, [r1, #16]
 80098b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098b4:	4293      	cmp	r3, r2
 80098b6:	bfb8      	it	lt
 80098b8:	4613      	movlt	r3, r2
 80098ba:	6033      	str	r3, [r6, #0]
 80098bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098c0:	4607      	mov	r7, r0
 80098c2:	460c      	mov	r4, r1
 80098c4:	b10a      	cbz	r2, 80098ca <_printf_common+0x26>
 80098c6:	3301      	adds	r3, #1
 80098c8:	6033      	str	r3, [r6, #0]
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	0699      	lsls	r1, r3, #26
 80098ce:	bf42      	ittt	mi
 80098d0:	6833      	ldrmi	r3, [r6, #0]
 80098d2:	3302      	addmi	r3, #2
 80098d4:	6033      	strmi	r3, [r6, #0]
 80098d6:	6825      	ldr	r5, [r4, #0]
 80098d8:	f015 0506 	ands.w	r5, r5, #6
 80098dc:	d106      	bne.n	80098ec <_printf_common+0x48>
 80098de:	f104 0a19 	add.w	sl, r4, #25
 80098e2:	68e3      	ldr	r3, [r4, #12]
 80098e4:	6832      	ldr	r2, [r6, #0]
 80098e6:	1a9b      	subs	r3, r3, r2
 80098e8:	42ab      	cmp	r3, r5
 80098ea:	dc26      	bgt.n	800993a <_printf_common+0x96>
 80098ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098f0:	6822      	ldr	r2, [r4, #0]
 80098f2:	3b00      	subs	r3, #0
 80098f4:	bf18      	it	ne
 80098f6:	2301      	movne	r3, #1
 80098f8:	0692      	lsls	r2, r2, #26
 80098fa:	d42b      	bmi.n	8009954 <_printf_common+0xb0>
 80098fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009900:	4641      	mov	r1, r8
 8009902:	4638      	mov	r0, r7
 8009904:	47c8      	blx	r9
 8009906:	3001      	adds	r0, #1
 8009908:	d01e      	beq.n	8009948 <_printf_common+0xa4>
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	6922      	ldr	r2, [r4, #16]
 800990e:	f003 0306 	and.w	r3, r3, #6
 8009912:	2b04      	cmp	r3, #4
 8009914:	bf02      	ittt	eq
 8009916:	68e5      	ldreq	r5, [r4, #12]
 8009918:	6833      	ldreq	r3, [r6, #0]
 800991a:	1aed      	subeq	r5, r5, r3
 800991c:	68a3      	ldr	r3, [r4, #8]
 800991e:	bf0c      	ite	eq
 8009920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009924:	2500      	movne	r5, #0
 8009926:	4293      	cmp	r3, r2
 8009928:	bfc4      	itt	gt
 800992a:	1a9b      	subgt	r3, r3, r2
 800992c:	18ed      	addgt	r5, r5, r3
 800992e:	2600      	movs	r6, #0
 8009930:	341a      	adds	r4, #26
 8009932:	42b5      	cmp	r5, r6
 8009934:	d11a      	bne.n	800996c <_printf_common+0xc8>
 8009936:	2000      	movs	r0, #0
 8009938:	e008      	b.n	800994c <_printf_common+0xa8>
 800993a:	2301      	movs	r3, #1
 800993c:	4652      	mov	r2, sl
 800993e:	4641      	mov	r1, r8
 8009940:	4638      	mov	r0, r7
 8009942:	47c8      	blx	r9
 8009944:	3001      	adds	r0, #1
 8009946:	d103      	bne.n	8009950 <_printf_common+0xac>
 8009948:	f04f 30ff 	mov.w	r0, #4294967295
 800994c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009950:	3501      	adds	r5, #1
 8009952:	e7c6      	b.n	80098e2 <_printf_common+0x3e>
 8009954:	18e1      	adds	r1, r4, r3
 8009956:	1c5a      	adds	r2, r3, #1
 8009958:	2030      	movs	r0, #48	@ 0x30
 800995a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800995e:	4422      	add	r2, r4
 8009960:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009964:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009968:	3302      	adds	r3, #2
 800996a:	e7c7      	b.n	80098fc <_printf_common+0x58>
 800996c:	2301      	movs	r3, #1
 800996e:	4622      	mov	r2, r4
 8009970:	4641      	mov	r1, r8
 8009972:	4638      	mov	r0, r7
 8009974:	47c8      	blx	r9
 8009976:	3001      	adds	r0, #1
 8009978:	d0e6      	beq.n	8009948 <_printf_common+0xa4>
 800997a:	3601      	adds	r6, #1
 800997c:	e7d9      	b.n	8009932 <_printf_common+0x8e>
	...

08009980 <_printf_i>:
 8009980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009984:	7e0f      	ldrb	r7, [r1, #24]
 8009986:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009988:	2f78      	cmp	r7, #120	@ 0x78
 800998a:	4691      	mov	r9, r2
 800998c:	4680      	mov	r8, r0
 800998e:	460c      	mov	r4, r1
 8009990:	469a      	mov	sl, r3
 8009992:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009996:	d807      	bhi.n	80099a8 <_printf_i+0x28>
 8009998:	2f62      	cmp	r7, #98	@ 0x62
 800999a:	d80a      	bhi.n	80099b2 <_printf_i+0x32>
 800999c:	2f00      	cmp	r7, #0
 800999e:	f000 80d2 	beq.w	8009b46 <_printf_i+0x1c6>
 80099a2:	2f58      	cmp	r7, #88	@ 0x58
 80099a4:	f000 80b9 	beq.w	8009b1a <_printf_i+0x19a>
 80099a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099b0:	e03a      	b.n	8009a28 <_printf_i+0xa8>
 80099b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099b6:	2b15      	cmp	r3, #21
 80099b8:	d8f6      	bhi.n	80099a8 <_printf_i+0x28>
 80099ba:	a101      	add	r1, pc, #4	@ (adr r1, 80099c0 <_printf_i+0x40>)
 80099bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099c0:	08009a19 	.word	0x08009a19
 80099c4:	08009a2d 	.word	0x08009a2d
 80099c8:	080099a9 	.word	0x080099a9
 80099cc:	080099a9 	.word	0x080099a9
 80099d0:	080099a9 	.word	0x080099a9
 80099d4:	080099a9 	.word	0x080099a9
 80099d8:	08009a2d 	.word	0x08009a2d
 80099dc:	080099a9 	.word	0x080099a9
 80099e0:	080099a9 	.word	0x080099a9
 80099e4:	080099a9 	.word	0x080099a9
 80099e8:	080099a9 	.word	0x080099a9
 80099ec:	08009b2d 	.word	0x08009b2d
 80099f0:	08009a57 	.word	0x08009a57
 80099f4:	08009ae7 	.word	0x08009ae7
 80099f8:	080099a9 	.word	0x080099a9
 80099fc:	080099a9 	.word	0x080099a9
 8009a00:	08009b4f 	.word	0x08009b4f
 8009a04:	080099a9 	.word	0x080099a9
 8009a08:	08009a57 	.word	0x08009a57
 8009a0c:	080099a9 	.word	0x080099a9
 8009a10:	080099a9 	.word	0x080099a9
 8009a14:	08009aef 	.word	0x08009aef
 8009a18:	6833      	ldr	r3, [r6, #0]
 8009a1a:	1d1a      	adds	r2, r3, #4
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	6032      	str	r2, [r6, #0]
 8009a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e09d      	b.n	8009b68 <_printf_i+0x1e8>
 8009a2c:	6833      	ldr	r3, [r6, #0]
 8009a2e:	6820      	ldr	r0, [r4, #0]
 8009a30:	1d19      	adds	r1, r3, #4
 8009a32:	6031      	str	r1, [r6, #0]
 8009a34:	0606      	lsls	r6, r0, #24
 8009a36:	d501      	bpl.n	8009a3c <_printf_i+0xbc>
 8009a38:	681d      	ldr	r5, [r3, #0]
 8009a3a:	e003      	b.n	8009a44 <_printf_i+0xc4>
 8009a3c:	0645      	lsls	r5, r0, #25
 8009a3e:	d5fb      	bpl.n	8009a38 <_printf_i+0xb8>
 8009a40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a44:	2d00      	cmp	r5, #0
 8009a46:	da03      	bge.n	8009a50 <_printf_i+0xd0>
 8009a48:	232d      	movs	r3, #45	@ 0x2d
 8009a4a:	426d      	negs	r5, r5
 8009a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a50:	4859      	ldr	r0, [pc, #356]	@ (8009bb8 <_printf_i+0x238>)
 8009a52:	230a      	movs	r3, #10
 8009a54:	e011      	b.n	8009a7a <_printf_i+0xfa>
 8009a56:	6821      	ldr	r1, [r4, #0]
 8009a58:	6833      	ldr	r3, [r6, #0]
 8009a5a:	0608      	lsls	r0, r1, #24
 8009a5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a60:	d402      	bmi.n	8009a68 <_printf_i+0xe8>
 8009a62:	0649      	lsls	r1, r1, #25
 8009a64:	bf48      	it	mi
 8009a66:	b2ad      	uxthmi	r5, r5
 8009a68:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a6a:	4853      	ldr	r0, [pc, #332]	@ (8009bb8 <_printf_i+0x238>)
 8009a6c:	6033      	str	r3, [r6, #0]
 8009a6e:	bf14      	ite	ne
 8009a70:	230a      	movne	r3, #10
 8009a72:	2308      	moveq	r3, #8
 8009a74:	2100      	movs	r1, #0
 8009a76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a7a:	6866      	ldr	r6, [r4, #4]
 8009a7c:	60a6      	str	r6, [r4, #8]
 8009a7e:	2e00      	cmp	r6, #0
 8009a80:	bfa2      	ittt	ge
 8009a82:	6821      	ldrge	r1, [r4, #0]
 8009a84:	f021 0104 	bicge.w	r1, r1, #4
 8009a88:	6021      	strge	r1, [r4, #0]
 8009a8a:	b90d      	cbnz	r5, 8009a90 <_printf_i+0x110>
 8009a8c:	2e00      	cmp	r6, #0
 8009a8e:	d04b      	beq.n	8009b28 <_printf_i+0x1a8>
 8009a90:	4616      	mov	r6, r2
 8009a92:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a96:	fb03 5711 	mls	r7, r3, r1, r5
 8009a9a:	5dc7      	ldrb	r7, [r0, r7]
 8009a9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009aa0:	462f      	mov	r7, r5
 8009aa2:	42bb      	cmp	r3, r7
 8009aa4:	460d      	mov	r5, r1
 8009aa6:	d9f4      	bls.n	8009a92 <_printf_i+0x112>
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d10b      	bne.n	8009ac4 <_printf_i+0x144>
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	07df      	lsls	r7, r3, #31
 8009ab0:	d508      	bpl.n	8009ac4 <_printf_i+0x144>
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	6861      	ldr	r1, [r4, #4]
 8009ab6:	4299      	cmp	r1, r3
 8009ab8:	bfde      	ittt	le
 8009aba:	2330      	movle	r3, #48	@ 0x30
 8009abc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ac0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ac4:	1b92      	subs	r2, r2, r6
 8009ac6:	6122      	str	r2, [r4, #16]
 8009ac8:	f8cd a000 	str.w	sl, [sp]
 8009acc:	464b      	mov	r3, r9
 8009ace:	aa03      	add	r2, sp, #12
 8009ad0:	4621      	mov	r1, r4
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	f7ff fee6 	bl	80098a4 <_printf_common>
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d14a      	bne.n	8009b72 <_printf_i+0x1f2>
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae0:	b004      	add	sp, #16
 8009ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	f043 0320 	orr.w	r3, r3, #32
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	4833      	ldr	r0, [pc, #204]	@ (8009bbc <_printf_i+0x23c>)
 8009af0:	2778      	movs	r7, #120	@ 0x78
 8009af2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	6831      	ldr	r1, [r6, #0]
 8009afa:	061f      	lsls	r7, r3, #24
 8009afc:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b00:	d402      	bmi.n	8009b08 <_printf_i+0x188>
 8009b02:	065f      	lsls	r7, r3, #25
 8009b04:	bf48      	it	mi
 8009b06:	b2ad      	uxthmi	r5, r5
 8009b08:	6031      	str	r1, [r6, #0]
 8009b0a:	07d9      	lsls	r1, r3, #31
 8009b0c:	bf44      	itt	mi
 8009b0e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b12:	6023      	strmi	r3, [r4, #0]
 8009b14:	b11d      	cbz	r5, 8009b1e <_printf_i+0x19e>
 8009b16:	2310      	movs	r3, #16
 8009b18:	e7ac      	b.n	8009a74 <_printf_i+0xf4>
 8009b1a:	4827      	ldr	r0, [pc, #156]	@ (8009bb8 <_printf_i+0x238>)
 8009b1c:	e7e9      	b.n	8009af2 <_printf_i+0x172>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	f023 0320 	bic.w	r3, r3, #32
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	e7f6      	b.n	8009b16 <_printf_i+0x196>
 8009b28:	4616      	mov	r6, r2
 8009b2a:	e7bd      	b.n	8009aa8 <_printf_i+0x128>
 8009b2c:	6833      	ldr	r3, [r6, #0]
 8009b2e:	6825      	ldr	r5, [r4, #0]
 8009b30:	6961      	ldr	r1, [r4, #20]
 8009b32:	1d18      	adds	r0, r3, #4
 8009b34:	6030      	str	r0, [r6, #0]
 8009b36:	062e      	lsls	r6, r5, #24
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	d501      	bpl.n	8009b40 <_printf_i+0x1c0>
 8009b3c:	6019      	str	r1, [r3, #0]
 8009b3e:	e002      	b.n	8009b46 <_printf_i+0x1c6>
 8009b40:	0668      	lsls	r0, r5, #25
 8009b42:	d5fb      	bpl.n	8009b3c <_printf_i+0x1bc>
 8009b44:	8019      	strh	r1, [r3, #0]
 8009b46:	2300      	movs	r3, #0
 8009b48:	6123      	str	r3, [r4, #16]
 8009b4a:	4616      	mov	r6, r2
 8009b4c:	e7bc      	b.n	8009ac8 <_printf_i+0x148>
 8009b4e:	6833      	ldr	r3, [r6, #0]
 8009b50:	1d1a      	adds	r2, r3, #4
 8009b52:	6032      	str	r2, [r6, #0]
 8009b54:	681e      	ldr	r6, [r3, #0]
 8009b56:	6862      	ldr	r2, [r4, #4]
 8009b58:	2100      	movs	r1, #0
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f7f6 fb38 	bl	80001d0 <memchr>
 8009b60:	b108      	cbz	r0, 8009b66 <_printf_i+0x1e6>
 8009b62:	1b80      	subs	r0, r0, r6
 8009b64:	6060      	str	r0, [r4, #4]
 8009b66:	6863      	ldr	r3, [r4, #4]
 8009b68:	6123      	str	r3, [r4, #16]
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b70:	e7aa      	b.n	8009ac8 <_printf_i+0x148>
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	4632      	mov	r2, r6
 8009b76:	4649      	mov	r1, r9
 8009b78:	4640      	mov	r0, r8
 8009b7a:	47d0      	blx	sl
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d0ad      	beq.n	8009adc <_printf_i+0x15c>
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	079b      	lsls	r3, r3, #30
 8009b84:	d413      	bmi.n	8009bae <_printf_i+0x22e>
 8009b86:	68e0      	ldr	r0, [r4, #12]
 8009b88:	9b03      	ldr	r3, [sp, #12]
 8009b8a:	4298      	cmp	r0, r3
 8009b8c:	bfb8      	it	lt
 8009b8e:	4618      	movlt	r0, r3
 8009b90:	e7a6      	b.n	8009ae0 <_printf_i+0x160>
 8009b92:	2301      	movs	r3, #1
 8009b94:	4632      	mov	r2, r6
 8009b96:	4649      	mov	r1, r9
 8009b98:	4640      	mov	r0, r8
 8009b9a:	47d0      	blx	sl
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	d09d      	beq.n	8009adc <_printf_i+0x15c>
 8009ba0:	3501      	adds	r5, #1
 8009ba2:	68e3      	ldr	r3, [r4, #12]
 8009ba4:	9903      	ldr	r1, [sp, #12]
 8009ba6:	1a5b      	subs	r3, r3, r1
 8009ba8:	42ab      	cmp	r3, r5
 8009baa:	dcf2      	bgt.n	8009b92 <_printf_i+0x212>
 8009bac:	e7eb      	b.n	8009b86 <_printf_i+0x206>
 8009bae:	2500      	movs	r5, #0
 8009bb0:	f104 0619 	add.w	r6, r4, #25
 8009bb4:	e7f5      	b.n	8009ba2 <_printf_i+0x222>
 8009bb6:	bf00      	nop
 8009bb8:	0800c22a 	.word	0x0800c22a
 8009bbc:	0800c23b 	.word	0x0800c23b

08009bc0 <std>:
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	b510      	push	{r4, lr}
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8009bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bce:	6083      	str	r3, [r0, #8]
 8009bd0:	8181      	strh	r1, [r0, #12]
 8009bd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8009bd4:	81c2      	strh	r2, [r0, #14]
 8009bd6:	6183      	str	r3, [r0, #24]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	2208      	movs	r2, #8
 8009bdc:	305c      	adds	r0, #92	@ 0x5c
 8009bde:	f000 fa2d 	bl	800a03c <memset>
 8009be2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c18 <std+0x58>)
 8009be4:	6263      	str	r3, [r4, #36]	@ 0x24
 8009be6:	4b0d      	ldr	r3, [pc, #52]	@ (8009c1c <std+0x5c>)
 8009be8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009bea:	4b0d      	ldr	r3, [pc, #52]	@ (8009c20 <std+0x60>)
 8009bec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009bee:	4b0d      	ldr	r3, [pc, #52]	@ (8009c24 <std+0x64>)
 8009bf0:	6323      	str	r3, [r4, #48]	@ 0x30
 8009bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c28 <std+0x68>)
 8009bf4:	6224      	str	r4, [r4, #32]
 8009bf6:	429c      	cmp	r4, r3
 8009bf8:	d006      	beq.n	8009c08 <std+0x48>
 8009bfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009bfe:	4294      	cmp	r4, r2
 8009c00:	d002      	beq.n	8009c08 <std+0x48>
 8009c02:	33d0      	adds	r3, #208	@ 0xd0
 8009c04:	429c      	cmp	r4, r3
 8009c06:	d105      	bne.n	8009c14 <std+0x54>
 8009c08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c10:	f000 baa2 	b.w	800a158 <__retarget_lock_init_recursive>
 8009c14:	bd10      	pop	{r4, pc}
 8009c16:	bf00      	nop
 8009c18:	08009e8d 	.word	0x08009e8d
 8009c1c:	08009eaf 	.word	0x08009eaf
 8009c20:	08009ee7 	.word	0x08009ee7
 8009c24:	08009f0b 	.word	0x08009f0b
 8009c28:	2001558c 	.word	0x2001558c

08009c2c <stdio_exit_handler>:
 8009c2c:	4a02      	ldr	r2, [pc, #8]	@ (8009c38 <stdio_exit_handler+0xc>)
 8009c2e:	4903      	ldr	r1, [pc, #12]	@ (8009c3c <stdio_exit_handler+0x10>)
 8009c30:	4803      	ldr	r0, [pc, #12]	@ (8009c40 <stdio_exit_handler+0x14>)
 8009c32:	f000 b869 	b.w	8009d08 <_fwalk_sglue>
 8009c36:	bf00      	nop
 8009c38:	20000014 	.word	0x20000014
 8009c3c:	0800bd59 	.word	0x0800bd59
 8009c40:	20000024 	.word	0x20000024

08009c44 <cleanup_stdio>:
 8009c44:	6841      	ldr	r1, [r0, #4]
 8009c46:	4b0c      	ldr	r3, [pc, #48]	@ (8009c78 <cleanup_stdio+0x34>)
 8009c48:	4299      	cmp	r1, r3
 8009c4a:	b510      	push	{r4, lr}
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	d001      	beq.n	8009c54 <cleanup_stdio+0x10>
 8009c50:	f002 f882 	bl	800bd58 <_fflush_r>
 8009c54:	68a1      	ldr	r1, [r4, #8]
 8009c56:	4b09      	ldr	r3, [pc, #36]	@ (8009c7c <cleanup_stdio+0x38>)
 8009c58:	4299      	cmp	r1, r3
 8009c5a:	d002      	beq.n	8009c62 <cleanup_stdio+0x1e>
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f002 f87b 	bl	800bd58 <_fflush_r>
 8009c62:	68e1      	ldr	r1, [r4, #12]
 8009c64:	4b06      	ldr	r3, [pc, #24]	@ (8009c80 <cleanup_stdio+0x3c>)
 8009c66:	4299      	cmp	r1, r3
 8009c68:	d004      	beq.n	8009c74 <cleanup_stdio+0x30>
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c70:	f002 b872 	b.w	800bd58 <_fflush_r>
 8009c74:	bd10      	pop	{r4, pc}
 8009c76:	bf00      	nop
 8009c78:	2001558c 	.word	0x2001558c
 8009c7c:	200155f4 	.word	0x200155f4
 8009c80:	2001565c 	.word	0x2001565c

08009c84 <global_stdio_init.part.0>:
 8009c84:	b510      	push	{r4, lr}
 8009c86:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb4 <global_stdio_init.part.0+0x30>)
 8009c88:	4c0b      	ldr	r4, [pc, #44]	@ (8009cb8 <global_stdio_init.part.0+0x34>)
 8009c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8009cbc <global_stdio_init.part.0+0x38>)
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	4620      	mov	r0, r4
 8009c90:	2200      	movs	r2, #0
 8009c92:	2104      	movs	r1, #4
 8009c94:	f7ff ff94 	bl	8009bc0 <std>
 8009c98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	2109      	movs	r1, #9
 8009ca0:	f7ff ff8e 	bl	8009bc0 <std>
 8009ca4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ca8:	2202      	movs	r2, #2
 8009caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cae:	2112      	movs	r1, #18
 8009cb0:	f7ff bf86 	b.w	8009bc0 <std>
 8009cb4:	200156c4 	.word	0x200156c4
 8009cb8:	2001558c 	.word	0x2001558c
 8009cbc:	08009c2d 	.word	0x08009c2d

08009cc0 <__sfp_lock_acquire>:
 8009cc0:	4801      	ldr	r0, [pc, #4]	@ (8009cc8 <__sfp_lock_acquire+0x8>)
 8009cc2:	f000 ba4a 	b.w	800a15a <__retarget_lock_acquire_recursive>
 8009cc6:	bf00      	nop
 8009cc8:	200156cd 	.word	0x200156cd

08009ccc <__sfp_lock_release>:
 8009ccc:	4801      	ldr	r0, [pc, #4]	@ (8009cd4 <__sfp_lock_release+0x8>)
 8009cce:	f000 ba45 	b.w	800a15c <__retarget_lock_release_recursive>
 8009cd2:	bf00      	nop
 8009cd4:	200156cd 	.word	0x200156cd

08009cd8 <__sinit>:
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	4604      	mov	r4, r0
 8009cdc:	f7ff fff0 	bl	8009cc0 <__sfp_lock_acquire>
 8009ce0:	6a23      	ldr	r3, [r4, #32]
 8009ce2:	b11b      	cbz	r3, 8009cec <__sinit+0x14>
 8009ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ce8:	f7ff bff0 	b.w	8009ccc <__sfp_lock_release>
 8009cec:	4b04      	ldr	r3, [pc, #16]	@ (8009d00 <__sinit+0x28>)
 8009cee:	6223      	str	r3, [r4, #32]
 8009cf0:	4b04      	ldr	r3, [pc, #16]	@ (8009d04 <__sinit+0x2c>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1f5      	bne.n	8009ce4 <__sinit+0xc>
 8009cf8:	f7ff ffc4 	bl	8009c84 <global_stdio_init.part.0>
 8009cfc:	e7f2      	b.n	8009ce4 <__sinit+0xc>
 8009cfe:	bf00      	nop
 8009d00:	08009c45 	.word	0x08009c45
 8009d04:	200156c4 	.word	0x200156c4

08009d08 <_fwalk_sglue>:
 8009d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d0c:	4607      	mov	r7, r0
 8009d0e:	4688      	mov	r8, r1
 8009d10:	4614      	mov	r4, r2
 8009d12:	2600      	movs	r6, #0
 8009d14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d18:	f1b9 0901 	subs.w	r9, r9, #1
 8009d1c:	d505      	bpl.n	8009d2a <_fwalk_sglue+0x22>
 8009d1e:	6824      	ldr	r4, [r4, #0]
 8009d20:	2c00      	cmp	r4, #0
 8009d22:	d1f7      	bne.n	8009d14 <_fwalk_sglue+0xc>
 8009d24:	4630      	mov	r0, r6
 8009d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2a:	89ab      	ldrh	r3, [r5, #12]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d907      	bls.n	8009d40 <_fwalk_sglue+0x38>
 8009d30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d34:	3301      	adds	r3, #1
 8009d36:	d003      	beq.n	8009d40 <_fwalk_sglue+0x38>
 8009d38:	4629      	mov	r1, r5
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	47c0      	blx	r8
 8009d3e:	4306      	orrs	r6, r0
 8009d40:	3568      	adds	r5, #104	@ 0x68
 8009d42:	e7e9      	b.n	8009d18 <_fwalk_sglue+0x10>

08009d44 <iprintf>:
 8009d44:	b40f      	push	{r0, r1, r2, r3}
 8009d46:	b507      	push	{r0, r1, r2, lr}
 8009d48:	4906      	ldr	r1, [pc, #24]	@ (8009d64 <iprintf+0x20>)
 8009d4a:	ab04      	add	r3, sp, #16
 8009d4c:	6808      	ldr	r0, [r1, #0]
 8009d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d52:	6881      	ldr	r1, [r0, #8]
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	f001 fe63 	bl	800ba20 <_vfiprintf_r>
 8009d5a:	b003      	add	sp, #12
 8009d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d60:	b004      	add	sp, #16
 8009d62:	4770      	bx	lr
 8009d64:	20000020 	.word	0x20000020

08009d68 <_puts_r>:
 8009d68:	6a03      	ldr	r3, [r0, #32]
 8009d6a:	b570      	push	{r4, r5, r6, lr}
 8009d6c:	6884      	ldr	r4, [r0, #8]
 8009d6e:	4605      	mov	r5, r0
 8009d70:	460e      	mov	r6, r1
 8009d72:	b90b      	cbnz	r3, 8009d78 <_puts_r+0x10>
 8009d74:	f7ff ffb0 	bl	8009cd8 <__sinit>
 8009d78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d7a:	07db      	lsls	r3, r3, #31
 8009d7c:	d405      	bmi.n	8009d8a <_puts_r+0x22>
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	0598      	lsls	r0, r3, #22
 8009d82:	d402      	bmi.n	8009d8a <_puts_r+0x22>
 8009d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d86:	f000 f9e8 	bl	800a15a <__retarget_lock_acquire_recursive>
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	0719      	lsls	r1, r3, #28
 8009d8e:	d502      	bpl.n	8009d96 <_puts_r+0x2e>
 8009d90:	6923      	ldr	r3, [r4, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d135      	bne.n	8009e02 <_puts_r+0x9a>
 8009d96:	4621      	mov	r1, r4
 8009d98:	4628      	mov	r0, r5
 8009d9a:	f000 f8f9 	bl	8009f90 <__swsetup_r>
 8009d9e:	b380      	cbz	r0, 8009e02 <_puts_r+0x9a>
 8009da0:	f04f 35ff 	mov.w	r5, #4294967295
 8009da4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009da6:	07da      	lsls	r2, r3, #31
 8009da8:	d405      	bmi.n	8009db6 <_puts_r+0x4e>
 8009daa:	89a3      	ldrh	r3, [r4, #12]
 8009dac:	059b      	lsls	r3, r3, #22
 8009dae:	d402      	bmi.n	8009db6 <_puts_r+0x4e>
 8009db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009db2:	f000 f9d3 	bl	800a15c <__retarget_lock_release_recursive>
 8009db6:	4628      	mov	r0, r5
 8009db8:	bd70      	pop	{r4, r5, r6, pc}
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	da04      	bge.n	8009dc8 <_puts_r+0x60>
 8009dbe:	69a2      	ldr	r2, [r4, #24]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	dc17      	bgt.n	8009df4 <_puts_r+0x8c>
 8009dc4:	290a      	cmp	r1, #10
 8009dc6:	d015      	beq.n	8009df4 <_puts_r+0x8c>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	1c5a      	adds	r2, r3, #1
 8009dcc:	6022      	str	r2, [r4, #0]
 8009dce:	7019      	strb	r1, [r3, #0]
 8009dd0:	68a3      	ldr	r3, [r4, #8]
 8009dd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	60a3      	str	r3, [r4, #8]
 8009dda:	2900      	cmp	r1, #0
 8009ddc:	d1ed      	bne.n	8009dba <_puts_r+0x52>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	da11      	bge.n	8009e06 <_puts_r+0x9e>
 8009de2:	4622      	mov	r2, r4
 8009de4:	210a      	movs	r1, #10
 8009de6:	4628      	mov	r0, r5
 8009de8:	f000 f893 	bl	8009f12 <__swbuf_r>
 8009dec:	3001      	adds	r0, #1
 8009dee:	d0d7      	beq.n	8009da0 <_puts_r+0x38>
 8009df0:	250a      	movs	r5, #10
 8009df2:	e7d7      	b.n	8009da4 <_puts_r+0x3c>
 8009df4:	4622      	mov	r2, r4
 8009df6:	4628      	mov	r0, r5
 8009df8:	f000 f88b 	bl	8009f12 <__swbuf_r>
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d1e7      	bne.n	8009dd0 <_puts_r+0x68>
 8009e00:	e7ce      	b.n	8009da0 <_puts_r+0x38>
 8009e02:	3e01      	subs	r6, #1
 8009e04:	e7e4      	b.n	8009dd0 <_puts_r+0x68>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	6022      	str	r2, [r4, #0]
 8009e0c:	220a      	movs	r2, #10
 8009e0e:	701a      	strb	r2, [r3, #0]
 8009e10:	e7ee      	b.n	8009df0 <_puts_r+0x88>
	...

08009e14 <puts>:
 8009e14:	4b02      	ldr	r3, [pc, #8]	@ (8009e20 <puts+0xc>)
 8009e16:	4601      	mov	r1, r0
 8009e18:	6818      	ldr	r0, [r3, #0]
 8009e1a:	f7ff bfa5 	b.w	8009d68 <_puts_r>
 8009e1e:	bf00      	nop
 8009e20:	20000020 	.word	0x20000020

08009e24 <sniprintf>:
 8009e24:	b40c      	push	{r2, r3}
 8009e26:	b530      	push	{r4, r5, lr}
 8009e28:	4b17      	ldr	r3, [pc, #92]	@ (8009e88 <sniprintf+0x64>)
 8009e2a:	1e0c      	subs	r4, r1, #0
 8009e2c:	681d      	ldr	r5, [r3, #0]
 8009e2e:	b09d      	sub	sp, #116	@ 0x74
 8009e30:	da08      	bge.n	8009e44 <sniprintf+0x20>
 8009e32:	238b      	movs	r3, #139	@ 0x8b
 8009e34:	602b      	str	r3, [r5, #0]
 8009e36:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3a:	b01d      	add	sp, #116	@ 0x74
 8009e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e40:	b002      	add	sp, #8
 8009e42:	4770      	bx	lr
 8009e44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009e48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e4c:	bf14      	ite	ne
 8009e4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009e52:	4623      	moveq	r3, r4
 8009e54:	9304      	str	r3, [sp, #16]
 8009e56:	9307      	str	r3, [sp, #28]
 8009e58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009e5c:	9002      	str	r0, [sp, #8]
 8009e5e:	9006      	str	r0, [sp, #24]
 8009e60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e64:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009e66:	ab21      	add	r3, sp, #132	@ 0x84
 8009e68:	a902      	add	r1, sp, #8
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	9301      	str	r3, [sp, #4]
 8009e6e:	f001 fcb1 	bl	800b7d4 <_svfiprintf_r>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	bfbc      	itt	lt
 8009e76:	238b      	movlt	r3, #139	@ 0x8b
 8009e78:	602b      	strlt	r3, [r5, #0]
 8009e7a:	2c00      	cmp	r4, #0
 8009e7c:	d0dd      	beq.n	8009e3a <sniprintf+0x16>
 8009e7e:	9b02      	ldr	r3, [sp, #8]
 8009e80:	2200      	movs	r2, #0
 8009e82:	701a      	strb	r2, [r3, #0]
 8009e84:	e7d9      	b.n	8009e3a <sniprintf+0x16>
 8009e86:	bf00      	nop
 8009e88:	20000020 	.word	0x20000020

08009e8c <__sread>:
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	460c      	mov	r4, r1
 8009e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e94:	f000 f912 	bl	800a0bc <_read_r>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	bfab      	itete	ge
 8009e9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8009ea0:	181b      	addge	r3, r3, r0
 8009ea2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ea6:	bfac      	ite	ge
 8009ea8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009eaa:	81a3      	strhlt	r3, [r4, #12]
 8009eac:	bd10      	pop	{r4, pc}

08009eae <__swrite>:
 8009eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb2:	461f      	mov	r7, r3
 8009eb4:	898b      	ldrh	r3, [r1, #12]
 8009eb6:	05db      	lsls	r3, r3, #23
 8009eb8:	4605      	mov	r5, r0
 8009eba:	460c      	mov	r4, r1
 8009ebc:	4616      	mov	r6, r2
 8009ebe:	d505      	bpl.n	8009ecc <__swrite+0x1e>
 8009ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f000 f8e6 	bl	800a098 <_lseek_r>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	4632      	mov	r2, r6
 8009eda:	463b      	mov	r3, r7
 8009edc:	4628      	mov	r0, r5
 8009ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee2:	f000 b8fd 	b.w	800a0e0 <_write_r>

08009ee6 <__sseek>:
 8009ee6:	b510      	push	{r4, lr}
 8009ee8:	460c      	mov	r4, r1
 8009eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eee:	f000 f8d3 	bl	800a098 <_lseek_r>
 8009ef2:	1c43      	adds	r3, r0, #1
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	bf15      	itete	ne
 8009ef8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009efa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009efe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f02:	81a3      	strheq	r3, [r4, #12]
 8009f04:	bf18      	it	ne
 8009f06:	81a3      	strhne	r3, [r4, #12]
 8009f08:	bd10      	pop	{r4, pc}

08009f0a <__sclose>:
 8009f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f0e:	f000 b8b3 	b.w	800a078 <_close_r>

08009f12 <__swbuf_r>:
 8009f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f14:	460e      	mov	r6, r1
 8009f16:	4614      	mov	r4, r2
 8009f18:	4605      	mov	r5, r0
 8009f1a:	b118      	cbz	r0, 8009f24 <__swbuf_r+0x12>
 8009f1c:	6a03      	ldr	r3, [r0, #32]
 8009f1e:	b90b      	cbnz	r3, 8009f24 <__swbuf_r+0x12>
 8009f20:	f7ff feda 	bl	8009cd8 <__sinit>
 8009f24:	69a3      	ldr	r3, [r4, #24]
 8009f26:	60a3      	str	r3, [r4, #8]
 8009f28:	89a3      	ldrh	r3, [r4, #12]
 8009f2a:	071a      	lsls	r2, r3, #28
 8009f2c:	d501      	bpl.n	8009f32 <__swbuf_r+0x20>
 8009f2e:	6923      	ldr	r3, [r4, #16]
 8009f30:	b943      	cbnz	r3, 8009f44 <__swbuf_r+0x32>
 8009f32:	4621      	mov	r1, r4
 8009f34:	4628      	mov	r0, r5
 8009f36:	f000 f82b 	bl	8009f90 <__swsetup_r>
 8009f3a:	b118      	cbz	r0, 8009f44 <__swbuf_r+0x32>
 8009f3c:	f04f 37ff 	mov.w	r7, #4294967295
 8009f40:	4638      	mov	r0, r7
 8009f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	6922      	ldr	r2, [r4, #16]
 8009f48:	1a98      	subs	r0, r3, r2
 8009f4a:	6963      	ldr	r3, [r4, #20]
 8009f4c:	b2f6      	uxtb	r6, r6
 8009f4e:	4283      	cmp	r3, r0
 8009f50:	4637      	mov	r7, r6
 8009f52:	dc05      	bgt.n	8009f60 <__swbuf_r+0x4e>
 8009f54:	4621      	mov	r1, r4
 8009f56:	4628      	mov	r0, r5
 8009f58:	f001 fefe 	bl	800bd58 <_fflush_r>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d1ed      	bne.n	8009f3c <__swbuf_r+0x2a>
 8009f60:	68a3      	ldr	r3, [r4, #8]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	60a3      	str	r3, [r4, #8]
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	6022      	str	r2, [r4, #0]
 8009f6c:	701e      	strb	r6, [r3, #0]
 8009f6e:	6962      	ldr	r2, [r4, #20]
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d004      	beq.n	8009f80 <__swbuf_r+0x6e>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	07db      	lsls	r3, r3, #31
 8009f7a:	d5e1      	bpl.n	8009f40 <__swbuf_r+0x2e>
 8009f7c:	2e0a      	cmp	r6, #10
 8009f7e:	d1df      	bne.n	8009f40 <__swbuf_r+0x2e>
 8009f80:	4621      	mov	r1, r4
 8009f82:	4628      	mov	r0, r5
 8009f84:	f001 fee8 	bl	800bd58 <_fflush_r>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d0d9      	beq.n	8009f40 <__swbuf_r+0x2e>
 8009f8c:	e7d6      	b.n	8009f3c <__swbuf_r+0x2a>
	...

08009f90 <__swsetup_r>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	4b29      	ldr	r3, [pc, #164]	@ (800a038 <__swsetup_r+0xa8>)
 8009f94:	4605      	mov	r5, r0
 8009f96:	6818      	ldr	r0, [r3, #0]
 8009f98:	460c      	mov	r4, r1
 8009f9a:	b118      	cbz	r0, 8009fa4 <__swsetup_r+0x14>
 8009f9c:	6a03      	ldr	r3, [r0, #32]
 8009f9e:	b90b      	cbnz	r3, 8009fa4 <__swsetup_r+0x14>
 8009fa0:	f7ff fe9a 	bl	8009cd8 <__sinit>
 8009fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fa8:	0719      	lsls	r1, r3, #28
 8009faa:	d422      	bmi.n	8009ff2 <__swsetup_r+0x62>
 8009fac:	06da      	lsls	r2, r3, #27
 8009fae:	d407      	bmi.n	8009fc0 <__swsetup_r+0x30>
 8009fb0:	2209      	movs	r2, #9
 8009fb2:	602a      	str	r2, [r5, #0]
 8009fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fb8:	81a3      	strh	r3, [r4, #12]
 8009fba:	f04f 30ff 	mov.w	r0, #4294967295
 8009fbe:	e033      	b.n	800a028 <__swsetup_r+0x98>
 8009fc0:	0758      	lsls	r0, r3, #29
 8009fc2:	d512      	bpl.n	8009fea <__swsetup_r+0x5a>
 8009fc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fc6:	b141      	cbz	r1, 8009fda <__swsetup_r+0x4a>
 8009fc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fcc:	4299      	cmp	r1, r3
 8009fce:	d002      	beq.n	8009fd6 <__swsetup_r+0x46>
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f000 ff21 	bl	800ae18 <_free_r>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009fe0:	81a3      	strh	r3, [r4, #12]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	6063      	str	r3, [r4, #4]
 8009fe6:	6923      	ldr	r3, [r4, #16]
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	89a3      	ldrh	r3, [r4, #12]
 8009fec:	f043 0308 	orr.w	r3, r3, #8
 8009ff0:	81a3      	strh	r3, [r4, #12]
 8009ff2:	6923      	ldr	r3, [r4, #16]
 8009ff4:	b94b      	cbnz	r3, 800a00a <__swsetup_r+0x7a>
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a000:	d003      	beq.n	800a00a <__swsetup_r+0x7a>
 800a002:	4621      	mov	r1, r4
 800a004:	4628      	mov	r0, r5
 800a006:	f001 fef5 	bl	800bdf4 <__smakebuf_r>
 800a00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a00e:	f013 0201 	ands.w	r2, r3, #1
 800a012:	d00a      	beq.n	800a02a <__swsetup_r+0x9a>
 800a014:	2200      	movs	r2, #0
 800a016:	60a2      	str	r2, [r4, #8]
 800a018:	6962      	ldr	r2, [r4, #20]
 800a01a:	4252      	negs	r2, r2
 800a01c:	61a2      	str	r2, [r4, #24]
 800a01e:	6922      	ldr	r2, [r4, #16]
 800a020:	b942      	cbnz	r2, 800a034 <__swsetup_r+0xa4>
 800a022:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a026:	d1c5      	bne.n	8009fb4 <__swsetup_r+0x24>
 800a028:	bd38      	pop	{r3, r4, r5, pc}
 800a02a:	0799      	lsls	r1, r3, #30
 800a02c:	bf58      	it	pl
 800a02e:	6962      	ldrpl	r2, [r4, #20]
 800a030:	60a2      	str	r2, [r4, #8]
 800a032:	e7f4      	b.n	800a01e <__swsetup_r+0x8e>
 800a034:	2000      	movs	r0, #0
 800a036:	e7f7      	b.n	800a028 <__swsetup_r+0x98>
 800a038:	20000020 	.word	0x20000020

0800a03c <memset>:
 800a03c:	4402      	add	r2, r0
 800a03e:	4603      	mov	r3, r0
 800a040:	4293      	cmp	r3, r2
 800a042:	d100      	bne.n	800a046 <memset+0xa>
 800a044:	4770      	bx	lr
 800a046:	f803 1b01 	strb.w	r1, [r3], #1
 800a04a:	e7f9      	b.n	800a040 <memset+0x4>

0800a04c <strncmp>:
 800a04c:	b510      	push	{r4, lr}
 800a04e:	b16a      	cbz	r2, 800a06c <strncmp+0x20>
 800a050:	3901      	subs	r1, #1
 800a052:	1884      	adds	r4, r0, r2
 800a054:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a058:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d103      	bne.n	800a068 <strncmp+0x1c>
 800a060:	42a0      	cmp	r0, r4
 800a062:	d001      	beq.n	800a068 <strncmp+0x1c>
 800a064:	2a00      	cmp	r2, #0
 800a066:	d1f5      	bne.n	800a054 <strncmp+0x8>
 800a068:	1ad0      	subs	r0, r2, r3
 800a06a:	bd10      	pop	{r4, pc}
 800a06c:	4610      	mov	r0, r2
 800a06e:	e7fc      	b.n	800a06a <strncmp+0x1e>

0800a070 <_localeconv_r>:
 800a070:	4800      	ldr	r0, [pc, #0]	@ (800a074 <_localeconv_r+0x4>)
 800a072:	4770      	bx	lr
 800a074:	20000160 	.word	0x20000160

0800a078 <_close_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	4d06      	ldr	r5, [pc, #24]	@ (800a094 <_close_r+0x1c>)
 800a07c:	2300      	movs	r3, #0
 800a07e:	4604      	mov	r4, r0
 800a080:	4608      	mov	r0, r1
 800a082:	602b      	str	r3, [r5, #0]
 800a084:	f7f7 fd7e 	bl	8001b84 <_close>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	d102      	bne.n	800a092 <_close_r+0x1a>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	b103      	cbz	r3, 800a092 <_close_r+0x1a>
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	200156c8 	.word	0x200156c8

0800a098 <_lseek_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	4d07      	ldr	r5, [pc, #28]	@ (800a0b8 <_lseek_r+0x20>)
 800a09c:	4604      	mov	r4, r0
 800a09e:	4608      	mov	r0, r1
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	602a      	str	r2, [r5, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f7f7 fd93 	bl	8001bd2 <_lseek>
 800a0ac:	1c43      	adds	r3, r0, #1
 800a0ae:	d102      	bne.n	800a0b6 <_lseek_r+0x1e>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	b103      	cbz	r3, 800a0b6 <_lseek_r+0x1e>
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}
 800a0b8:	200156c8 	.word	0x200156c8

0800a0bc <_read_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	4d07      	ldr	r5, [pc, #28]	@ (800a0dc <_read_r+0x20>)
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	4608      	mov	r0, r1
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	602a      	str	r2, [r5, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	f7f7 fd3d 	bl	8001b4a <_read>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d102      	bne.n	800a0da <_read_r+0x1e>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	b103      	cbz	r3, 800a0da <_read_r+0x1e>
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	200156c8 	.word	0x200156c8

0800a0e0 <_write_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d07      	ldr	r5, [pc, #28]	@ (800a100 <_write_r+0x20>)
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	4608      	mov	r0, r1
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	602a      	str	r2, [r5, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	f7f7 fa6a 	bl	80015c8 <_write>
 800a0f4:	1c43      	adds	r3, r0, #1
 800a0f6:	d102      	bne.n	800a0fe <_write_r+0x1e>
 800a0f8:	682b      	ldr	r3, [r5, #0]
 800a0fa:	b103      	cbz	r3, 800a0fe <_write_r+0x1e>
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}
 800a100:	200156c8 	.word	0x200156c8

0800a104 <__errno>:
 800a104:	4b01      	ldr	r3, [pc, #4]	@ (800a10c <__errno+0x8>)
 800a106:	6818      	ldr	r0, [r3, #0]
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	20000020 	.word	0x20000020

0800a110 <__libc_init_array>:
 800a110:	b570      	push	{r4, r5, r6, lr}
 800a112:	4d0d      	ldr	r5, [pc, #52]	@ (800a148 <__libc_init_array+0x38>)
 800a114:	4c0d      	ldr	r4, [pc, #52]	@ (800a14c <__libc_init_array+0x3c>)
 800a116:	1b64      	subs	r4, r4, r5
 800a118:	10a4      	asrs	r4, r4, #2
 800a11a:	2600      	movs	r6, #0
 800a11c:	42a6      	cmp	r6, r4
 800a11e:	d109      	bne.n	800a134 <__libc_init_array+0x24>
 800a120:	4d0b      	ldr	r5, [pc, #44]	@ (800a150 <__libc_init_array+0x40>)
 800a122:	4c0c      	ldr	r4, [pc, #48]	@ (800a154 <__libc_init_array+0x44>)
 800a124:	f001 ffe2 	bl	800c0ec <_init>
 800a128:	1b64      	subs	r4, r4, r5
 800a12a:	10a4      	asrs	r4, r4, #2
 800a12c:	2600      	movs	r6, #0
 800a12e:	42a6      	cmp	r6, r4
 800a130:	d105      	bne.n	800a13e <__libc_init_array+0x2e>
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	f855 3b04 	ldr.w	r3, [r5], #4
 800a138:	4798      	blx	r3
 800a13a:	3601      	adds	r6, #1
 800a13c:	e7ee      	b.n	800a11c <__libc_init_array+0xc>
 800a13e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a142:	4798      	blx	r3
 800a144:	3601      	adds	r6, #1
 800a146:	e7f2      	b.n	800a12e <__libc_init_array+0x1e>
 800a148:	0800c590 	.word	0x0800c590
 800a14c:	0800c590 	.word	0x0800c590
 800a150:	0800c590 	.word	0x0800c590
 800a154:	0800c594 	.word	0x0800c594

0800a158 <__retarget_lock_init_recursive>:
 800a158:	4770      	bx	lr

0800a15a <__retarget_lock_acquire_recursive>:
 800a15a:	4770      	bx	lr

0800a15c <__retarget_lock_release_recursive>:
 800a15c:	4770      	bx	lr

0800a15e <memcpy>:
 800a15e:	440a      	add	r2, r1
 800a160:	4291      	cmp	r1, r2
 800a162:	f100 33ff 	add.w	r3, r0, #4294967295
 800a166:	d100      	bne.n	800a16a <memcpy+0xc>
 800a168:	4770      	bx	lr
 800a16a:	b510      	push	{r4, lr}
 800a16c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a170:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a174:	4291      	cmp	r1, r2
 800a176:	d1f9      	bne.n	800a16c <memcpy+0xe>
 800a178:	bd10      	pop	{r4, pc}

0800a17a <quorem>:
 800a17a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17e:	6903      	ldr	r3, [r0, #16]
 800a180:	690c      	ldr	r4, [r1, #16]
 800a182:	42a3      	cmp	r3, r4
 800a184:	4607      	mov	r7, r0
 800a186:	db7e      	blt.n	800a286 <quorem+0x10c>
 800a188:	3c01      	subs	r4, #1
 800a18a:	f101 0814 	add.w	r8, r1, #20
 800a18e:	00a3      	lsls	r3, r4, #2
 800a190:	f100 0514 	add.w	r5, r0, #20
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a19a:	9301      	str	r3, [sp, #4]
 800a19c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1b0:	d32e      	bcc.n	800a210 <quorem+0x96>
 800a1b2:	f04f 0a00 	mov.w	sl, #0
 800a1b6:	46c4      	mov	ip, r8
 800a1b8:	46ae      	mov	lr, r5
 800a1ba:	46d3      	mov	fp, sl
 800a1bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1c0:	b298      	uxth	r0, r3
 800a1c2:	fb06 a000 	mla	r0, r6, r0, sl
 800a1c6:	0c02      	lsrs	r2, r0, #16
 800a1c8:	0c1b      	lsrs	r3, r3, #16
 800a1ca:	fb06 2303 	mla	r3, r6, r3, r2
 800a1ce:	f8de 2000 	ldr.w	r2, [lr]
 800a1d2:	b280      	uxth	r0, r0
 800a1d4:	b292      	uxth	r2, r2
 800a1d6:	1a12      	subs	r2, r2, r0
 800a1d8:	445a      	add	r2, fp
 800a1da:	f8de 0000 	ldr.w	r0, [lr]
 800a1de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a1e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a1ec:	b292      	uxth	r2, r2
 800a1ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a1f2:	45e1      	cmp	r9, ip
 800a1f4:	f84e 2b04 	str.w	r2, [lr], #4
 800a1f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a1fc:	d2de      	bcs.n	800a1bc <quorem+0x42>
 800a1fe:	9b00      	ldr	r3, [sp, #0]
 800a200:	58eb      	ldr	r3, [r5, r3]
 800a202:	b92b      	cbnz	r3, 800a210 <quorem+0x96>
 800a204:	9b01      	ldr	r3, [sp, #4]
 800a206:	3b04      	subs	r3, #4
 800a208:	429d      	cmp	r5, r3
 800a20a:	461a      	mov	r2, r3
 800a20c:	d32f      	bcc.n	800a26e <quorem+0xf4>
 800a20e:	613c      	str	r4, [r7, #16]
 800a210:	4638      	mov	r0, r7
 800a212:	f001 f97b 	bl	800b50c <__mcmp>
 800a216:	2800      	cmp	r0, #0
 800a218:	db25      	blt.n	800a266 <quorem+0xec>
 800a21a:	4629      	mov	r1, r5
 800a21c:	2000      	movs	r0, #0
 800a21e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a222:	f8d1 c000 	ldr.w	ip, [r1]
 800a226:	fa1f fe82 	uxth.w	lr, r2
 800a22a:	fa1f f38c 	uxth.w	r3, ip
 800a22e:	eba3 030e 	sub.w	r3, r3, lr
 800a232:	4403      	add	r3, r0
 800a234:	0c12      	lsrs	r2, r2, #16
 800a236:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a23a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a23e:	b29b      	uxth	r3, r3
 800a240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a244:	45c1      	cmp	r9, r8
 800a246:	f841 3b04 	str.w	r3, [r1], #4
 800a24a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a24e:	d2e6      	bcs.n	800a21e <quorem+0xa4>
 800a250:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a254:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a258:	b922      	cbnz	r2, 800a264 <quorem+0xea>
 800a25a:	3b04      	subs	r3, #4
 800a25c:	429d      	cmp	r5, r3
 800a25e:	461a      	mov	r2, r3
 800a260:	d30b      	bcc.n	800a27a <quorem+0x100>
 800a262:	613c      	str	r4, [r7, #16]
 800a264:	3601      	adds	r6, #1
 800a266:	4630      	mov	r0, r6
 800a268:	b003      	add	sp, #12
 800a26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26e:	6812      	ldr	r2, [r2, #0]
 800a270:	3b04      	subs	r3, #4
 800a272:	2a00      	cmp	r2, #0
 800a274:	d1cb      	bne.n	800a20e <quorem+0x94>
 800a276:	3c01      	subs	r4, #1
 800a278:	e7c6      	b.n	800a208 <quorem+0x8e>
 800a27a:	6812      	ldr	r2, [r2, #0]
 800a27c:	3b04      	subs	r3, #4
 800a27e:	2a00      	cmp	r2, #0
 800a280:	d1ef      	bne.n	800a262 <quorem+0xe8>
 800a282:	3c01      	subs	r4, #1
 800a284:	e7ea      	b.n	800a25c <quorem+0xe2>
 800a286:	2000      	movs	r0, #0
 800a288:	e7ee      	b.n	800a268 <quorem+0xee>
 800a28a:	0000      	movs	r0, r0
 800a28c:	0000      	movs	r0, r0
	...

0800a290 <_dtoa_r>:
 800a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a294:	69c7      	ldr	r7, [r0, #28]
 800a296:	b099      	sub	sp, #100	@ 0x64
 800a298:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a29c:	ec55 4b10 	vmov	r4, r5, d0
 800a2a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a2a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a2a4:	4683      	mov	fp, r0
 800a2a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a2aa:	b97f      	cbnz	r7, 800a2cc <_dtoa_r+0x3c>
 800a2ac:	2010      	movs	r0, #16
 800a2ae:	f000 fdfd 	bl	800aeac <malloc>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a2b8:	b920      	cbnz	r0, 800a2c4 <_dtoa_r+0x34>
 800a2ba:	4ba7      	ldr	r3, [pc, #668]	@ (800a558 <_dtoa_r+0x2c8>)
 800a2bc:	21ef      	movs	r1, #239	@ 0xef
 800a2be:	48a7      	ldr	r0, [pc, #668]	@ (800a55c <_dtoa_r+0x2cc>)
 800a2c0:	f001 fe20 	bl	800bf04 <__assert_func>
 800a2c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a2c8:	6007      	str	r7, [r0, #0]
 800a2ca:	60c7      	str	r7, [r0, #12]
 800a2cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2d0:	6819      	ldr	r1, [r3, #0]
 800a2d2:	b159      	cbz	r1, 800a2ec <_dtoa_r+0x5c>
 800a2d4:	685a      	ldr	r2, [r3, #4]
 800a2d6:	604a      	str	r2, [r1, #4]
 800a2d8:	2301      	movs	r3, #1
 800a2da:	4093      	lsls	r3, r2
 800a2dc:	608b      	str	r3, [r1, #8]
 800a2de:	4658      	mov	r0, fp
 800a2e0:	f000 feda 	bl	800b098 <_Bfree>
 800a2e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	1e2b      	subs	r3, r5, #0
 800a2ee:	bfb9      	ittee	lt
 800a2f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a2f4:	9303      	strlt	r3, [sp, #12]
 800a2f6:	2300      	movge	r3, #0
 800a2f8:	6033      	strge	r3, [r6, #0]
 800a2fa:	9f03      	ldr	r7, [sp, #12]
 800a2fc:	4b98      	ldr	r3, [pc, #608]	@ (800a560 <_dtoa_r+0x2d0>)
 800a2fe:	bfbc      	itt	lt
 800a300:	2201      	movlt	r2, #1
 800a302:	6032      	strlt	r2, [r6, #0]
 800a304:	43bb      	bics	r3, r7
 800a306:	d112      	bne.n	800a32e <_dtoa_r+0x9e>
 800a308:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a30a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a30e:	6013      	str	r3, [r2, #0]
 800a310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a314:	4323      	orrs	r3, r4
 800a316:	f000 854d 	beq.w	800adb4 <_dtoa_r+0xb24>
 800a31a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a31c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a574 <_dtoa_r+0x2e4>
 800a320:	2b00      	cmp	r3, #0
 800a322:	f000 854f 	beq.w	800adc4 <_dtoa_r+0xb34>
 800a326:	f10a 0303 	add.w	r3, sl, #3
 800a32a:	f000 bd49 	b.w	800adc0 <_dtoa_r+0xb30>
 800a32e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a332:	2200      	movs	r2, #0
 800a334:	ec51 0b17 	vmov	r0, r1, d7
 800a338:	2300      	movs	r3, #0
 800a33a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a33e:	f7f6 fbc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a342:	4680      	mov	r8, r0
 800a344:	b158      	cbz	r0, 800a35e <_dtoa_r+0xce>
 800a346:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a348:	2301      	movs	r3, #1
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a34e:	b113      	cbz	r3, 800a356 <_dtoa_r+0xc6>
 800a350:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a352:	4b84      	ldr	r3, [pc, #528]	@ (800a564 <_dtoa_r+0x2d4>)
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a578 <_dtoa_r+0x2e8>
 800a35a:	f000 bd33 	b.w	800adc4 <_dtoa_r+0xb34>
 800a35e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a362:	aa16      	add	r2, sp, #88	@ 0x58
 800a364:	a917      	add	r1, sp, #92	@ 0x5c
 800a366:	4658      	mov	r0, fp
 800a368:	f001 f980 	bl	800b66c <__d2b>
 800a36c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a370:	4681      	mov	r9, r0
 800a372:	2e00      	cmp	r6, #0
 800a374:	d077      	beq.n	800a466 <_dtoa_r+0x1d6>
 800a376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a378:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a37c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a384:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a388:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a38c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a390:	4619      	mov	r1, r3
 800a392:	2200      	movs	r2, #0
 800a394:	4b74      	ldr	r3, [pc, #464]	@ (800a568 <_dtoa_r+0x2d8>)
 800a396:	f7f5 ff77 	bl	8000288 <__aeabi_dsub>
 800a39a:	a369      	add	r3, pc, #420	@ (adr r3, 800a540 <_dtoa_r+0x2b0>)
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	f7f6 f92a 	bl	80005f8 <__aeabi_dmul>
 800a3a4:	a368      	add	r3, pc, #416	@ (adr r3, 800a548 <_dtoa_r+0x2b8>)
 800a3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3aa:	f7f5 ff6f 	bl	800028c <__adddf3>
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	460d      	mov	r5, r1
 800a3b4:	f7f6 f8b6 	bl	8000524 <__aeabi_i2d>
 800a3b8:	a365      	add	r3, pc, #404	@ (adr r3, 800a550 <_dtoa_r+0x2c0>)
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	f7f6 f91b 	bl	80005f8 <__aeabi_dmul>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	f7f5 ff5f 	bl	800028c <__adddf3>
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	460d      	mov	r5, r1
 800a3d2:	f7f6 fbc1 	bl	8000b58 <__aeabi_d2iz>
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	4607      	mov	r7, r0
 800a3da:	2300      	movs	r3, #0
 800a3dc:	4620      	mov	r0, r4
 800a3de:	4629      	mov	r1, r5
 800a3e0:	f7f6 fb7c 	bl	8000adc <__aeabi_dcmplt>
 800a3e4:	b140      	cbz	r0, 800a3f8 <_dtoa_r+0x168>
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	f7f6 f89c 	bl	8000524 <__aeabi_i2d>
 800a3ec:	4622      	mov	r2, r4
 800a3ee:	462b      	mov	r3, r5
 800a3f0:	f7f6 fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3f4:	b900      	cbnz	r0, 800a3f8 <_dtoa_r+0x168>
 800a3f6:	3f01      	subs	r7, #1
 800a3f8:	2f16      	cmp	r7, #22
 800a3fa:	d851      	bhi.n	800a4a0 <_dtoa_r+0x210>
 800a3fc:	4b5b      	ldr	r3, [pc, #364]	@ (800a56c <_dtoa_r+0x2dc>)
 800a3fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a40a:	f7f6 fb67 	bl	8000adc <__aeabi_dcmplt>
 800a40e:	2800      	cmp	r0, #0
 800a410:	d048      	beq.n	800a4a4 <_dtoa_r+0x214>
 800a412:	3f01      	subs	r7, #1
 800a414:	2300      	movs	r3, #0
 800a416:	9312      	str	r3, [sp, #72]	@ 0x48
 800a418:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a41a:	1b9b      	subs	r3, r3, r6
 800a41c:	1e5a      	subs	r2, r3, #1
 800a41e:	bf44      	itt	mi
 800a420:	f1c3 0801 	rsbmi	r8, r3, #1
 800a424:	2300      	movmi	r3, #0
 800a426:	9208      	str	r2, [sp, #32]
 800a428:	bf54      	ite	pl
 800a42a:	f04f 0800 	movpl.w	r8, #0
 800a42e:	9308      	strmi	r3, [sp, #32]
 800a430:	2f00      	cmp	r7, #0
 800a432:	db39      	blt.n	800a4a8 <_dtoa_r+0x218>
 800a434:	9b08      	ldr	r3, [sp, #32]
 800a436:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a438:	443b      	add	r3, r7
 800a43a:	9308      	str	r3, [sp, #32]
 800a43c:	2300      	movs	r3, #0
 800a43e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a442:	2b09      	cmp	r3, #9
 800a444:	d864      	bhi.n	800a510 <_dtoa_r+0x280>
 800a446:	2b05      	cmp	r3, #5
 800a448:	bfc4      	itt	gt
 800a44a:	3b04      	subgt	r3, #4
 800a44c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a44e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a450:	f1a3 0302 	sub.w	r3, r3, #2
 800a454:	bfcc      	ite	gt
 800a456:	2400      	movgt	r4, #0
 800a458:	2401      	movle	r4, #1
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d863      	bhi.n	800a526 <_dtoa_r+0x296>
 800a45e:	e8df f003 	tbb	[pc, r3]
 800a462:	372a      	.short	0x372a
 800a464:	5535      	.short	0x5535
 800a466:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a46a:	441e      	add	r6, r3
 800a46c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a470:	2b20      	cmp	r3, #32
 800a472:	bfc1      	itttt	gt
 800a474:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a478:	409f      	lslgt	r7, r3
 800a47a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a47e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a482:	bfd6      	itet	le
 800a484:	f1c3 0320 	rsble	r3, r3, #32
 800a488:	ea47 0003 	orrgt.w	r0, r7, r3
 800a48c:	fa04 f003 	lslle.w	r0, r4, r3
 800a490:	f7f6 f838 	bl	8000504 <__aeabi_ui2d>
 800a494:	2201      	movs	r2, #1
 800a496:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a49a:	3e01      	subs	r6, #1
 800a49c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a49e:	e777      	b.n	800a390 <_dtoa_r+0x100>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e7b8      	b.n	800a416 <_dtoa_r+0x186>
 800a4a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a4a6:	e7b7      	b.n	800a418 <_dtoa_r+0x188>
 800a4a8:	427b      	negs	r3, r7
 800a4aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	eba8 0807 	sub.w	r8, r8, r7
 800a4b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4b4:	e7c4      	b.n	800a440 <_dtoa_r+0x1b0>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	dc35      	bgt.n	800a52c <_dtoa_r+0x29c>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	9307      	str	r3, [sp, #28]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4ca:	e00b      	b.n	800a4e4 <_dtoa_r+0x254>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e7f3      	b.n	800a4b8 <_dtoa_r+0x228>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4d6:	18fb      	adds	r3, r7, r3
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	9307      	str	r3, [sp, #28]
 800a4e0:	bfb8      	it	lt
 800a4e2:	2301      	movlt	r3, #1
 800a4e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	2204      	movs	r2, #4
 800a4ec:	f102 0514 	add.w	r5, r2, #20
 800a4f0:	429d      	cmp	r5, r3
 800a4f2:	d91f      	bls.n	800a534 <_dtoa_r+0x2a4>
 800a4f4:	6041      	str	r1, [r0, #4]
 800a4f6:	4658      	mov	r0, fp
 800a4f8:	f000 fd8e 	bl	800b018 <_Balloc>
 800a4fc:	4682      	mov	sl, r0
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d13c      	bne.n	800a57c <_dtoa_r+0x2ec>
 800a502:	4b1b      	ldr	r3, [pc, #108]	@ (800a570 <_dtoa_r+0x2e0>)
 800a504:	4602      	mov	r2, r0
 800a506:	f240 11af 	movw	r1, #431	@ 0x1af
 800a50a:	e6d8      	b.n	800a2be <_dtoa_r+0x2e>
 800a50c:	2301      	movs	r3, #1
 800a50e:	e7e0      	b.n	800a4d2 <_dtoa_r+0x242>
 800a510:	2401      	movs	r4, #1
 800a512:	2300      	movs	r3, #0
 800a514:	9309      	str	r3, [sp, #36]	@ 0x24
 800a516:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a518:	f04f 33ff 	mov.w	r3, #4294967295
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	9307      	str	r3, [sp, #28]
 800a520:	2200      	movs	r2, #0
 800a522:	2312      	movs	r3, #18
 800a524:	e7d0      	b.n	800a4c8 <_dtoa_r+0x238>
 800a526:	2301      	movs	r3, #1
 800a528:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a52a:	e7f5      	b.n	800a518 <_dtoa_r+0x288>
 800a52c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	9307      	str	r3, [sp, #28]
 800a532:	e7d7      	b.n	800a4e4 <_dtoa_r+0x254>
 800a534:	3101      	adds	r1, #1
 800a536:	0052      	lsls	r2, r2, #1
 800a538:	e7d8      	b.n	800a4ec <_dtoa_r+0x25c>
 800a53a:	bf00      	nop
 800a53c:	f3af 8000 	nop.w
 800a540:	636f4361 	.word	0x636f4361
 800a544:	3fd287a7 	.word	0x3fd287a7
 800a548:	8b60c8b3 	.word	0x8b60c8b3
 800a54c:	3fc68a28 	.word	0x3fc68a28
 800a550:	509f79fb 	.word	0x509f79fb
 800a554:	3fd34413 	.word	0x3fd34413
 800a558:	0800c259 	.word	0x0800c259
 800a55c:	0800c270 	.word	0x0800c270
 800a560:	7ff00000 	.word	0x7ff00000
 800a564:	0800c229 	.word	0x0800c229
 800a568:	3ff80000 	.word	0x3ff80000
 800a56c:	0800c368 	.word	0x0800c368
 800a570:	0800c2c8 	.word	0x0800c2c8
 800a574:	0800c255 	.word	0x0800c255
 800a578:	0800c228 	.word	0x0800c228
 800a57c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a580:	6018      	str	r0, [r3, #0]
 800a582:	9b07      	ldr	r3, [sp, #28]
 800a584:	2b0e      	cmp	r3, #14
 800a586:	f200 80a4 	bhi.w	800a6d2 <_dtoa_r+0x442>
 800a58a:	2c00      	cmp	r4, #0
 800a58c:	f000 80a1 	beq.w	800a6d2 <_dtoa_r+0x442>
 800a590:	2f00      	cmp	r7, #0
 800a592:	dd33      	ble.n	800a5fc <_dtoa_r+0x36c>
 800a594:	4bad      	ldr	r3, [pc, #692]	@ (800a84c <_dtoa_r+0x5bc>)
 800a596:	f007 020f 	and.w	r2, r7, #15
 800a59a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a59e:	ed93 7b00 	vldr	d7, [r3]
 800a5a2:	05f8      	lsls	r0, r7, #23
 800a5a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a5a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a5ac:	d516      	bpl.n	800a5dc <_dtoa_r+0x34c>
 800a5ae:	4ba8      	ldr	r3, [pc, #672]	@ (800a850 <_dtoa_r+0x5c0>)
 800a5b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5b8:	f7f6 f948 	bl	800084c <__aeabi_ddiv>
 800a5bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5c0:	f004 040f 	and.w	r4, r4, #15
 800a5c4:	2603      	movs	r6, #3
 800a5c6:	4da2      	ldr	r5, [pc, #648]	@ (800a850 <_dtoa_r+0x5c0>)
 800a5c8:	b954      	cbnz	r4, 800a5e0 <_dtoa_r+0x350>
 800a5ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5d2:	f7f6 f93b 	bl	800084c <__aeabi_ddiv>
 800a5d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5da:	e028      	b.n	800a62e <_dtoa_r+0x39e>
 800a5dc:	2602      	movs	r6, #2
 800a5de:	e7f2      	b.n	800a5c6 <_dtoa_r+0x336>
 800a5e0:	07e1      	lsls	r1, r4, #31
 800a5e2:	d508      	bpl.n	800a5f6 <_dtoa_r+0x366>
 800a5e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5ec:	f7f6 f804 	bl	80005f8 <__aeabi_dmul>
 800a5f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5f4:	3601      	adds	r6, #1
 800a5f6:	1064      	asrs	r4, r4, #1
 800a5f8:	3508      	adds	r5, #8
 800a5fa:	e7e5      	b.n	800a5c8 <_dtoa_r+0x338>
 800a5fc:	f000 80d2 	beq.w	800a7a4 <_dtoa_r+0x514>
 800a600:	427c      	negs	r4, r7
 800a602:	4b92      	ldr	r3, [pc, #584]	@ (800a84c <_dtoa_r+0x5bc>)
 800a604:	4d92      	ldr	r5, [pc, #584]	@ (800a850 <_dtoa_r+0x5c0>)
 800a606:	f004 020f 	and.w	r2, r4, #15
 800a60a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a616:	f7f5 ffef 	bl	80005f8 <__aeabi_dmul>
 800a61a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a61e:	1124      	asrs	r4, r4, #4
 800a620:	2300      	movs	r3, #0
 800a622:	2602      	movs	r6, #2
 800a624:	2c00      	cmp	r4, #0
 800a626:	f040 80b2 	bne.w	800a78e <_dtoa_r+0x4fe>
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1d3      	bne.n	800a5d6 <_dtoa_r+0x346>
 800a62e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a630:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 80b7 	beq.w	800a7a8 <_dtoa_r+0x518>
 800a63a:	4b86      	ldr	r3, [pc, #536]	@ (800a854 <_dtoa_r+0x5c4>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	4620      	mov	r0, r4
 800a640:	4629      	mov	r1, r5
 800a642:	f7f6 fa4b 	bl	8000adc <__aeabi_dcmplt>
 800a646:	2800      	cmp	r0, #0
 800a648:	f000 80ae 	beq.w	800a7a8 <_dtoa_r+0x518>
 800a64c:	9b07      	ldr	r3, [sp, #28]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f000 80aa 	beq.w	800a7a8 <_dtoa_r+0x518>
 800a654:	9b00      	ldr	r3, [sp, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	dd37      	ble.n	800a6ca <_dtoa_r+0x43a>
 800a65a:	1e7b      	subs	r3, r7, #1
 800a65c:	9304      	str	r3, [sp, #16]
 800a65e:	4620      	mov	r0, r4
 800a660:	4b7d      	ldr	r3, [pc, #500]	@ (800a858 <_dtoa_r+0x5c8>)
 800a662:	2200      	movs	r2, #0
 800a664:	4629      	mov	r1, r5
 800a666:	f7f5 ffc7 	bl	80005f8 <__aeabi_dmul>
 800a66a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a66e:	9c00      	ldr	r4, [sp, #0]
 800a670:	3601      	adds	r6, #1
 800a672:	4630      	mov	r0, r6
 800a674:	f7f5 ff56 	bl	8000524 <__aeabi_i2d>
 800a678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a67c:	f7f5 ffbc 	bl	80005f8 <__aeabi_dmul>
 800a680:	4b76      	ldr	r3, [pc, #472]	@ (800a85c <_dtoa_r+0x5cc>)
 800a682:	2200      	movs	r2, #0
 800a684:	f7f5 fe02 	bl	800028c <__adddf3>
 800a688:	4605      	mov	r5, r0
 800a68a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a68e:	2c00      	cmp	r4, #0
 800a690:	f040 808d 	bne.w	800a7ae <_dtoa_r+0x51e>
 800a694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a698:	4b71      	ldr	r3, [pc, #452]	@ (800a860 <_dtoa_r+0x5d0>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	f7f5 fdf4 	bl	8000288 <__aeabi_dsub>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6a8:	462a      	mov	r2, r5
 800a6aa:	4633      	mov	r3, r6
 800a6ac:	f7f6 fa34 	bl	8000b18 <__aeabi_dcmpgt>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	f040 828b 	bne.w	800abcc <_dtoa_r+0x93c>
 800a6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6ba:	462a      	mov	r2, r5
 800a6bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a6c0:	f7f6 fa0c 	bl	8000adc <__aeabi_dcmplt>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	f040 8128 	bne.w	800a91a <_dtoa_r+0x68a>
 800a6ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a6ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a6d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f2c0 815a 	blt.w	800a98e <_dtoa_r+0x6fe>
 800a6da:	2f0e      	cmp	r7, #14
 800a6dc:	f300 8157 	bgt.w	800a98e <_dtoa_r+0x6fe>
 800a6e0:	4b5a      	ldr	r3, [pc, #360]	@ (800a84c <_dtoa_r+0x5bc>)
 800a6e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6e6:	ed93 7b00 	vldr	d7, [r3]
 800a6ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	ed8d 7b00 	vstr	d7, [sp]
 800a6f2:	da03      	bge.n	800a6fc <_dtoa_r+0x46c>
 800a6f4:	9b07      	ldr	r3, [sp, #28]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f340 8101 	ble.w	800a8fe <_dtoa_r+0x66e>
 800a6fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a700:	4656      	mov	r6, sl
 800a702:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a706:	4620      	mov	r0, r4
 800a708:	4629      	mov	r1, r5
 800a70a:	f7f6 f89f 	bl	800084c <__aeabi_ddiv>
 800a70e:	f7f6 fa23 	bl	8000b58 <__aeabi_d2iz>
 800a712:	4680      	mov	r8, r0
 800a714:	f7f5 ff06 	bl	8000524 <__aeabi_i2d>
 800a718:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a71c:	f7f5 ff6c 	bl	80005f8 <__aeabi_dmul>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	4620      	mov	r0, r4
 800a726:	4629      	mov	r1, r5
 800a728:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a72c:	f7f5 fdac 	bl	8000288 <__aeabi_dsub>
 800a730:	f806 4b01 	strb.w	r4, [r6], #1
 800a734:	9d07      	ldr	r5, [sp, #28]
 800a736:	eba6 040a 	sub.w	r4, r6, sl
 800a73a:	42a5      	cmp	r5, r4
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	f040 8117 	bne.w	800a972 <_dtoa_r+0x6e2>
 800a744:	f7f5 fda2 	bl	800028c <__adddf3>
 800a748:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a74c:	4604      	mov	r4, r0
 800a74e:	460d      	mov	r5, r1
 800a750:	f7f6 f9e2 	bl	8000b18 <__aeabi_dcmpgt>
 800a754:	2800      	cmp	r0, #0
 800a756:	f040 80f9 	bne.w	800a94c <_dtoa_r+0x6bc>
 800a75a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a75e:	4620      	mov	r0, r4
 800a760:	4629      	mov	r1, r5
 800a762:	f7f6 f9b1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a766:	b118      	cbz	r0, 800a770 <_dtoa_r+0x4e0>
 800a768:	f018 0f01 	tst.w	r8, #1
 800a76c:	f040 80ee 	bne.w	800a94c <_dtoa_r+0x6bc>
 800a770:	4649      	mov	r1, r9
 800a772:	4658      	mov	r0, fp
 800a774:	f000 fc90 	bl	800b098 <_Bfree>
 800a778:	2300      	movs	r3, #0
 800a77a:	7033      	strb	r3, [r6, #0]
 800a77c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a77e:	3701      	adds	r7, #1
 800a780:	601f      	str	r7, [r3, #0]
 800a782:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 831d 	beq.w	800adc4 <_dtoa_r+0xb34>
 800a78a:	601e      	str	r6, [r3, #0]
 800a78c:	e31a      	b.n	800adc4 <_dtoa_r+0xb34>
 800a78e:	07e2      	lsls	r2, r4, #31
 800a790:	d505      	bpl.n	800a79e <_dtoa_r+0x50e>
 800a792:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a796:	f7f5 ff2f 	bl	80005f8 <__aeabi_dmul>
 800a79a:	3601      	adds	r6, #1
 800a79c:	2301      	movs	r3, #1
 800a79e:	1064      	asrs	r4, r4, #1
 800a7a0:	3508      	adds	r5, #8
 800a7a2:	e73f      	b.n	800a624 <_dtoa_r+0x394>
 800a7a4:	2602      	movs	r6, #2
 800a7a6:	e742      	b.n	800a62e <_dtoa_r+0x39e>
 800a7a8:	9c07      	ldr	r4, [sp, #28]
 800a7aa:	9704      	str	r7, [sp, #16]
 800a7ac:	e761      	b.n	800a672 <_dtoa_r+0x3e2>
 800a7ae:	4b27      	ldr	r3, [pc, #156]	@ (800a84c <_dtoa_r+0x5bc>)
 800a7b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7ba:	4454      	add	r4, sl
 800a7bc:	2900      	cmp	r1, #0
 800a7be:	d053      	beq.n	800a868 <_dtoa_r+0x5d8>
 800a7c0:	4928      	ldr	r1, [pc, #160]	@ (800a864 <_dtoa_r+0x5d4>)
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	f7f6 f842 	bl	800084c <__aeabi_ddiv>
 800a7c8:	4633      	mov	r3, r6
 800a7ca:	462a      	mov	r2, r5
 800a7cc:	f7f5 fd5c 	bl	8000288 <__aeabi_dsub>
 800a7d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a7d4:	4656      	mov	r6, sl
 800a7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7da:	f7f6 f9bd 	bl	8000b58 <__aeabi_d2iz>
 800a7de:	4605      	mov	r5, r0
 800a7e0:	f7f5 fea0 	bl	8000524 <__aeabi_i2d>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ec:	f7f5 fd4c 	bl	8000288 <__aeabi_dsub>
 800a7f0:	3530      	adds	r5, #48	@ 0x30
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7fa:	f806 5b01 	strb.w	r5, [r6], #1
 800a7fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a802:	f7f6 f96b 	bl	8000adc <__aeabi_dcmplt>
 800a806:	2800      	cmp	r0, #0
 800a808:	d171      	bne.n	800a8ee <_dtoa_r+0x65e>
 800a80a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a80e:	4911      	ldr	r1, [pc, #68]	@ (800a854 <_dtoa_r+0x5c4>)
 800a810:	2000      	movs	r0, #0
 800a812:	f7f5 fd39 	bl	8000288 <__aeabi_dsub>
 800a816:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a81a:	f7f6 f95f 	bl	8000adc <__aeabi_dcmplt>
 800a81e:	2800      	cmp	r0, #0
 800a820:	f040 8095 	bne.w	800a94e <_dtoa_r+0x6be>
 800a824:	42a6      	cmp	r6, r4
 800a826:	f43f af50 	beq.w	800a6ca <_dtoa_r+0x43a>
 800a82a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a82e:	4b0a      	ldr	r3, [pc, #40]	@ (800a858 <_dtoa_r+0x5c8>)
 800a830:	2200      	movs	r2, #0
 800a832:	f7f5 fee1 	bl	80005f8 <__aeabi_dmul>
 800a836:	4b08      	ldr	r3, [pc, #32]	@ (800a858 <_dtoa_r+0x5c8>)
 800a838:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a83c:	2200      	movs	r2, #0
 800a83e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a842:	f7f5 fed9 	bl	80005f8 <__aeabi_dmul>
 800a846:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a84a:	e7c4      	b.n	800a7d6 <_dtoa_r+0x546>
 800a84c:	0800c368 	.word	0x0800c368
 800a850:	0800c340 	.word	0x0800c340
 800a854:	3ff00000 	.word	0x3ff00000
 800a858:	40240000 	.word	0x40240000
 800a85c:	401c0000 	.word	0x401c0000
 800a860:	40140000 	.word	0x40140000
 800a864:	3fe00000 	.word	0x3fe00000
 800a868:	4631      	mov	r1, r6
 800a86a:	4628      	mov	r0, r5
 800a86c:	f7f5 fec4 	bl	80005f8 <__aeabi_dmul>
 800a870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a874:	9415      	str	r4, [sp, #84]	@ 0x54
 800a876:	4656      	mov	r6, sl
 800a878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a87c:	f7f6 f96c 	bl	8000b58 <__aeabi_d2iz>
 800a880:	4605      	mov	r5, r0
 800a882:	f7f5 fe4f 	bl	8000524 <__aeabi_i2d>
 800a886:	4602      	mov	r2, r0
 800a888:	460b      	mov	r3, r1
 800a88a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a88e:	f7f5 fcfb 	bl	8000288 <__aeabi_dsub>
 800a892:	3530      	adds	r5, #48	@ 0x30
 800a894:	f806 5b01 	strb.w	r5, [r6], #1
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	42a6      	cmp	r6, r4
 800a89e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8a2:	f04f 0200 	mov.w	r2, #0
 800a8a6:	d124      	bne.n	800a8f2 <_dtoa_r+0x662>
 800a8a8:	4bac      	ldr	r3, [pc, #688]	@ (800ab5c <_dtoa_r+0x8cc>)
 800a8aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a8ae:	f7f5 fced 	bl	800028c <__adddf3>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8ba:	f7f6 f92d 	bl	8000b18 <__aeabi_dcmpgt>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d145      	bne.n	800a94e <_dtoa_r+0x6be>
 800a8c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a8c6:	49a5      	ldr	r1, [pc, #660]	@ (800ab5c <_dtoa_r+0x8cc>)
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	f7f5 fcdd 	bl	8000288 <__aeabi_dsub>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8d6:	f7f6 f901 	bl	8000adc <__aeabi_dcmplt>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	f43f aef5 	beq.w	800a6ca <_dtoa_r+0x43a>
 800a8e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a8e2:	1e73      	subs	r3, r6, #1
 800a8e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a8e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a8ea:	2b30      	cmp	r3, #48	@ 0x30
 800a8ec:	d0f8      	beq.n	800a8e0 <_dtoa_r+0x650>
 800a8ee:	9f04      	ldr	r7, [sp, #16]
 800a8f0:	e73e      	b.n	800a770 <_dtoa_r+0x4e0>
 800a8f2:	4b9b      	ldr	r3, [pc, #620]	@ (800ab60 <_dtoa_r+0x8d0>)
 800a8f4:	f7f5 fe80 	bl	80005f8 <__aeabi_dmul>
 800a8f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8fc:	e7bc      	b.n	800a878 <_dtoa_r+0x5e8>
 800a8fe:	d10c      	bne.n	800a91a <_dtoa_r+0x68a>
 800a900:	4b98      	ldr	r3, [pc, #608]	@ (800ab64 <_dtoa_r+0x8d4>)
 800a902:	2200      	movs	r2, #0
 800a904:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a908:	f7f5 fe76 	bl	80005f8 <__aeabi_dmul>
 800a90c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a910:	f7f6 f8f8 	bl	8000b04 <__aeabi_dcmpge>
 800a914:	2800      	cmp	r0, #0
 800a916:	f000 8157 	beq.w	800abc8 <_dtoa_r+0x938>
 800a91a:	2400      	movs	r4, #0
 800a91c:	4625      	mov	r5, r4
 800a91e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a920:	43db      	mvns	r3, r3
 800a922:	9304      	str	r3, [sp, #16]
 800a924:	4656      	mov	r6, sl
 800a926:	2700      	movs	r7, #0
 800a928:	4621      	mov	r1, r4
 800a92a:	4658      	mov	r0, fp
 800a92c:	f000 fbb4 	bl	800b098 <_Bfree>
 800a930:	2d00      	cmp	r5, #0
 800a932:	d0dc      	beq.n	800a8ee <_dtoa_r+0x65e>
 800a934:	b12f      	cbz	r7, 800a942 <_dtoa_r+0x6b2>
 800a936:	42af      	cmp	r7, r5
 800a938:	d003      	beq.n	800a942 <_dtoa_r+0x6b2>
 800a93a:	4639      	mov	r1, r7
 800a93c:	4658      	mov	r0, fp
 800a93e:	f000 fbab 	bl	800b098 <_Bfree>
 800a942:	4629      	mov	r1, r5
 800a944:	4658      	mov	r0, fp
 800a946:	f000 fba7 	bl	800b098 <_Bfree>
 800a94a:	e7d0      	b.n	800a8ee <_dtoa_r+0x65e>
 800a94c:	9704      	str	r7, [sp, #16]
 800a94e:	4633      	mov	r3, r6
 800a950:	461e      	mov	r6, r3
 800a952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a956:	2a39      	cmp	r2, #57	@ 0x39
 800a958:	d107      	bne.n	800a96a <_dtoa_r+0x6da>
 800a95a:	459a      	cmp	sl, r3
 800a95c:	d1f8      	bne.n	800a950 <_dtoa_r+0x6c0>
 800a95e:	9a04      	ldr	r2, [sp, #16]
 800a960:	3201      	adds	r2, #1
 800a962:	9204      	str	r2, [sp, #16]
 800a964:	2230      	movs	r2, #48	@ 0x30
 800a966:	f88a 2000 	strb.w	r2, [sl]
 800a96a:	781a      	ldrb	r2, [r3, #0]
 800a96c:	3201      	adds	r2, #1
 800a96e:	701a      	strb	r2, [r3, #0]
 800a970:	e7bd      	b.n	800a8ee <_dtoa_r+0x65e>
 800a972:	4b7b      	ldr	r3, [pc, #492]	@ (800ab60 <_dtoa_r+0x8d0>)
 800a974:	2200      	movs	r2, #0
 800a976:	f7f5 fe3f 	bl	80005f8 <__aeabi_dmul>
 800a97a:	2200      	movs	r2, #0
 800a97c:	2300      	movs	r3, #0
 800a97e:	4604      	mov	r4, r0
 800a980:	460d      	mov	r5, r1
 800a982:	f7f6 f8a1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a986:	2800      	cmp	r0, #0
 800a988:	f43f aebb 	beq.w	800a702 <_dtoa_r+0x472>
 800a98c:	e6f0      	b.n	800a770 <_dtoa_r+0x4e0>
 800a98e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a990:	2a00      	cmp	r2, #0
 800a992:	f000 80db 	beq.w	800ab4c <_dtoa_r+0x8bc>
 800a996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a998:	2a01      	cmp	r2, #1
 800a99a:	f300 80bf 	bgt.w	800ab1c <_dtoa_r+0x88c>
 800a99e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a9a0:	2a00      	cmp	r2, #0
 800a9a2:	f000 80b7 	beq.w	800ab14 <_dtoa_r+0x884>
 800a9a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a9aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a9ac:	4646      	mov	r6, r8
 800a9ae:	9a08      	ldr	r2, [sp, #32]
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	441a      	add	r2, r3
 800a9b4:	4658      	mov	r0, fp
 800a9b6:	4498      	add	r8, r3
 800a9b8:	9208      	str	r2, [sp, #32]
 800a9ba:	f000 fc21 	bl	800b200 <__i2b>
 800a9be:	4605      	mov	r5, r0
 800a9c0:	b15e      	cbz	r6, 800a9da <_dtoa_r+0x74a>
 800a9c2:	9b08      	ldr	r3, [sp, #32]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	dd08      	ble.n	800a9da <_dtoa_r+0x74a>
 800a9c8:	42b3      	cmp	r3, r6
 800a9ca:	9a08      	ldr	r2, [sp, #32]
 800a9cc:	bfa8      	it	ge
 800a9ce:	4633      	movge	r3, r6
 800a9d0:	eba8 0803 	sub.w	r8, r8, r3
 800a9d4:	1af6      	subs	r6, r6, r3
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	9308      	str	r3, [sp, #32]
 800a9da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9dc:	b1f3      	cbz	r3, 800aa1c <_dtoa_r+0x78c>
 800a9de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f000 80b7 	beq.w	800ab54 <_dtoa_r+0x8c4>
 800a9e6:	b18c      	cbz	r4, 800aa0c <_dtoa_r+0x77c>
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	4622      	mov	r2, r4
 800a9ec:	4658      	mov	r0, fp
 800a9ee:	f000 fcc7 	bl	800b380 <__pow5mult>
 800a9f2:	464a      	mov	r2, r9
 800a9f4:	4601      	mov	r1, r0
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	4658      	mov	r0, fp
 800a9fa:	f000 fc17 	bl	800b22c <__multiply>
 800a9fe:	4649      	mov	r1, r9
 800aa00:	9004      	str	r0, [sp, #16]
 800aa02:	4658      	mov	r0, fp
 800aa04:	f000 fb48 	bl	800b098 <_Bfree>
 800aa08:	9b04      	ldr	r3, [sp, #16]
 800aa0a:	4699      	mov	r9, r3
 800aa0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa0e:	1b1a      	subs	r2, r3, r4
 800aa10:	d004      	beq.n	800aa1c <_dtoa_r+0x78c>
 800aa12:	4649      	mov	r1, r9
 800aa14:	4658      	mov	r0, fp
 800aa16:	f000 fcb3 	bl	800b380 <__pow5mult>
 800aa1a:	4681      	mov	r9, r0
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	4658      	mov	r0, fp
 800aa20:	f000 fbee 	bl	800b200 <__i2b>
 800aa24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa26:	4604      	mov	r4, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 81cf 	beq.w	800adcc <_dtoa_r+0xb3c>
 800aa2e:	461a      	mov	r2, r3
 800aa30:	4601      	mov	r1, r0
 800aa32:	4658      	mov	r0, fp
 800aa34:	f000 fca4 	bl	800b380 <__pow5mult>
 800aa38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	f300 8095 	bgt.w	800ab6c <_dtoa_r+0x8dc>
 800aa42:	9b02      	ldr	r3, [sp, #8]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f040 8087 	bne.w	800ab58 <_dtoa_r+0x8c8>
 800aa4a:	9b03      	ldr	r3, [sp, #12]
 800aa4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f040 8089 	bne.w	800ab68 <_dtoa_r+0x8d8>
 800aa56:	9b03      	ldr	r3, [sp, #12]
 800aa58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa5c:	0d1b      	lsrs	r3, r3, #20
 800aa5e:	051b      	lsls	r3, r3, #20
 800aa60:	b12b      	cbz	r3, 800aa6e <_dtoa_r+0x7de>
 800aa62:	9b08      	ldr	r3, [sp, #32]
 800aa64:	3301      	adds	r3, #1
 800aa66:	9308      	str	r3, [sp, #32]
 800aa68:	f108 0801 	add.w	r8, r8, #1
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f000 81b0 	beq.w	800add8 <_dtoa_r+0xb48>
 800aa78:	6923      	ldr	r3, [r4, #16]
 800aa7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa7e:	6918      	ldr	r0, [r3, #16]
 800aa80:	f000 fb72 	bl	800b168 <__hi0bits>
 800aa84:	f1c0 0020 	rsb	r0, r0, #32
 800aa88:	9b08      	ldr	r3, [sp, #32]
 800aa8a:	4418      	add	r0, r3
 800aa8c:	f010 001f 	ands.w	r0, r0, #31
 800aa90:	d077      	beq.n	800ab82 <_dtoa_r+0x8f2>
 800aa92:	f1c0 0320 	rsb	r3, r0, #32
 800aa96:	2b04      	cmp	r3, #4
 800aa98:	dd6b      	ble.n	800ab72 <_dtoa_r+0x8e2>
 800aa9a:	9b08      	ldr	r3, [sp, #32]
 800aa9c:	f1c0 001c 	rsb	r0, r0, #28
 800aaa0:	4403      	add	r3, r0
 800aaa2:	4480      	add	r8, r0
 800aaa4:	4406      	add	r6, r0
 800aaa6:	9308      	str	r3, [sp, #32]
 800aaa8:	f1b8 0f00 	cmp.w	r8, #0
 800aaac:	dd05      	ble.n	800aaba <_dtoa_r+0x82a>
 800aaae:	4649      	mov	r1, r9
 800aab0:	4642      	mov	r2, r8
 800aab2:	4658      	mov	r0, fp
 800aab4:	f000 fcbe 	bl	800b434 <__lshift>
 800aab8:	4681      	mov	r9, r0
 800aaba:	9b08      	ldr	r3, [sp, #32]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dd05      	ble.n	800aacc <_dtoa_r+0x83c>
 800aac0:	4621      	mov	r1, r4
 800aac2:	461a      	mov	r2, r3
 800aac4:	4658      	mov	r0, fp
 800aac6:	f000 fcb5 	bl	800b434 <__lshift>
 800aaca:	4604      	mov	r4, r0
 800aacc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d059      	beq.n	800ab86 <_dtoa_r+0x8f6>
 800aad2:	4621      	mov	r1, r4
 800aad4:	4648      	mov	r0, r9
 800aad6:	f000 fd19 	bl	800b50c <__mcmp>
 800aada:	2800      	cmp	r0, #0
 800aadc:	da53      	bge.n	800ab86 <_dtoa_r+0x8f6>
 800aade:	1e7b      	subs	r3, r7, #1
 800aae0:	9304      	str	r3, [sp, #16]
 800aae2:	4649      	mov	r1, r9
 800aae4:	2300      	movs	r3, #0
 800aae6:	220a      	movs	r2, #10
 800aae8:	4658      	mov	r0, fp
 800aaea:	f000 faf7 	bl	800b0dc <__multadd>
 800aaee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aaf0:	4681      	mov	r9, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f000 8172 	beq.w	800addc <_dtoa_r+0xb4c>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	4629      	mov	r1, r5
 800aafc:	220a      	movs	r2, #10
 800aafe:	4658      	mov	r0, fp
 800ab00:	f000 faec 	bl	800b0dc <__multadd>
 800ab04:	9b00      	ldr	r3, [sp, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	4605      	mov	r5, r0
 800ab0a:	dc67      	bgt.n	800abdc <_dtoa_r+0x94c>
 800ab0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	dc41      	bgt.n	800ab96 <_dtoa_r+0x906>
 800ab12:	e063      	b.n	800abdc <_dtoa_r+0x94c>
 800ab14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ab1a:	e746      	b.n	800a9aa <_dtoa_r+0x71a>
 800ab1c:	9b07      	ldr	r3, [sp, #28]
 800ab1e:	1e5c      	subs	r4, r3, #1
 800ab20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab22:	42a3      	cmp	r3, r4
 800ab24:	bfbf      	itttt	lt
 800ab26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ab28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ab2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ab2c:	1ae3      	sublt	r3, r4, r3
 800ab2e:	bfb4      	ite	lt
 800ab30:	18d2      	addlt	r2, r2, r3
 800ab32:	1b1c      	subge	r4, r3, r4
 800ab34:	9b07      	ldr	r3, [sp, #28]
 800ab36:	bfbc      	itt	lt
 800ab38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ab3a:	2400      	movlt	r4, #0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	bfb5      	itete	lt
 800ab40:	eba8 0603 	sublt.w	r6, r8, r3
 800ab44:	9b07      	ldrge	r3, [sp, #28]
 800ab46:	2300      	movlt	r3, #0
 800ab48:	4646      	movge	r6, r8
 800ab4a:	e730      	b.n	800a9ae <_dtoa_r+0x71e>
 800ab4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ab50:	4646      	mov	r6, r8
 800ab52:	e735      	b.n	800a9c0 <_dtoa_r+0x730>
 800ab54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab56:	e75c      	b.n	800aa12 <_dtoa_r+0x782>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	e788      	b.n	800aa6e <_dtoa_r+0x7de>
 800ab5c:	3fe00000 	.word	0x3fe00000
 800ab60:	40240000 	.word	0x40240000
 800ab64:	40140000 	.word	0x40140000
 800ab68:	9b02      	ldr	r3, [sp, #8]
 800ab6a:	e780      	b.n	800aa6e <_dtoa_r+0x7de>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab70:	e782      	b.n	800aa78 <_dtoa_r+0x7e8>
 800ab72:	d099      	beq.n	800aaa8 <_dtoa_r+0x818>
 800ab74:	9a08      	ldr	r2, [sp, #32]
 800ab76:	331c      	adds	r3, #28
 800ab78:	441a      	add	r2, r3
 800ab7a:	4498      	add	r8, r3
 800ab7c:	441e      	add	r6, r3
 800ab7e:	9208      	str	r2, [sp, #32]
 800ab80:	e792      	b.n	800aaa8 <_dtoa_r+0x818>
 800ab82:	4603      	mov	r3, r0
 800ab84:	e7f6      	b.n	800ab74 <_dtoa_r+0x8e4>
 800ab86:	9b07      	ldr	r3, [sp, #28]
 800ab88:	9704      	str	r7, [sp, #16]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	dc20      	bgt.n	800abd0 <_dtoa_r+0x940>
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	dd1e      	ble.n	800abd4 <_dtoa_r+0x944>
 800ab96:	9b00      	ldr	r3, [sp, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f47f aec0 	bne.w	800a91e <_dtoa_r+0x68e>
 800ab9e:	4621      	mov	r1, r4
 800aba0:	2205      	movs	r2, #5
 800aba2:	4658      	mov	r0, fp
 800aba4:	f000 fa9a 	bl	800b0dc <__multadd>
 800aba8:	4601      	mov	r1, r0
 800abaa:	4604      	mov	r4, r0
 800abac:	4648      	mov	r0, r9
 800abae:	f000 fcad 	bl	800b50c <__mcmp>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	f77f aeb3 	ble.w	800a91e <_dtoa_r+0x68e>
 800abb8:	4656      	mov	r6, sl
 800abba:	2331      	movs	r3, #49	@ 0x31
 800abbc:	f806 3b01 	strb.w	r3, [r6], #1
 800abc0:	9b04      	ldr	r3, [sp, #16]
 800abc2:	3301      	adds	r3, #1
 800abc4:	9304      	str	r3, [sp, #16]
 800abc6:	e6ae      	b.n	800a926 <_dtoa_r+0x696>
 800abc8:	9c07      	ldr	r4, [sp, #28]
 800abca:	9704      	str	r7, [sp, #16]
 800abcc:	4625      	mov	r5, r4
 800abce:	e7f3      	b.n	800abb8 <_dtoa_r+0x928>
 800abd0:	9b07      	ldr	r3, [sp, #28]
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f000 8104 	beq.w	800ade4 <_dtoa_r+0xb54>
 800abdc:	2e00      	cmp	r6, #0
 800abde:	dd05      	ble.n	800abec <_dtoa_r+0x95c>
 800abe0:	4629      	mov	r1, r5
 800abe2:	4632      	mov	r2, r6
 800abe4:	4658      	mov	r0, fp
 800abe6:	f000 fc25 	bl	800b434 <__lshift>
 800abea:	4605      	mov	r5, r0
 800abec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d05a      	beq.n	800aca8 <_dtoa_r+0xa18>
 800abf2:	6869      	ldr	r1, [r5, #4]
 800abf4:	4658      	mov	r0, fp
 800abf6:	f000 fa0f 	bl	800b018 <_Balloc>
 800abfa:	4606      	mov	r6, r0
 800abfc:	b928      	cbnz	r0, 800ac0a <_dtoa_r+0x97a>
 800abfe:	4b84      	ldr	r3, [pc, #528]	@ (800ae10 <_dtoa_r+0xb80>)
 800ac00:	4602      	mov	r2, r0
 800ac02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ac06:	f7ff bb5a 	b.w	800a2be <_dtoa_r+0x2e>
 800ac0a:	692a      	ldr	r2, [r5, #16]
 800ac0c:	3202      	adds	r2, #2
 800ac0e:	0092      	lsls	r2, r2, #2
 800ac10:	f105 010c 	add.w	r1, r5, #12
 800ac14:	300c      	adds	r0, #12
 800ac16:	f7ff faa2 	bl	800a15e <memcpy>
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	4658      	mov	r0, fp
 800ac20:	f000 fc08 	bl	800b434 <__lshift>
 800ac24:	f10a 0301 	add.w	r3, sl, #1
 800ac28:	9307      	str	r3, [sp, #28]
 800ac2a:	9b00      	ldr	r3, [sp, #0]
 800ac2c:	4453      	add	r3, sl
 800ac2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac30:	9b02      	ldr	r3, [sp, #8]
 800ac32:	f003 0301 	and.w	r3, r3, #1
 800ac36:	462f      	mov	r7, r5
 800ac38:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	9b07      	ldr	r3, [sp, #28]
 800ac3e:	4621      	mov	r1, r4
 800ac40:	3b01      	subs	r3, #1
 800ac42:	4648      	mov	r0, r9
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	f7ff fa98 	bl	800a17a <quorem>
 800ac4a:	4639      	mov	r1, r7
 800ac4c:	9002      	str	r0, [sp, #8]
 800ac4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac52:	4648      	mov	r0, r9
 800ac54:	f000 fc5a 	bl	800b50c <__mcmp>
 800ac58:	462a      	mov	r2, r5
 800ac5a:	9008      	str	r0, [sp, #32]
 800ac5c:	4621      	mov	r1, r4
 800ac5e:	4658      	mov	r0, fp
 800ac60:	f000 fc70 	bl	800b544 <__mdiff>
 800ac64:	68c2      	ldr	r2, [r0, #12]
 800ac66:	4606      	mov	r6, r0
 800ac68:	bb02      	cbnz	r2, 800acac <_dtoa_r+0xa1c>
 800ac6a:	4601      	mov	r1, r0
 800ac6c:	4648      	mov	r0, r9
 800ac6e:	f000 fc4d 	bl	800b50c <__mcmp>
 800ac72:	4602      	mov	r2, r0
 800ac74:	4631      	mov	r1, r6
 800ac76:	4658      	mov	r0, fp
 800ac78:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac7a:	f000 fa0d 	bl	800b098 <_Bfree>
 800ac7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac82:	9e07      	ldr	r6, [sp, #28]
 800ac84:	ea43 0102 	orr.w	r1, r3, r2
 800ac88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac8a:	4319      	orrs	r1, r3
 800ac8c:	d110      	bne.n	800acb0 <_dtoa_r+0xa20>
 800ac8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac92:	d029      	beq.n	800ace8 <_dtoa_r+0xa58>
 800ac94:	9b08      	ldr	r3, [sp, #32]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	dd02      	ble.n	800aca0 <_dtoa_r+0xa10>
 800ac9a:	9b02      	ldr	r3, [sp, #8]
 800ac9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aca0:	9b00      	ldr	r3, [sp, #0]
 800aca2:	f883 8000 	strb.w	r8, [r3]
 800aca6:	e63f      	b.n	800a928 <_dtoa_r+0x698>
 800aca8:	4628      	mov	r0, r5
 800acaa:	e7bb      	b.n	800ac24 <_dtoa_r+0x994>
 800acac:	2201      	movs	r2, #1
 800acae:	e7e1      	b.n	800ac74 <_dtoa_r+0x9e4>
 800acb0:	9b08      	ldr	r3, [sp, #32]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	db04      	blt.n	800acc0 <_dtoa_r+0xa30>
 800acb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800acb8:	430b      	orrs	r3, r1
 800acba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800acbc:	430b      	orrs	r3, r1
 800acbe:	d120      	bne.n	800ad02 <_dtoa_r+0xa72>
 800acc0:	2a00      	cmp	r2, #0
 800acc2:	dded      	ble.n	800aca0 <_dtoa_r+0xa10>
 800acc4:	4649      	mov	r1, r9
 800acc6:	2201      	movs	r2, #1
 800acc8:	4658      	mov	r0, fp
 800acca:	f000 fbb3 	bl	800b434 <__lshift>
 800acce:	4621      	mov	r1, r4
 800acd0:	4681      	mov	r9, r0
 800acd2:	f000 fc1b 	bl	800b50c <__mcmp>
 800acd6:	2800      	cmp	r0, #0
 800acd8:	dc03      	bgt.n	800ace2 <_dtoa_r+0xa52>
 800acda:	d1e1      	bne.n	800aca0 <_dtoa_r+0xa10>
 800acdc:	f018 0f01 	tst.w	r8, #1
 800ace0:	d0de      	beq.n	800aca0 <_dtoa_r+0xa10>
 800ace2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ace6:	d1d8      	bne.n	800ac9a <_dtoa_r+0xa0a>
 800ace8:	9a00      	ldr	r2, [sp, #0]
 800acea:	2339      	movs	r3, #57	@ 0x39
 800acec:	7013      	strb	r3, [r2, #0]
 800acee:	4633      	mov	r3, r6
 800acf0:	461e      	mov	r6, r3
 800acf2:	3b01      	subs	r3, #1
 800acf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800acf8:	2a39      	cmp	r2, #57	@ 0x39
 800acfa:	d052      	beq.n	800ada2 <_dtoa_r+0xb12>
 800acfc:	3201      	adds	r2, #1
 800acfe:	701a      	strb	r2, [r3, #0]
 800ad00:	e612      	b.n	800a928 <_dtoa_r+0x698>
 800ad02:	2a00      	cmp	r2, #0
 800ad04:	dd07      	ble.n	800ad16 <_dtoa_r+0xa86>
 800ad06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ad0a:	d0ed      	beq.n	800ace8 <_dtoa_r+0xa58>
 800ad0c:	9a00      	ldr	r2, [sp, #0]
 800ad0e:	f108 0301 	add.w	r3, r8, #1
 800ad12:	7013      	strb	r3, [r2, #0]
 800ad14:	e608      	b.n	800a928 <_dtoa_r+0x698>
 800ad16:	9b07      	ldr	r3, [sp, #28]
 800ad18:	9a07      	ldr	r2, [sp, #28]
 800ad1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ad1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d028      	beq.n	800ad76 <_dtoa_r+0xae6>
 800ad24:	4649      	mov	r1, r9
 800ad26:	2300      	movs	r3, #0
 800ad28:	220a      	movs	r2, #10
 800ad2a:	4658      	mov	r0, fp
 800ad2c:	f000 f9d6 	bl	800b0dc <__multadd>
 800ad30:	42af      	cmp	r7, r5
 800ad32:	4681      	mov	r9, r0
 800ad34:	f04f 0300 	mov.w	r3, #0
 800ad38:	f04f 020a 	mov.w	r2, #10
 800ad3c:	4639      	mov	r1, r7
 800ad3e:	4658      	mov	r0, fp
 800ad40:	d107      	bne.n	800ad52 <_dtoa_r+0xac2>
 800ad42:	f000 f9cb 	bl	800b0dc <__multadd>
 800ad46:	4607      	mov	r7, r0
 800ad48:	4605      	mov	r5, r0
 800ad4a:	9b07      	ldr	r3, [sp, #28]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	9307      	str	r3, [sp, #28]
 800ad50:	e774      	b.n	800ac3c <_dtoa_r+0x9ac>
 800ad52:	f000 f9c3 	bl	800b0dc <__multadd>
 800ad56:	4629      	mov	r1, r5
 800ad58:	4607      	mov	r7, r0
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	220a      	movs	r2, #10
 800ad5e:	4658      	mov	r0, fp
 800ad60:	f000 f9bc 	bl	800b0dc <__multadd>
 800ad64:	4605      	mov	r5, r0
 800ad66:	e7f0      	b.n	800ad4a <_dtoa_r+0xaba>
 800ad68:	9b00      	ldr	r3, [sp, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	bfcc      	ite	gt
 800ad6e:	461e      	movgt	r6, r3
 800ad70:	2601      	movle	r6, #1
 800ad72:	4456      	add	r6, sl
 800ad74:	2700      	movs	r7, #0
 800ad76:	4649      	mov	r1, r9
 800ad78:	2201      	movs	r2, #1
 800ad7a:	4658      	mov	r0, fp
 800ad7c:	f000 fb5a 	bl	800b434 <__lshift>
 800ad80:	4621      	mov	r1, r4
 800ad82:	4681      	mov	r9, r0
 800ad84:	f000 fbc2 	bl	800b50c <__mcmp>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	dcb0      	bgt.n	800acee <_dtoa_r+0xa5e>
 800ad8c:	d102      	bne.n	800ad94 <_dtoa_r+0xb04>
 800ad8e:	f018 0f01 	tst.w	r8, #1
 800ad92:	d1ac      	bne.n	800acee <_dtoa_r+0xa5e>
 800ad94:	4633      	mov	r3, r6
 800ad96:	461e      	mov	r6, r3
 800ad98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad9c:	2a30      	cmp	r2, #48	@ 0x30
 800ad9e:	d0fa      	beq.n	800ad96 <_dtoa_r+0xb06>
 800ada0:	e5c2      	b.n	800a928 <_dtoa_r+0x698>
 800ada2:	459a      	cmp	sl, r3
 800ada4:	d1a4      	bne.n	800acf0 <_dtoa_r+0xa60>
 800ada6:	9b04      	ldr	r3, [sp, #16]
 800ada8:	3301      	adds	r3, #1
 800adaa:	9304      	str	r3, [sp, #16]
 800adac:	2331      	movs	r3, #49	@ 0x31
 800adae:	f88a 3000 	strb.w	r3, [sl]
 800adb2:	e5b9      	b.n	800a928 <_dtoa_r+0x698>
 800adb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800adb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ae14 <_dtoa_r+0xb84>
 800adba:	b11b      	cbz	r3, 800adc4 <_dtoa_r+0xb34>
 800adbc:	f10a 0308 	add.w	r3, sl, #8
 800adc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800adc2:	6013      	str	r3, [r2, #0]
 800adc4:	4650      	mov	r0, sl
 800adc6:	b019      	add	sp, #100	@ 0x64
 800adc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adce:	2b01      	cmp	r3, #1
 800add0:	f77f ae37 	ble.w	800aa42 <_dtoa_r+0x7b2>
 800add4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800add6:	930a      	str	r3, [sp, #40]	@ 0x28
 800add8:	2001      	movs	r0, #1
 800adda:	e655      	b.n	800aa88 <_dtoa_r+0x7f8>
 800addc:	9b00      	ldr	r3, [sp, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	f77f aed6 	ble.w	800ab90 <_dtoa_r+0x900>
 800ade4:	4656      	mov	r6, sl
 800ade6:	4621      	mov	r1, r4
 800ade8:	4648      	mov	r0, r9
 800adea:	f7ff f9c6 	bl	800a17a <quorem>
 800adee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800adf2:	f806 8b01 	strb.w	r8, [r6], #1
 800adf6:	9b00      	ldr	r3, [sp, #0]
 800adf8:	eba6 020a 	sub.w	r2, r6, sl
 800adfc:	4293      	cmp	r3, r2
 800adfe:	ddb3      	ble.n	800ad68 <_dtoa_r+0xad8>
 800ae00:	4649      	mov	r1, r9
 800ae02:	2300      	movs	r3, #0
 800ae04:	220a      	movs	r2, #10
 800ae06:	4658      	mov	r0, fp
 800ae08:	f000 f968 	bl	800b0dc <__multadd>
 800ae0c:	4681      	mov	r9, r0
 800ae0e:	e7ea      	b.n	800ade6 <_dtoa_r+0xb56>
 800ae10:	0800c2c8 	.word	0x0800c2c8
 800ae14:	0800c24c 	.word	0x0800c24c

0800ae18 <_free_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	2900      	cmp	r1, #0
 800ae1e:	d041      	beq.n	800aea4 <_free_r+0x8c>
 800ae20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae24:	1f0c      	subs	r4, r1, #4
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	bfb8      	it	lt
 800ae2a:	18e4      	addlt	r4, r4, r3
 800ae2c:	f000 f8e8 	bl	800b000 <__malloc_lock>
 800ae30:	4a1d      	ldr	r2, [pc, #116]	@ (800aea8 <_free_r+0x90>)
 800ae32:	6813      	ldr	r3, [r2, #0]
 800ae34:	b933      	cbnz	r3, 800ae44 <_free_r+0x2c>
 800ae36:	6063      	str	r3, [r4, #4]
 800ae38:	6014      	str	r4, [r2, #0]
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae40:	f000 b8e4 	b.w	800b00c <__malloc_unlock>
 800ae44:	42a3      	cmp	r3, r4
 800ae46:	d908      	bls.n	800ae5a <_free_r+0x42>
 800ae48:	6820      	ldr	r0, [r4, #0]
 800ae4a:	1821      	adds	r1, r4, r0
 800ae4c:	428b      	cmp	r3, r1
 800ae4e:	bf01      	itttt	eq
 800ae50:	6819      	ldreq	r1, [r3, #0]
 800ae52:	685b      	ldreq	r3, [r3, #4]
 800ae54:	1809      	addeq	r1, r1, r0
 800ae56:	6021      	streq	r1, [r4, #0]
 800ae58:	e7ed      	b.n	800ae36 <_free_r+0x1e>
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	b10b      	cbz	r3, 800ae64 <_free_r+0x4c>
 800ae60:	42a3      	cmp	r3, r4
 800ae62:	d9fa      	bls.n	800ae5a <_free_r+0x42>
 800ae64:	6811      	ldr	r1, [r2, #0]
 800ae66:	1850      	adds	r0, r2, r1
 800ae68:	42a0      	cmp	r0, r4
 800ae6a:	d10b      	bne.n	800ae84 <_free_r+0x6c>
 800ae6c:	6820      	ldr	r0, [r4, #0]
 800ae6e:	4401      	add	r1, r0
 800ae70:	1850      	adds	r0, r2, r1
 800ae72:	4283      	cmp	r3, r0
 800ae74:	6011      	str	r1, [r2, #0]
 800ae76:	d1e0      	bne.n	800ae3a <_free_r+0x22>
 800ae78:	6818      	ldr	r0, [r3, #0]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	6053      	str	r3, [r2, #4]
 800ae7e:	4408      	add	r0, r1
 800ae80:	6010      	str	r0, [r2, #0]
 800ae82:	e7da      	b.n	800ae3a <_free_r+0x22>
 800ae84:	d902      	bls.n	800ae8c <_free_r+0x74>
 800ae86:	230c      	movs	r3, #12
 800ae88:	602b      	str	r3, [r5, #0]
 800ae8a:	e7d6      	b.n	800ae3a <_free_r+0x22>
 800ae8c:	6820      	ldr	r0, [r4, #0]
 800ae8e:	1821      	adds	r1, r4, r0
 800ae90:	428b      	cmp	r3, r1
 800ae92:	bf04      	itt	eq
 800ae94:	6819      	ldreq	r1, [r3, #0]
 800ae96:	685b      	ldreq	r3, [r3, #4]
 800ae98:	6063      	str	r3, [r4, #4]
 800ae9a:	bf04      	itt	eq
 800ae9c:	1809      	addeq	r1, r1, r0
 800ae9e:	6021      	streq	r1, [r4, #0]
 800aea0:	6054      	str	r4, [r2, #4]
 800aea2:	e7ca      	b.n	800ae3a <_free_r+0x22>
 800aea4:	bd38      	pop	{r3, r4, r5, pc}
 800aea6:	bf00      	nop
 800aea8:	200156d4 	.word	0x200156d4

0800aeac <malloc>:
 800aeac:	4b02      	ldr	r3, [pc, #8]	@ (800aeb8 <malloc+0xc>)
 800aeae:	4601      	mov	r1, r0
 800aeb0:	6818      	ldr	r0, [r3, #0]
 800aeb2:	f000 b825 	b.w	800af00 <_malloc_r>
 800aeb6:	bf00      	nop
 800aeb8:	20000020 	.word	0x20000020

0800aebc <sbrk_aligned>:
 800aebc:	b570      	push	{r4, r5, r6, lr}
 800aebe:	4e0f      	ldr	r6, [pc, #60]	@ (800aefc <sbrk_aligned+0x40>)
 800aec0:	460c      	mov	r4, r1
 800aec2:	6831      	ldr	r1, [r6, #0]
 800aec4:	4605      	mov	r5, r0
 800aec6:	b911      	cbnz	r1, 800aece <sbrk_aligned+0x12>
 800aec8:	f001 f80c 	bl	800bee4 <_sbrk_r>
 800aecc:	6030      	str	r0, [r6, #0]
 800aece:	4621      	mov	r1, r4
 800aed0:	4628      	mov	r0, r5
 800aed2:	f001 f807 	bl	800bee4 <_sbrk_r>
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	d103      	bne.n	800aee2 <sbrk_aligned+0x26>
 800aeda:	f04f 34ff 	mov.w	r4, #4294967295
 800aede:	4620      	mov	r0, r4
 800aee0:	bd70      	pop	{r4, r5, r6, pc}
 800aee2:	1cc4      	adds	r4, r0, #3
 800aee4:	f024 0403 	bic.w	r4, r4, #3
 800aee8:	42a0      	cmp	r0, r4
 800aeea:	d0f8      	beq.n	800aede <sbrk_aligned+0x22>
 800aeec:	1a21      	subs	r1, r4, r0
 800aeee:	4628      	mov	r0, r5
 800aef0:	f000 fff8 	bl	800bee4 <_sbrk_r>
 800aef4:	3001      	adds	r0, #1
 800aef6:	d1f2      	bne.n	800aede <sbrk_aligned+0x22>
 800aef8:	e7ef      	b.n	800aeda <sbrk_aligned+0x1e>
 800aefa:	bf00      	nop
 800aefc:	200156d0 	.word	0x200156d0

0800af00 <_malloc_r>:
 800af00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af04:	1ccd      	adds	r5, r1, #3
 800af06:	f025 0503 	bic.w	r5, r5, #3
 800af0a:	3508      	adds	r5, #8
 800af0c:	2d0c      	cmp	r5, #12
 800af0e:	bf38      	it	cc
 800af10:	250c      	movcc	r5, #12
 800af12:	2d00      	cmp	r5, #0
 800af14:	4606      	mov	r6, r0
 800af16:	db01      	blt.n	800af1c <_malloc_r+0x1c>
 800af18:	42a9      	cmp	r1, r5
 800af1a:	d904      	bls.n	800af26 <_malloc_r+0x26>
 800af1c:	230c      	movs	r3, #12
 800af1e:	6033      	str	r3, [r6, #0]
 800af20:	2000      	movs	r0, #0
 800af22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800affc <_malloc_r+0xfc>
 800af2a:	f000 f869 	bl	800b000 <__malloc_lock>
 800af2e:	f8d8 3000 	ldr.w	r3, [r8]
 800af32:	461c      	mov	r4, r3
 800af34:	bb44      	cbnz	r4, 800af88 <_malloc_r+0x88>
 800af36:	4629      	mov	r1, r5
 800af38:	4630      	mov	r0, r6
 800af3a:	f7ff ffbf 	bl	800aebc <sbrk_aligned>
 800af3e:	1c43      	adds	r3, r0, #1
 800af40:	4604      	mov	r4, r0
 800af42:	d158      	bne.n	800aff6 <_malloc_r+0xf6>
 800af44:	f8d8 4000 	ldr.w	r4, [r8]
 800af48:	4627      	mov	r7, r4
 800af4a:	2f00      	cmp	r7, #0
 800af4c:	d143      	bne.n	800afd6 <_malloc_r+0xd6>
 800af4e:	2c00      	cmp	r4, #0
 800af50:	d04b      	beq.n	800afea <_malloc_r+0xea>
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	4639      	mov	r1, r7
 800af56:	4630      	mov	r0, r6
 800af58:	eb04 0903 	add.w	r9, r4, r3
 800af5c:	f000 ffc2 	bl	800bee4 <_sbrk_r>
 800af60:	4581      	cmp	r9, r0
 800af62:	d142      	bne.n	800afea <_malloc_r+0xea>
 800af64:	6821      	ldr	r1, [r4, #0]
 800af66:	1a6d      	subs	r5, r5, r1
 800af68:	4629      	mov	r1, r5
 800af6a:	4630      	mov	r0, r6
 800af6c:	f7ff ffa6 	bl	800aebc <sbrk_aligned>
 800af70:	3001      	adds	r0, #1
 800af72:	d03a      	beq.n	800afea <_malloc_r+0xea>
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	442b      	add	r3, r5
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	f8d8 3000 	ldr.w	r3, [r8]
 800af7e:	685a      	ldr	r2, [r3, #4]
 800af80:	bb62      	cbnz	r2, 800afdc <_malloc_r+0xdc>
 800af82:	f8c8 7000 	str.w	r7, [r8]
 800af86:	e00f      	b.n	800afa8 <_malloc_r+0xa8>
 800af88:	6822      	ldr	r2, [r4, #0]
 800af8a:	1b52      	subs	r2, r2, r5
 800af8c:	d420      	bmi.n	800afd0 <_malloc_r+0xd0>
 800af8e:	2a0b      	cmp	r2, #11
 800af90:	d917      	bls.n	800afc2 <_malloc_r+0xc2>
 800af92:	1961      	adds	r1, r4, r5
 800af94:	42a3      	cmp	r3, r4
 800af96:	6025      	str	r5, [r4, #0]
 800af98:	bf18      	it	ne
 800af9a:	6059      	strne	r1, [r3, #4]
 800af9c:	6863      	ldr	r3, [r4, #4]
 800af9e:	bf08      	it	eq
 800afa0:	f8c8 1000 	streq.w	r1, [r8]
 800afa4:	5162      	str	r2, [r4, r5]
 800afa6:	604b      	str	r3, [r1, #4]
 800afa8:	4630      	mov	r0, r6
 800afaa:	f000 f82f 	bl	800b00c <__malloc_unlock>
 800afae:	f104 000b 	add.w	r0, r4, #11
 800afb2:	1d23      	adds	r3, r4, #4
 800afb4:	f020 0007 	bic.w	r0, r0, #7
 800afb8:	1ac2      	subs	r2, r0, r3
 800afba:	bf1c      	itt	ne
 800afbc:	1a1b      	subne	r3, r3, r0
 800afbe:	50a3      	strne	r3, [r4, r2]
 800afc0:	e7af      	b.n	800af22 <_malloc_r+0x22>
 800afc2:	6862      	ldr	r2, [r4, #4]
 800afc4:	42a3      	cmp	r3, r4
 800afc6:	bf0c      	ite	eq
 800afc8:	f8c8 2000 	streq.w	r2, [r8]
 800afcc:	605a      	strne	r2, [r3, #4]
 800afce:	e7eb      	b.n	800afa8 <_malloc_r+0xa8>
 800afd0:	4623      	mov	r3, r4
 800afd2:	6864      	ldr	r4, [r4, #4]
 800afd4:	e7ae      	b.n	800af34 <_malloc_r+0x34>
 800afd6:	463c      	mov	r4, r7
 800afd8:	687f      	ldr	r7, [r7, #4]
 800afda:	e7b6      	b.n	800af4a <_malloc_r+0x4a>
 800afdc:	461a      	mov	r2, r3
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	42a3      	cmp	r3, r4
 800afe2:	d1fb      	bne.n	800afdc <_malloc_r+0xdc>
 800afe4:	2300      	movs	r3, #0
 800afe6:	6053      	str	r3, [r2, #4]
 800afe8:	e7de      	b.n	800afa8 <_malloc_r+0xa8>
 800afea:	230c      	movs	r3, #12
 800afec:	6033      	str	r3, [r6, #0]
 800afee:	4630      	mov	r0, r6
 800aff0:	f000 f80c 	bl	800b00c <__malloc_unlock>
 800aff4:	e794      	b.n	800af20 <_malloc_r+0x20>
 800aff6:	6005      	str	r5, [r0, #0]
 800aff8:	e7d6      	b.n	800afa8 <_malloc_r+0xa8>
 800affa:	bf00      	nop
 800affc:	200156d4 	.word	0x200156d4

0800b000 <__malloc_lock>:
 800b000:	4801      	ldr	r0, [pc, #4]	@ (800b008 <__malloc_lock+0x8>)
 800b002:	f7ff b8aa 	b.w	800a15a <__retarget_lock_acquire_recursive>
 800b006:	bf00      	nop
 800b008:	200156cc 	.word	0x200156cc

0800b00c <__malloc_unlock>:
 800b00c:	4801      	ldr	r0, [pc, #4]	@ (800b014 <__malloc_unlock+0x8>)
 800b00e:	f7ff b8a5 	b.w	800a15c <__retarget_lock_release_recursive>
 800b012:	bf00      	nop
 800b014:	200156cc 	.word	0x200156cc

0800b018 <_Balloc>:
 800b018:	b570      	push	{r4, r5, r6, lr}
 800b01a:	69c6      	ldr	r6, [r0, #28]
 800b01c:	4604      	mov	r4, r0
 800b01e:	460d      	mov	r5, r1
 800b020:	b976      	cbnz	r6, 800b040 <_Balloc+0x28>
 800b022:	2010      	movs	r0, #16
 800b024:	f7ff ff42 	bl	800aeac <malloc>
 800b028:	4602      	mov	r2, r0
 800b02a:	61e0      	str	r0, [r4, #28]
 800b02c:	b920      	cbnz	r0, 800b038 <_Balloc+0x20>
 800b02e:	4b18      	ldr	r3, [pc, #96]	@ (800b090 <_Balloc+0x78>)
 800b030:	4818      	ldr	r0, [pc, #96]	@ (800b094 <_Balloc+0x7c>)
 800b032:	216b      	movs	r1, #107	@ 0x6b
 800b034:	f000 ff66 	bl	800bf04 <__assert_func>
 800b038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b03c:	6006      	str	r6, [r0, #0]
 800b03e:	60c6      	str	r6, [r0, #12]
 800b040:	69e6      	ldr	r6, [r4, #28]
 800b042:	68f3      	ldr	r3, [r6, #12]
 800b044:	b183      	cbz	r3, 800b068 <_Balloc+0x50>
 800b046:	69e3      	ldr	r3, [r4, #28]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b04e:	b9b8      	cbnz	r0, 800b080 <_Balloc+0x68>
 800b050:	2101      	movs	r1, #1
 800b052:	fa01 f605 	lsl.w	r6, r1, r5
 800b056:	1d72      	adds	r2, r6, #5
 800b058:	0092      	lsls	r2, r2, #2
 800b05a:	4620      	mov	r0, r4
 800b05c:	f000 ff70 	bl	800bf40 <_calloc_r>
 800b060:	b160      	cbz	r0, 800b07c <_Balloc+0x64>
 800b062:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b066:	e00e      	b.n	800b086 <_Balloc+0x6e>
 800b068:	2221      	movs	r2, #33	@ 0x21
 800b06a:	2104      	movs	r1, #4
 800b06c:	4620      	mov	r0, r4
 800b06e:	f000 ff67 	bl	800bf40 <_calloc_r>
 800b072:	69e3      	ldr	r3, [r4, #28]
 800b074:	60f0      	str	r0, [r6, #12]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1e4      	bne.n	800b046 <_Balloc+0x2e>
 800b07c:	2000      	movs	r0, #0
 800b07e:	bd70      	pop	{r4, r5, r6, pc}
 800b080:	6802      	ldr	r2, [r0, #0]
 800b082:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b086:	2300      	movs	r3, #0
 800b088:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b08c:	e7f7      	b.n	800b07e <_Balloc+0x66>
 800b08e:	bf00      	nop
 800b090:	0800c259 	.word	0x0800c259
 800b094:	0800c2d9 	.word	0x0800c2d9

0800b098 <_Bfree>:
 800b098:	b570      	push	{r4, r5, r6, lr}
 800b09a:	69c6      	ldr	r6, [r0, #28]
 800b09c:	4605      	mov	r5, r0
 800b09e:	460c      	mov	r4, r1
 800b0a0:	b976      	cbnz	r6, 800b0c0 <_Bfree+0x28>
 800b0a2:	2010      	movs	r0, #16
 800b0a4:	f7ff ff02 	bl	800aeac <malloc>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	61e8      	str	r0, [r5, #28]
 800b0ac:	b920      	cbnz	r0, 800b0b8 <_Bfree+0x20>
 800b0ae:	4b09      	ldr	r3, [pc, #36]	@ (800b0d4 <_Bfree+0x3c>)
 800b0b0:	4809      	ldr	r0, [pc, #36]	@ (800b0d8 <_Bfree+0x40>)
 800b0b2:	218f      	movs	r1, #143	@ 0x8f
 800b0b4:	f000 ff26 	bl	800bf04 <__assert_func>
 800b0b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0bc:	6006      	str	r6, [r0, #0]
 800b0be:	60c6      	str	r6, [r0, #12]
 800b0c0:	b13c      	cbz	r4, 800b0d2 <_Bfree+0x3a>
 800b0c2:	69eb      	ldr	r3, [r5, #28]
 800b0c4:	6862      	ldr	r2, [r4, #4]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0cc:	6021      	str	r1, [r4, #0]
 800b0ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0d2:	bd70      	pop	{r4, r5, r6, pc}
 800b0d4:	0800c259 	.word	0x0800c259
 800b0d8:	0800c2d9 	.word	0x0800c2d9

0800b0dc <__multadd>:
 800b0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e0:	690d      	ldr	r5, [r1, #16]
 800b0e2:	4607      	mov	r7, r0
 800b0e4:	460c      	mov	r4, r1
 800b0e6:	461e      	mov	r6, r3
 800b0e8:	f101 0c14 	add.w	ip, r1, #20
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	f8dc 3000 	ldr.w	r3, [ip]
 800b0f2:	b299      	uxth	r1, r3
 800b0f4:	fb02 6101 	mla	r1, r2, r1, r6
 800b0f8:	0c1e      	lsrs	r6, r3, #16
 800b0fa:	0c0b      	lsrs	r3, r1, #16
 800b0fc:	fb02 3306 	mla	r3, r2, r6, r3
 800b100:	b289      	uxth	r1, r1
 800b102:	3001      	adds	r0, #1
 800b104:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b108:	4285      	cmp	r5, r0
 800b10a:	f84c 1b04 	str.w	r1, [ip], #4
 800b10e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b112:	dcec      	bgt.n	800b0ee <__multadd+0x12>
 800b114:	b30e      	cbz	r6, 800b15a <__multadd+0x7e>
 800b116:	68a3      	ldr	r3, [r4, #8]
 800b118:	42ab      	cmp	r3, r5
 800b11a:	dc19      	bgt.n	800b150 <__multadd+0x74>
 800b11c:	6861      	ldr	r1, [r4, #4]
 800b11e:	4638      	mov	r0, r7
 800b120:	3101      	adds	r1, #1
 800b122:	f7ff ff79 	bl	800b018 <_Balloc>
 800b126:	4680      	mov	r8, r0
 800b128:	b928      	cbnz	r0, 800b136 <__multadd+0x5a>
 800b12a:	4602      	mov	r2, r0
 800b12c:	4b0c      	ldr	r3, [pc, #48]	@ (800b160 <__multadd+0x84>)
 800b12e:	480d      	ldr	r0, [pc, #52]	@ (800b164 <__multadd+0x88>)
 800b130:	21ba      	movs	r1, #186	@ 0xba
 800b132:	f000 fee7 	bl	800bf04 <__assert_func>
 800b136:	6922      	ldr	r2, [r4, #16]
 800b138:	3202      	adds	r2, #2
 800b13a:	f104 010c 	add.w	r1, r4, #12
 800b13e:	0092      	lsls	r2, r2, #2
 800b140:	300c      	adds	r0, #12
 800b142:	f7ff f80c 	bl	800a15e <memcpy>
 800b146:	4621      	mov	r1, r4
 800b148:	4638      	mov	r0, r7
 800b14a:	f7ff ffa5 	bl	800b098 <_Bfree>
 800b14e:	4644      	mov	r4, r8
 800b150:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b154:	3501      	adds	r5, #1
 800b156:	615e      	str	r6, [r3, #20]
 800b158:	6125      	str	r5, [r4, #16]
 800b15a:	4620      	mov	r0, r4
 800b15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b160:	0800c2c8 	.word	0x0800c2c8
 800b164:	0800c2d9 	.word	0x0800c2d9

0800b168 <__hi0bits>:
 800b168:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b16c:	4603      	mov	r3, r0
 800b16e:	bf36      	itet	cc
 800b170:	0403      	lslcc	r3, r0, #16
 800b172:	2000      	movcs	r0, #0
 800b174:	2010      	movcc	r0, #16
 800b176:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b17a:	bf3c      	itt	cc
 800b17c:	021b      	lslcc	r3, r3, #8
 800b17e:	3008      	addcc	r0, #8
 800b180:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b184:	bf3c      	itt	cc
 800b186:	011b      	lslcc	r3, r3, #4
 800b188:	3004      	addcc	r0, #4
 800b18a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b18e:	bf3c      	itt	cc
 800b190:	009b      	lslcc	r3, r3, #2
 800b192:	3002      	addcc	r0, #2
 800b194:	2b00      	cmp	r3, #0
 800b196:	db05      	blt.n	800b1a4 <__hi0bits+0x3c>
 800b198:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b19c:	f100 0001 	add.w	r0, r0, #1
 800b1a0:	bf08      	it	eq
 800b1a2:	2020      	moveq	r0, #32
 800b1a4:	4770      	bx	lr

0800b1a6 <__lo0bits>:
 800b1a6:	6803      	ldr	r3, [r0, #0]
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	f013 0007 	ands.w	r0, r3, #7
 800b1ae:	d00b      	beq.n	800b1c8 <__lo0bits+0x22>
 800b1b0:	07d9      	lsls	r1, r3, #31
 800b1b2:	d421      	bmi.n	800b1f8 <__lo0bits+0x52>
 800b1b4:	0798      	lsls	r0, r3, #30
 800b1b6:	bf49      	itett	mi
 800b1b8:	085b      	lsrmi	r3, r3, #1
 800b1ba:	089b      	lsrpl	r3, r3, #2
 800b1bc:	2001      	movmi	r0, #1
 800b1be:	6013      	strmi	r3, [r2, #0]
 800b1c0:	bf5c      	itt	pl
 800b1c2:	6013      	strpl	r3, [r2, #0]
 800b1c4:	2002      	movpl	r0, #2
 800b1c6:	4770      	bx	lr
 800b1c8:	b299      	uxth	r1, r3
 800b1ca:	b909      	cbnz	r1, 800b1d0 <__lo0bits+0x2a>
 800b1cc:	0c1b      	lsrs	r3, r3, #16
 800b1ce:	2010      	movs	r0, #16
 800b1d0:	b2d9      	uxtb	r1, r3
 800b1d2:	b909      	cbnz	r1, 800b1d8 <__lo0bits+0x32>
 800b1d4:	3008      	adds	r0, #8
 800b1d6:	0a1b      	lsrs	r3, r3, #8
 800b1d8:	0719      	lsls	r1, r3, #28
 800b1da:	bf04      	itt	eq
 800b1dc:	091b      	lsreq	r3, r3, #4
 800b1de:	3004      	addeq	r0, #4
 800b1e0:	0799      	lsls	r1, r3, #30
 800b1e2:	bf04      	itt	eq
 800b1e4:	089b      	lsreq	r3, r3, #2
 800b1e6:	3002      	addeq	r0, #2
 800b1e8:	07d9      	lsls	r1, r3, #31
 800b1ea:	d403      	bmi.n	800b1f4 <__lo0bits+0x4e>
 800b1ec:	085b      	lsrs	r3, r3, #1
 800b1ee:	f100 0001 	add.w	r0, r0, #1
 800b1f2:	d003      	beq.n	800b1fc <__lo0bits+0x56>
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	4770      	bx	lr
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	4770      	bx	lr
 800b1fc:	2020      	movs	r0, #32
 800b1fe:	4770      	bx	lr

0800b200 <__i2b>:
 800b200:	b510      	push	{r4, lr}
 800b202:	460c      	mov	r4, r1
 800b204:	2101      	movs	r1, #1
 800b206:	f7ff ff07 	bl	800b018 <_Balloc>
 800b20a:	4602      	mov	r2, r0
 800b20c:	b928      	cbnz	r0, 800b21a <__i2b+0x1a>
 800b20e:	4b05      	ldr	r3, [pc, #20]	@ (800b224 <__i2b+0x24>)
 800b210:	4805      	ldr	r0, [pc, #20]	@ (800b228 <__i2b+0x28>)
 800b212:	f240 1145 	movw	r1, #325	@ 0x145
 800b216:	f000 fe75 	bl	800bf04 <__assert_func>
 800b21a:	2301      	movs	r3, #1
 800b21c:	6144      	str	r4, [r0, #20]
 800b21e:	6103      	str	r3, [r0, #16]
 800b220:	bd10      	pop	{r4, pc}
 800b222:	bf00      	nop
 800b224:	0800c2c8 	.word	0x0800c2c8
 800b228:	0800c2d9 	.word	0x0800c2d9

0800b22c <__multiply>:
 800b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b230:	4614      	mov	r4, r2
 800b232:	690a      	ldr	r2, [r1, #16]
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	429a      	cmp	r2, r3
 800b238:	bfa8      	it	ge
 800b23a:	4623      	movge	r3, r4
 800b23c:	460f      	mov	r7, r1
 800b23e:	bfa4      	itt	ge
 800b240:	460c      	movge	r4, r1
 800b242:	461f      	movge	r7, r3
 800b244:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b248:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b24c:	68a3      	ldr	r3, [r4, #8]
 800b24e:	6861      	ldr	r1, [r4, #4]
 800b250:	eb0a 0609 	add.w	r6, sl, r9
 800b254:	42b3      	cmp	r3, r6
 800b256:	b085      	sub	sp, #20
 800b258:	bfb8      	it	lt
 800b25a:	3101      	addlt	r1, #1
 800b25c:	f7ff fedc 	bl	800b018 <_Balloc>
 800b260:	b930      	cbnz	r0, 800b270 <__multiply+0x44>
 800b262:	4602      	mov	r2, r0
 800b264:	4b44      	ldr	r3, [pc, #272]	@ (800b378 <__multiply+0x14c>)
 800b266:	4845      	ldr	r0, [pc, #276]	@ (800b37c <__multiply+0x150>)
 800b268:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b26c:	f000 fe4a 	bl	800bf04 <__assert_func>
 800b270:	f100 0514 	add.w	r5, r0, #20
 800b274:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b278:	462b      	mov	r3, r5
 800b27a:	2200      	movs	r2, #0
 800b27c:	4543      	cmp	r3, r8
 800b27e:	d321      	bcc.n	800b2c4 <__multiply+0x98>
 800b280:	f107 0114 	add.w	r1, r7, #20
 800b284:	f104 0214 	add.w	r2, r4, #20
 800b288:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b28c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b290:	9302      	str	r3, [sp, #8]
 800b292:	1b13      	subs	r3, r2, r4
 800b294:	3b15      	subs	r3, #21
 800b296:	f023 0303 	bic.w	r3, r3, #3
 800b29a:	3304      	adds	r3, #4
 800b29c:	f104 0715 	add.w	r7, r4, #21
 800b2a0:	42ba      	cmp	r2, r7
 800b2a2:	bf38      	it	cc
 800b2a4:	2304      	movcc	r3, #4
 800b2a6:	9301      	str	r3, [sp, #4]
 800b2a8:	9b02      	ldr	r3, [sp, #8]
 800b2aa:	9103      	str	r1, [sp, #12]
 800b2ac:	428b      	cmp	r3, r1
 800b2ae:	d80c      	bhi.n	800b2ca <__multiply+0x9e>
 800b2b0:	2e00      	cmp	r6, #0
 800b2b2:	dd03      	ble.n	800b2bc <__multiply+0x90>
 800b2b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d05b      	beq.n	800b374 <__multiply+0x148>
 800b2bc:	6106      	str	r6, [r0, #16]
 800b2be:	b005      	add	sp, #20
 800b2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c4:	f843 2b04 	str.w	r2, [r3], #4
 800b2c8:	e7d8      	b.n	800b27c <__multiply+0x50>
 800b2ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800b2ce:	f1ba 0f00 	cmp.w	sl, #0
 800b2d2:	d024      	beq.n	800b31e <__multiply+0xf2>
 800b2d4:	f104 0e14 	add.w	lr, r4, #20
 800b2d8:	46a9      	mov	r9, r5
 800b2da:	f04f 0c00 	mov.w	ip, #0
 800b2de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2e2:	f8d9 3000 	ldr.w	r3, [r9]
 800b2e6:	fa1f fb87 	uxth.w	fp, r7
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800b2f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b2f4:	f8d9 7000 	ldr.w	r7, [r9]
 800b2f8:	4463      	add	r3, ip
 800b2fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b2fe:	fb0a c70b 	mla	r7, sl, fp, ip
 800b302:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b306:	b29b      	uxth	r3, r3
 800b308:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b30c:	4572      	cmp	r2, lr
 800b30e:	f849 3b04 	str.w	r3, [r9], #4
 800b312:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b316:	d8e2      	bhi.n	800b2de <__multiply+0xb2>
 800b318:	9b01      	ldr	r3, [sp, #4]
 800b31a:	f845 c003 	str.w	ip, [r5, r3]
 800b31e:	9b03      	ldr	r3, [sp, #12]
 800b320:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b324:	3104      	adds	r1, #4
 800b326:	f1b9 0f00 	cmp.w	r9, #0
 800b32a:	d021      	beq.n	800b370 <__multiply+0x144>
 800b32c:	682b      	ldr	r3, [r5, #0]
 800b32e:	f104 0c14 	add.w	ip, r4, #20
 800b332:	46ae      	mov	lr, r5
 800b334:	f04f 0a00 	mov.w	sl, #0
 800b338:	f8bc b000 	ldrh.w	fp, [ip]
 800b33c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b340:	fb09 770b 	mla	r7, r9, fp, r7
 800b344:	4457      	add	r7, sl
 800b346:	b29b      	uxth	r3, r3
 800b348:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b34c:	f84e 3b04 	str.w	r3, [lr], #4
 800b350:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b354:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b358:	f8be 3000 	ldrh.w	r3, [lr]
 800b35c:	fb09 330a 	mla	r3, r9, sl, r3
 800b360:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b364:	4562      	cmp	r2, ip
 800b366:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b36a:	d8e5      	bhi.n	800b338 <__multiply+0x10c>
 800b36c:	9f01      	ldr	r7, [sp, #4]
 800b36e:	51eb      	str	r3, [r5, r7]
 800b370:	3504      	adds	r5, #4
 800b372:	e799      	b.n	800b2a8 <__multiply+0x7c>
 800b374:	3e01      	subs	r6, #1
 800b376:	e79b      	b.n	800b2b0 <__multiply+0x84>
 800b378:	0800c2c8 	.word	0x0800c2c8
 800b37c:	0800c2d9 	.word	0x0800c2d9

0800b380 <__pow5mult>:
 800b380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b384:	4615      	mov	r5, r2
 800b386:	f012 0203 	ands.w	r2, r2, #3
 800b38a:	4607      	mov	r7, r0
 800b38c:	460e      	mov	r6, r1
 800b38e:	d007      	beq.n	800b3a0 <__pow5mult+0x20>
 800b390:	4c25      	ldr	r4, [pc, #148]	@ (800b428 <__pow5mult+0xa8>)
 800b392:	3a01      	subs	r2, #1
 800b394:	2300      	movs	r3, #0
 800b396:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b39a:	f7ff fe9f 	bl	800b0dc <__multadd>
 800b39e:	4606      	mov	r6, r0
 800b3a0:	10ad      	asrs	r5, r5, #2
 800b3a2:	d03d      	beq.n	800b420 <__pow5mult+0xa0>
 800b3a4:	69fc      	ldr	r4, [r7, #28]
 800b3a6:	b97c      	cbnz	r4, 800b3c8 <__pow5mult+0x48>
 800b3a8:	2010      	movs	r0, #16
 800b3aa:	f7ff fd7f 	bl	800aeac <malloc>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	61f8      	str	r0, [r7, #28]
 800b3b2:	b928      	cbnz	r0, 800b3c0 <__pow5mult+0x40>
 800b3b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b42c <__pow5mult+0xac>)
 800b3b6:	481e      	ldr	r0, [pc, #120]	@ (800b430 <__pow5mult+0xb0>)
 800b3b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b3bc:	f000 fda2 	bl	800bf04 <__assert_func>
 800b3c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3c4:	6004      	str	r4, [r0, #0]
 800b3c6:	60c4      	str	r4, [r0, #12]
 800b3c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b3cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3d0:	b94c      	cbnz	r4, 800b3e6 <__pow5mult+0x66>
 800b3d2:	f240 2171 	movw	r1, #625	@ 0x271
 800b3d6:	4638      	mov	r0, r7
 800b3d8:	f7ff ff12 	bl	800b200 <__i2b>
 800b3dc:	2300      	movs	r3, #0
 800b3de:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	6003      	str	r3, [r0, #0]
 800b3e6:	f04f 0900 	mov.w	r9, #0
 800b3ea:	07eb      	lsls	r3, r5, #31
 800b3ec:	d50a      	bpl.n	800b404 <__pow5mult+0x84>
 800b3ee:	4631      	mov	r1, r6
 800b3f0:	4622      	mov	r2, r4
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	f7ff ff1a 	bl	800b22c <__multiply>
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	4680      	mov	r8, r0
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	f7ff fe4b 	bl	800b098 <_Bfree>
 800b402:	4646      	mov	r6, r8
 800b404:	106d      	asrs	r5, r5, #1
 800b406:	d00b      	beq.n	800b420 <__pow5mult+0xa0>
 800b408:	6820      	ldr	r0, [r4, #0]
 800b40a:	b938      	cbnz	r0, 800b41c <__pow5mult+0x9c>
 800b40c:	4622      	mov	r2, r4
 800b40e:	4621      	mov	r1, r4
 800b410:	4638      	mov	r0, r7
 800b412:	f7ff ff0b 	bl	800b22c <__multiply>
 800b416:	6020      	str	r0, [r4, #0]
 800b418:	f8c0 9000 	str.w	r9, [r0]
 800b41c:	4604      	mov	r4, r0
 800b41e:	e7e4      	b.n	800b3ea <__pow5mult+0x6a>
 800b420:	4630      	mov	r0, r6
 800b422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b426:	bf00      	nop
 800b428:	0800c334 	.word	0x0800c334
 800b42c:	0800c259 	.word	0x0800c259
 800b430:	0800c2d9 	.word	0x0800c2d9

0800b434 <__lshift>:
 800b434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b438:	460c      	mov	r4, r1
 800b43a:	6849      	ldr	r1, [r1, #4]
 800b43c:	6923      	ldr	r3, [r4, #16]
 800b43e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b442:	68a3      	ldr	r3, [r4, #8]
 800b444:	4607      	mov	r7, r0
 800b446:	4691      	mov	r9, r2
 800b448:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b44c:	f108 0601 	add.w	r6, r8, #1
 800b450:	42b3      	cmp	r3, r6
 800b452:	db0b      	blt.n	800b46c <__lshift+0x38>
 800b454:	4638      	mov	r0, r7
 800b456:	f7ff fddf 	bl	800b018 <_Balloc>
 800b45a:	4605      	mov	r5, r0
 800b45c:	b948      	cbnz	r0, 800b472 <__lshift+0x3e>
 800b45e:	4602      	mov	r2, r0
 800b460:	4b28      	ldr	r3, [pc, #160]	@ (800b504 <__lshift+0xd0>)
 800b462:	4829      	ldr	r0, [pc, #164]	@ (800b508 <__lshift+0xd4>)
 800b464:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b468:	f000 fd4c 	bl	800bf04 <__assert_func>
 800b46c:	3101      	adds	r1, #1
 800b46e:	005b      	lsls	r3, r3, #1
 800b470:	e7ee      	b.n	800b450 <__lshift+0x1c>
 800b472:	2300      	movs	r3, #0
 800b474:	f100 0114 	add.w	r1, r0, #20
 800b478:	f100 0210 	add.w	r2, r0, #16
 800b47c:	4618      	mov	r0, r3
 800b47e:	4553      	cmp	r3, sl
 800b480:	db33      	blt.n	800b4ea <__lshift+0xb6>
 800b482:	6920      	ldr	r0, [r4, #16]
 800b484:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b488:	f104 0314 	add.w	r3, r4, #20
 800b48c:	f019 091f 	ands.w	r9, r9, #31
 800b490:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b494:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b498:	d02b      	beq.n	800b4f2 <__lshift+0xbe>
 800b49a:	f1c9 0e20 	rsb	lr, r9, #32
 800b49e:	468a      	mov	sl, r1
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	6818      	ldr	r0, [r3, #0]
 800b4a4:	fa00 f009 	lsl.w	r0, r0, r9
 800b4a8:	4310      	orrs	r0, r2
 800b4aa:	f84a 0b04 	str.w	r0, [sl], #4
 800b4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4b2:	459c      	cmp	ip, r3
 800b4b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4b8:	d8f3      	bhi.n	800b4a2 <__lshift+0x6e>
 800b4ba:	ebac 0304 	sub.w	r3, ip, r4
 800b4be:	3b15      	subs	r3, #21
 800b4c0:	f023 0303 	bic.w	r3, r3, #3
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	f104 0015 	add.w	r0, r4, #21
 800b4ca:	4584      	cmp	ip, r0
 800b4cc:	bf38      	it	cc
 800b4ce:	2304      	movcc	r3, #4
 800b4d0:	50ca      	str	r2, [r1, r3]
 800b4d2:	b10a      	cbz	r2, 800b4d8 <__lshift+0xa4>
 800b4d4:	f108 0602 	add.w	r6, r8, #2
 800b4d8:	3e01      	subs	r6, #1
 800b4da:	4638      	mov	r0, r7
 800b4dc:	612e      	str	r6, [r5, #16]
 800b4de:	4621      	mov	r1, r4
 800b4e0:	f7ff fdda 	bl	800b098 <_Bfree>
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	e7c5      	b.n	800b47e <__lshift+0x4a>
 800b4f2:	3904      	subs	r1, #4
 800b4f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4fc:	459c      	cmp	ip, r3
 800b4fe:	d8f9      	bhi.n	800b4f4 <__lshift+0xc0>
 800b500:	e7ea      	b.n	800b4d8 <__lshift+0xa4>
 800b502:	bf00      	nop
 800b504:	0800c2c8 	.word	0x0800c2c8
 800b508:	0800c2d9 	.word	0x0800c2d9

0800b50c <__mcmp>:
 800b50c:	690a      	ldr	r2, [r1, #16]
 800b50e:	4603      	mov	r3, r0
 800b510:	6900      	ldr	r0, [r0, #16]
 800b512:	1a80      	subs	r0, r0, r2
 800b514:	b530      	push	{r4, r5, lr}
 800b516:	d10e      	bne.n	800b536 <__mcmp+0x2a>
 800b518:	3314      	adds	r3, #20
 800b51a:	3114      	adds	r1, #20
 800b51c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b520:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b524:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b528:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b52c:	4295      	cmp	r5, r2
 800b52e:	d003      	beq.n	800b538 <__mcmp+0x2c>
 800b530:	d205      	bcs.n	800b53e <__mcmp+0x32>
 800b532:	f04f 30ff 	mov.w	r0, #4294967295
 800b536:	bd30      	pop	{r4, r5, pc}
 800b538:	42a3      	cmp	r3, r4
 800b53a:	d3f3      	bcc.n	800b524 <__mcmp+0x18>
 800b53c:	e7fb      	b.n	800b536 <__mcmp+0x2a>
 800b53e:	2001      	movs	r0, #1
 800b540:	e7f9      	b.n	800b536 <__mcmp+0x2a>
	...

0800b544 <__mdiff>:
 800b544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b548:	4689      	mov	r9, r1
 800b54a:	4606      	mov	r6, r0
 800b54c:	4611      	mov	r1, r2
 800b54e:	4648      	mov	r0, r9
 800b550:	4614      	mov	r4, r2
 800b552:	f7ff ffdb 	bl	800b50c <__mcmp>
 800b556:	1e05      	subs	r5, r0, #0
 800b558:	d112      	bne.n	800b580 <__mdiff+0x3c>
 800b55a:	4629      	mov	r1, r5
 800b55c:	4630      	mov	r0, r6
 800b55e:	f7ff fd5b 	bl	800b018 <_Balloc>
 800b562:	4602      	mov	r2, r0
 800b564:	b928      	cbnz	r0, 800b572 <__mdiff+0x2e>
 800b566:	4b3f      	ldr	r3, [pc, #252]	@ (800b664 <__mdiff+0x120>)
 800b568:	f240 2137 	movw	r1, #567	@ 0x237
 800b56c:	483e      	ldr	r0, [pc, #248]	@ (800b668 <__mdiff+0x124>)
 800b56e:	f000 fcc9 	bl	800bf04 <__assert_func>
 800b572:	2301      	movs	r3, #1
 800b574:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b578:	4610      	mov	r0, r2
 800b57a:	b003      	add	sp, #12
 800b57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b580:	bfbc      	itt	lt
 800b582:	464b      	movlt	r3, r9
 800b584:	46a1      	movlt	r9, r4
 800b586:	4630      	mov	r0, r6
 800b588:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b58c:	bfba      	itte	lt
 800b58e:	461c      	movlt	r4, r3
 800b590:	2501      	movlt	r5, #1
 800b592:	2500      	movge	r5, #0
 800b594:	f7ff fd40 	bl	800b018 <_Balloc>
 800b598:	4602      	mov	r2, r0
 800b59a:	b918      	cbnz	r0, 800b5a4 <__mdiff+0x60>
 800b59c:	4b31      	ldr	r3, [pc, #196]	@ (800b664 <__mdiff+0x120>)
 800b59e:	f240 2145 	movw	r1, #581	@ 0x245
 800b5a2:	e7e3      	b.n	800b56c <__mdiff+0x28>
 800b5a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b5a8:	6926      	ldr	r6, [r4, #16]
 800b5aa:	60c5      	str	r5, [r0, #12]
 800b5ac:	f109 0310 	add.w	r3, r9, #16
 800b5b0:	f109 0514 	add.w	r5, r9, #20
 800b5b4:	f104 0e14 	add.w	lr, r4, #20
 800b5b8:	f100 0b14 	add.w	fp, r0, #20
 800b5bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b5c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b5c4:	9301      	str	r3, [sp, #4]
 800b5c6:	46d9      	mov	r9, fp
 800b5c8:	f04f 0c00 	mov.w	ip, #0
 800b5cc:	9b01      	ldr	r3, [sp, #4]
 800b5ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b5d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b5d6:	9301      	str	r3, [sp, #4]
 800b5d8:	fa1f f38a 	uxth.w	r3, sl
 800b5dc:	4619      	mov	r1, r3
 800b5de:	b283      	uxth	r3, r0
 800b5e0:	1acb      	subs	r3, r1, r3
 800b5e2:	0c00      	lsrs	r0, r0, #16
 800b5e4:	4463      	add	r3, ip
 800b5e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b5ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b5f4:	4576      	cmp	r6, lr
 800b5f6:	f849 3b04 	str.w	r3, [r9], #4
 800b5fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b5fe:	d8e5      	bhi.n	800b5cc <__mdiff+0x88>
 800b600:	1b33      	subs	r3, r6, r4
 800b602:	3b15      	subs	r3, #21
 800b604:	f023 0303 	bic.w	r3, r3, #3
 800b608:	3415      	adds	r4, #21
 800b60a:	3304      	adds	r3, #4
 800b60c:	42a6      	cmp	r6, r4
 800b60e:	bf38      	it	cc
 800b610:	2304      	movcc	r3, #4
 800b612:	441d      	add	r5, r3
 800b614:	445b      	add	r3, fp
 800b616:	461e      	mov	r6, r3
 800b618:	462c      	mov	r4, r5
 800b61a:	4544      	cmp	r4, r8
 800b61c:	d30e      	bcc.n	800b63c <__mdiff+0xf8>
 800b61e:	f108 0103 	add.w	r1, r8, #3
 800b622:	1b49      	subs	r1, r1, r5
 800b624:	f021 0103 	bic.w	r1, r1, #3
 800b628:	3d03      	subs	r5, #3
 800b62a:	45a8      	cmp	r8, r5
 800b62c:	bf38      	it	cc
 800b62e:	2100      	movcc	r1, #0
 800b630:	440b      	add	r3, r1
 800b632:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b636:	b191      	cbz	r1, 800b65e <__mdiff+0x11a>
 800b638:	6117      	str	r7, [r2, #16]
 800b63a:	e79d      	b.n	800b578 <__mdiff+0x34>
 800b63c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b640:	46e6      	mov	lr, ip
 800b642:	0c08      	lsrs	r0, r1, #16
 800b644:	fa1c fc81 	uxtah	ip, ip, r1
 800b648:	4471      	add	r1, lr
 800b64a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b64e:	b289      	uxth	r1, r1
 800b650:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b654:	f846 1b04 	str.w	r1, [r6], #4
 800b658:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b65c:	e7dd      	b.n	800b61a <__mdiff+0xd6>
 800b65e:	3f01      	subs	r7, #1
 800b660:	e7e7      	b.n	800b632 <__mdiff+0xee>
 800b662:	bf00      	nop
 800b664:	0800c2c8 	.word	0x0800c2c8
 800b668:	0800c2d9 	.word	0x0800c2d9

0800b66c <__d2b>:
 800b66c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b670:	460f      	mov	r7, r1
 800b672:	2101      	movs	r1, #1
 800b674:	ec59 8b10 	vmov	r8, r9, d0
 800b678:	4616      	mov	r6, r2
 800b67a:	f7ff fccd 	bl	800b018 <_Balloc>
 800b67e:	4604      	mov	r4, r0
 800b680:	b930      	cbnz	r0, 800b690 <__d2b+0x24>
 800b682:	4602      	mov	r2, r0
 800b684:	4b23      	ldr	r3, [pc, #140]	@ (800b714 <__d2b+0xa8>)
 800b686:	4824      	ldr	r0, [pc, #144]	@ (800b718 <__d2b+0xac>)
 800b688:	f240 310f 	movw	r1, #783	@ 0x30f
 800b68c:	f000 fc3a 	bl	800bf04 <__assert_func>
 800b690:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b694:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b698:	b10d      	cbz	r5, 800b69e <__d2b+0x32>
 800b69a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b69e:	9301      	str	r3, [sp, #4]
 800b6a0:	f1b8 0300 	subs.w	r3, r8, #0
 800b6a4:	d023      	beq.n	800b6ee <__d2b+0x82>
 800b6a6:	4668      	mov	r0, sp
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	f7ff fd7c 	bl	800b1a6 <__lo0bits>
 800b6ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6b2:	b1d0      	cbz	r0, 800b6ea <__d2b+0x7e>
 800b6b4:	f1c0 0320 	rsb	r3, r0, #32
 800b6b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6bc:	430b      	orrs	r3, r1
 800b6be:	40c2      	lsrs	r2, r0
 800b6c0:	6163      	str	r3, [r4, #20]
 800b6c2:	9201      	str	r2, [sp, #4]
 800b6c4:	9b01      	ldr	r3, [sp, #4]
 800b6c6:	61a3      	str	r3, [r4, #24]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	bf0c      	ite	eq
 800b6cc:	2201      	moveq	r2, #1
 800b6ce:	2202      	movne	r2, #2
 800b6d0:	6122      	str	r2, [r4, #16]
 800b6d2:	b1a5      	cbz	r5, 800b6fe <__d2b+0x92>
 800b6d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b6d8:	4405      	add	r5, r0
 800b6da:	603d      	str	r5, [r7, #0]
 800b6dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b6e0:	6030      	str	r0, [r6, #0]
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	b003      	add	sp, #12
 800b6e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6ea:	6161      	str	r1, [r4, #20]
 800b6ec:	e7ea      	b.n	800b6c4 <__d2b+0x58>
 800b6ee:	a801      	add	r0, sp, #4
 800b6f0:	f7ff fd59 	bl	800b1a6 <__lo0bits>
 800b6f4:	9b01      	ldr	r3, [sp, #4]
 800b6f6:	6163      	str	r3, [r4, #20]
 800b6f8:	3020      	adds	r0, #32
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	e7e8      	b.n	800b6d0 <__d2b+0x64>
 800b6fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b702:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b706:	6038      	str	r0, [r7, #0]
 800b708:	6918      	ldr	r0, [r3, #16]
 800b70a:	f7ff fd2d 	bl	800b168 <__hi0bits>
 800b70e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b712:	e7e5      	b.n	800b6e0 <__d2b+0x74>
 800b714:	0800c2c8 	.word	0x0800c2c8
 800b718:	0800c2d9 	.word	0x0800c2d9

0800b71c <__ssputs_r>:
 800b71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b720:	688e      	ldr	r6, [r1, #8]
 800b722:	461f      	mov	r7, r3
 800b724:	42be      	cmp	r6, r7
 800b726:	680b      	ldr	r3, [r1, #0]
 800b728:	4682      	mov	sl, r0
 800b72a:	460c      	mov	r4, r1
 800b72c:	4690      	mov	r8, r2
 800b72e:	d82d      	bhi.n	800b78c <__ssputs_r+0x70>
 800b730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b734:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b738:	d026      	beq.n	800b788 <__ssputs_r+0x6c>
 800b73a:	6965      	ldr	r5, [r4, #20]
 800b73c:	6909      	ldr	r1, [r1, #16]
 800b73e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b742:	eba3 0901 	sub.w	r9, r3, r1
 800b746:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b74a:	1c7b      	adds	r3, r7, #1
 800b74c:	444b      	add	r3, r9
 800b74e:	106d      	asrs	r5, r5, #1
 800b750:	429d      	cmp	r5, r3
 800b752:	bf38      	it	cc
 800b754:	461d      	movcc	r5, r3
 800b756:	0553      	lsls	r3, r2, #21
 800b758:	d527      	bpl.n	800b7aa <__ssputs_r+0x8e>
 800b75a:	4629      	mov	r1, r5
 800b75c:	f7ff fbd0 	bl	800af00 <_malloc_r>
 800b760:	4606      	mov	r6, r0
 800b762:	b360      	cbz	r0, 800b7be <__ssputs_r+0xa2>
 800b764:	6921      	ldr	r1, [r4, #16]
 800b766:	464a      	mov	r2, r9
 800b768:	f7fe fcf9 	bl	800a15e <memcpy>
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b776:	81a3      	strh	r3, [r4, #12]
 800b778:	6126      	str	r6, [r4, #16]
 800b77a:	6165      	str	r5, [r4, #20]
 800b77c:	444e      	add	r6, r9
 800b77e:	eba5 0509 	sub.w	r5, r5, r9
 800b782:	6026      	str	r6, [r4, #0]
 800b784:	60a5      	str	r5, [r4, #8]
 800b786:	463e      	mov	r6, r7
 800b788:	42be      	cmp	r6, r7
 800b78a:	d900      	bls.n	800b78e <__ssputs_r+0x72>
 800b78c:	463e      	mov	r6, r7
 800b78e:	6820      	ldr	r0, [r4, #0]
 800b790:	4632      	mov	r2, r6
 800b792:	4641      	mov	r1, r8
 800b794:	f000 fb6a 	bl	800be6c <memmove>
 800b798:	68a3      	ldr	r3, [r4, #8]
 800b79a:	1b9b      	subs	r3, r3, r6
 800b79c:	60a3      	str	r3, [r4, #8]
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	4433      	add	r3, r6
 800b7a2:	6023      	str	r3, [r4, #0]
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7aa:	462a      	mov	r2, r5
 800b7ac:	f000 fbee 	bl	800bf8c <_realloc_r>
 800b7b0:	4606      	mov	r6, r0
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d1e0      	bne.n	800b778 <__ssputs_r+0x5c>
 800b7b6:	6921      	ldr	r1, [r4, #16]
 800b7b8:	4650      	mov	r0, sl
 800b7ba:	f7ff fb2d 	bl	800ae18 <_free_r>
 800b7be:	230c      	movs	r3, #12
 800b7c0:	f8ca 3000 	str.w	r3, [sl]
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7ca:	81a3      	strh	r3, [r4, #12]
 800b7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d0:	e7e9      	b.n	800b7a6 <__ssputs_r+0x8a>
	...

0800b7d4 <_svfiprintf_r>:
 800b7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d8:	4698      	mov	r8, r3
 800b7da:	898b      	ldrh	r3, [r1, #12]
 800b7dc:	061b      	lsls	r3, r3, #24
 800b7de:	b09d      	sub	sp, #116	@ 0x74
 800b7e0:	4607      	mov	r7, r0
 800b7e2:	460d      	mov	r5, r1
 800b7e4:	4614      	mov	r4, r2
 800b7e6:	d510      	bpl.n	800b80a <_svfiprintf_r+0x36>
 800b7e8:	690b      	ldr	r3, [r1, #16]
 800b7ea:	b973      	cbnz	r3, 800b80a <_svfiprintf_r+0x36>
 800b7ec:	2140      	movs	r1, #64	@ 0x40
 800b7ee:	f7ff fb87 	bl	800af00 <_malloc_r>
 800b7f2:	6028      	str	r0, [r5, #0]
 800b7f4:	6128      	str	r0, [r5, #16]
 800b7f6:	b930      	cbnz	r0, 800b806 <_svfiprintf_r+0x32>
 800b7f8:	230c      	movs	r3, #12
 800b7fa:	603b      	str	r3, [r7, #0]
 800b7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b800:	b01d      	add	sp, #116	@ 0x74
 800b802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b806:	2340      	movs	r3, #64	@ 0x40
 800b808:	616b      	str	r3, [r5, #20]
 800b80a:	2300      	movs	r3, #0
 800b80c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b80e:	2320      	movs	r3, #32
 800b810:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b814:	f8cd 800c 	str.w	r8, [sp, #12]
 800b818:	2330      	movs	r3, #48	@ 0x30
 800b81a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b9b8 <_svfiprintf_r+0x1e4>
 800b81e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b822:	f04f 0901 	mov.w	r9, #1
 800b826:	4623      	mov	r3, r4
 800b828:	469a      	mov	sl, r3
 800b82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b82e:	b10a      	cbz	r2, 800b834 <_svfiprintf_r+0x60>
 800b830:	2a25      	cmp	r2, #37	@ 0x25
 800b832:	d1f9      	bne.n	800b828 <_svfiprintf_r+0x54>
 800b834:	ebba 0b04 	subs.w	fp, sl, r4
 800b838:	d00b      	beq.n	800b852 <_svfiprintf_r+0x7e>
 800b83a:	465b      	mov	r3, fp
 800b83c:	4622      	mov	r2, r4
 800b83e:	4629      	mov	r1, r5
 800b840:	4638      	mov	r0, r7
 800b842:	f7ff ff6b 	bl	800b71c <__ssputs_r>
 800b846:	3001      	adds	r0, #1
 800b848:	f000 80a7 	beq.w	800b99a <_svfiprintf_r+0x1c6>
 800b84c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b84e:	445a      	add	r2, fp
 800b850:	9209      	str	r2, [sp, #36]	@ 0x24
 800b852:	f89a 3000 	ldrb.w	r3, [sl]
 800b856:	2b00      	cmp	r3, #0
 800b858:	f000 809f 	beq.w	800b99a <_svfiprintf_r+0x1c6>
 800b85c:	2300      	movs	r3, #0
 800b85e:	f04f 32ff 	mov.w	r2, #4294967295
 800b862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b866:	f10a 0a01 	add.w	sl, sl, #1
 800b86a:	9304      	str	r3, [sp, #16]
 800b86c:	9307      	str	r3, [sp, #28]
 800b86e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b872:	931a      	str	r3, [sp, #104]	@ 0x68
 800b874:	4654      	mov	r4, sl
 800b876:	2205      	movs	r2, #5
 800b878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b87c:	484e      	ldr	r0, [pc, #312]	@ (800b9b8 <_svfiprintf_r+0x1e4>)
 800b87e:	f7f4 fca7 	bl	80001d0 <memchr>
 800b882:	9a04      	ldr	r2, [sp, #16]
 800b884:	b9d8      	cbnz	r0, 800b8be <_svfiprintf_r+0xea>
 800b886:	06d0      	lsls	r0, r2, #27
 800b888:	bf44      	itt	mi
 800b88a:	2320      	movmi	r3, #32
 800b88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b890:	0711      	lsls	r1, r2, #28
 800b892:	bf44      	itt	mi
 800b894:	232b      	movmi	r3, #43	@ 0x2b
 800b896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b89a:	f89a 3000 	ldrb.w	r3, [sl]
 800b89e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8a0:	d015      	beq.n	800b8ce <_svfiprintf_r+0xfa>
 800b8a2:	9a07      	ldr	r2, [sp, #28]
 800b8a4:	4654      	mov	r4, sl
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	f04f 0c0a 	mov.w	ip, #10
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8b2:	3b30      	subs	r3, #48	@ 0x30
 800b8b4:	2b09      	cmp	r3, #9
 800b8b6:	d94b      	bls.n	800b950 <_svfiprintf_r+0x17c>
 800b8b8:	b1b0      	cbz	r0, 800b8e8 <_svfiprintf_r+0x114>
 800b8ba:	9207      	str	r2, [sp, #28]
 800b8bc:	e014      	b.n	800b8e8 <_svfiprintf_r+0x114>
 800b8be:	eba0 0308 	sub.w	r3, r0, r8
 800b8c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	9304      	str	r3, [sp, #16]
 800b8ca:	46a2      	mov	sl, r4
 800b8cc:	e7d2      	b.n	800b874 <_svfiprintf_r+0xa0>
 800b8ce:	9b03      	ldr	r3, [sp, #12]
 800b8d0:	1d19      	adds	r1, r3, #4
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	9103      	str	r1, [sp, #12]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	bfbb      	ittet	lt
 800b8da:	425b      	neglt	r3, r3
 800b8dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b8e0:	9307      	strge	r3, [sp, #28]
 800b8e2:	9307      	strlt	r3, [sp, #28]
 800b8e4:	bfb8      	it	lt
 800b8e6:	9204      	strlt	r2, [sp, #16]
 800b8e8:	7823      	ldrb	r3, [r4, #0]
 800b8ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8ec:	d10a      	bne.n	800b904 <_svfiprintf_r+0x130>
 800b8ee:	7863      	ldrb	r3, [r4, #1]
 800b8f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8f2:	d132      	bne.n	800b95a <_svfiprintf_r+0x186>
 800b8f4:	9b03      	ldr	r3, [sp, #12]
 800b8f6:	1d1a      	adds	r2, r3, #4
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	9203      	str	r2, [sp, #12]
 800b8fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b900:	3402      	adds	r4, #2
 800b902:	9305      	str	r3, [sp, #20]
 800b904:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b9c8 <_svfiprintf_r+0x1f4>
 800b908:	7821      	ldrb	r1, [r4, #0]
 800b90a:	2203      	movs	r2, #3
 800b90c:	4650      	mov	r0, sl
 800b90e:	f7f4 fc5f 	bl	80001d0 <memchr>
 800b912:	b138      	cbz	r0, 800b924 <_svfiprintf_r+0x150>
 800b914:	9b04      	ldr	r3, [sp, #16]
 800b916:	eba0 000a 	sub.w	r0, r0, sl
 800b91a:	2240      	movs	r2, #64	@ 0x40
 800b91c:	4082      	lsls	r2, r0
 800b91e:	4313      	orrs	r3, r2
 800b920:	3401      	adds	r4, #1
 800b922:	9304      	str	r3, [sp, #16]
 800b924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b928:	4824      	ldr	r0, [pc, #144]	@ (800b9bc <_svfiprintf_r+0x1e8>)
 800b92a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b92e:	2206      	movs	r2, #6
 800b930:	f7f4 fc4e 	bl	80001d0 <memchr>
 800b934:	2800      	cmp	r0, #0
 800b936:	d036      	beq.n	800b9a6 <_svfiprintf_r+0x1d2>
 800b938:	4b21      	ldr	r3, [pc, #132]	@ (800b9c0 <_svfiprintf_r+0x1ec>)
 800b93a:	bb1b      	cbnz	r3, 800b984 <_svfiprintf_r+0x1b0>
 800b93c:	9b03      	ldr	r3, [sp, #12]
 800b93e:	3307      	adds	r3, #7
 800b940:	f023 0307 	bic.w	r3, r3, #7
 800b944:	3308      	adds	r3, #8
 800b946:	9303      	str	r3, [sp, #12]
 800b948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b94a:	4433      	add	r3, r6
 800b94c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b94e:	e76a      	b.n	800b826 <_svfiprintf_r+0x52>
 800b950:	fb0c 3202 	mla	r2, ip, r2, r3
 800b954:	460c      	mov	r4, r1
 800b956:	2001      	movs	r0, #1
 800b958:	e7a8      	b.n	800b8ac <_svfiprintf_r+0xd8>
 800b95a:	2300      	movs	r3, #0
 800b95c:	3401      	adds	r4, #1
 800b95e:	9305      	str	r3, [sp, #20]
 800b960:	4619      	mov	r1, r3
 800b962:	f04f 0c0a 	mov.w	ip, #10
 800b966:	4620      	mov	r0, r4
 800b968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b96c:	3a30      	subs	r2, #48	@ 0x30
 800b96e:	2a09      	cmp	r2, #9
 800b970:	d903      	bls.n	800b97a <_svfiprintf_r+0x1a6>
 800b972:	2b00      	cmp	r3, #0
 800b974:	d0c6      	beq.n	800b904 <_svfiprintf_r+0x130>
 800b976:	9105      	str	r1, [sp, #20]
 800b978:	e7c4      	b.n	800b904 <_svfiprintf_r+0x130>
 800b97a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b97e:	4604      	mov	r4, r0
 800b980:	2301      	movs	r3, #1
 800b982:	e7f0      	b.n	800b966 <_svfiprintf_r+0x192>
 800b984:	ab03      	add	r3, sp, #12
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	462a      	mov	r2, r5
 800b98a:	4b0e      	ldr	r3, [pc, #56]	@ (800b9c4 <_svfiprintf_r+0x1f0>)
 800b98c:	a904      	add	r1, sp, #16
 800b98e:	4638      	mov	r0, r7
 800b990:	f7fd fd5e 	bl	8009450 <_printf_float>
 800b994:	1c42      	adds	r2, r0, #1
 800b996:	4606      	mov	r6, r0
 800b998:	d1d6      	bne.n	800b948 <_svfiprintf_r+0x174>
 800b99a:	89ab      	ldrh	r3, [r5, #12]
 800b99c:	065b      	lsls	r3, r3, #25
 800b99e:	f53f af2d 	bmi.w	800b7fc <_svfiprintf_r+0x28>
 800b9a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9a4:	e72c      	b.n	800b800 <_svfiprintf_r+0x2c>
 800b9a6:	ab03      	add	r3, sp, #12
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	462a      	mov	r2, r5
 800b9ac:	4b05      	ldr	r3, [pc, #20]	@ (800b9c4 <_svfiprintf_r+0x1f0>)
 800b9ae:	a904      	add	r1, sp, #16
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	f7fd ffe5 	bl	8009980 <_printf_i>
 800b9b6:	e7ed      	b.n	800b994 <_svfiprintf_r+0x1c0>
 800b9b8:	0800c430 	.word	0x0800c430
 800b9bc:	0800c43a 	.word	0x0800c43a
 800b9c0:	08009451 	.word	0x08009451
 800b9c4:	0800b71d 	.word	0x0800b71d
 800b9c8:	0800c436 	.word	0x0800c436

0800b9cc <__sfputc_r>:
 800b9cc:	6893      	ldr	r3, [r2, #8]
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	b410      	push	{r4}
 800b9d4:	6093      	str	r3, [r2, #8]
 800b9d6:	da08      	bge.n	800b9ea <__sfputc_r+0x1e>
 800b9d8:	6994      	ldr	r4, [r2, #24]
 800b9da:	42a3      	cmp	r3, r4
 800b9dc:	db01      	blt.n	800b9e2 <__sfputc_r+0x16>
 800b9de:	290a      	cmp	r1, #10
 800b9e0:	d103      	bne.n	800b9ea <__sfputc_r+0x1e>
 800b9e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9e6:	f7fe ba94 	b.w	8009f12 <__swbuf_r>
 800b9ea:	6813      	ldr	r3, [r2, #0]
 800b9ec:	1c58      	adds	r0, r3, #1
 800b9ee:	6010      	str	r0, [r2, #0]
 800b9f0:	7019      	strb	r1, [r3, #0]
 800b9f2:	4608      	mov	r0, r1
 800b9f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <__sfputs_r>:
 800b9fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fc:	4606      	mov	r6, r0
 800b9fe:	460f      	mov	r7, r1
 800ba00:	4614      	mov	r4, r2
 800ba02:	18d5      	adds	r5, r2, r3
 800ba04:	42ac      	cmp	r4, r5
 800ba06:	d101      	bne.n	800ba0c <__sfputs_r+0x12>
 800ba08:	2000      	movs	r0, #0
 800ba0a:	e007      	b.n	800ba1c <__sfputs_r+0x22>
 800ba0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba10:	463a      	mov	r2, r7
 800ba12:	4630      	mov	r0, r6
 800ba14:	f7ff ffda 	bl	800b9cc <__sfputc_r>
 800ba18:	1c43      	adds	r3, r0, #1
 800ba1a:	d1f3      	bne.n	800ba04 <__sfputs_r+0xa>
 800ba1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba20 <_vfiprintf_r>:
 800ba20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba24:	460d      	mov	r5, r1
 800ba26:	b09d      	sub	sp, #116	@ 0x74
 800ba28:	4614      	mov	r4, r2
 800ba2a:	4698      	mov	r8, r3
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	b118      	cbz	r0, 800ba38 <_vfiprintf_r+0x18>
 800ba30:	6a03      	ldr	r3, [r0, #32]
 800ba32:	b90b      	cbnz	r3, 800ba38 <_vfiprintf_r+0x18>
 800ba34:	f7fe f950 	bl	8009cd8 <__sinit>
 800ba38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba3a:	07d9      	lsls	r1, r3, #31
 800ba3c:	d405      	bmi.n	800ba4a <_vfiprintf_r+0x2a>
 800ba3e:	89ab      	ldrh	r3, [r5, #12]
 800ba40:	059a      	lsls	r2, r3, #22
 800ba42:	d402      	bmi.n	800ba4a <_vfiprintf_r+0x2a>
 800ba44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba46:	f7fe fb88 	bl	800a15a <__retarget_lock_acquire_recursive>
 800ba4a:	89ab      	ldrh	r3, [r5, #12]
 800ba4c:	071b      	lsls	r3, r3, #28
 800ba4e:	d501      	bpl.n	800ba54 <_vfiprintf_r+0x34>
 800ba50:	692b      	ldr	r3, [r5, #16]
 800ba52:	b99b      	cbnz	r3, 800ba7c <_vfiprintf_r+0x5c>
 800ba54:	4629      	mov	r1, r5
 800ba56:	4630      	mov	r0, r6
 800ba58:	f7fe fa9a 	bl	8009f90 <__swsetup_r>
 800ba5c:	b170      	cbz	r0, 800ba7c <_vfiprintf_r+0x5c>
 800ba5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba60:	07dc      	lsls	r4, r3, #31
 800ba62:	d504      	bpl.n	800ba6e <_vfiprintf_r+0x4e>
 800ba64:	f04f 30ff 	mov.w	r0, #4294967295
 800ba68:	b01d      	add	sp, #116	@ 0x74
 800ba6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6e:	89ab      	ldrh	r3, [r5, #12]
 800ba70:	0598      	lsls	r0, r3, #22
 800ba72:	d4f7      	bmi.n	800ba64 <_vfiprintf_r+0x44>
 800ba74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba76:	f7fe fb71 	bl	800a15c <__retarget_lock_release_recursive>
 800ba7a:	e7f3      	b.n	800ba64 <_vfiprintf_r+0x44>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba80:	2320      	movs	r3, #32
 800ba82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba86:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba8a:	2330      	movs	r3, #48	@ 0x30
 800ba8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc3c <_vfiprintf_r+0x21c>
 800ba90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba94:	f04f 0901 	mov.w	r9, #1
 800ba98:	4623      	mov	r3, r4
 800ba9a:	469a      	mov	sl, r3
 800ba9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baa0:	b10a      	cbz	r2, 800baa6 <_vfiprintf_r+0x86>
 800baa2:	2a25      	cmp	r2, #37	@ 0x25
 800baa4:	d1f9      	bne.n	800ba9a <_vfiprintf_r+0x7a>
 800baa6:	ebba 0b04 	subs.w	fp, sl, r4
 800baaa:	d00b      	beq.n	800bac4 <_vfiprintf_r+0xa4>
 800baac:	465b      	mov	r3, fp
 800baae:	4622      	mov	r2, r4
 800bab0:	4629      	mov	r1, r5
 800bab2:	4630      	mov	r0, r6
 800bab4:	f7ff ffa1 	bl	800b9fa <__sfputs_r>
 800bab8:	3001      	adds	r0, #1
 800baba:	f000 80a7 	beq.w	800bc0c <_vfiprintf_r+0x1ec>
 800babe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bac0:	445a      	add	r2, fp
 800bac2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bac4:	f89a 3000 	ldrb.w	r3, [sl]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f000 809f 	beq.w	800bc0c <_vfiprintf_r+0x1ec>
 800bace:	2300      	movs	r3, #0
 800bad0:	f04f 32ff 	mov.w	r2, #4294967295
 800bad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bad8:	f10a 0a01 	add.w	sl, sl, #1
 800badc:	9304      	str	r3, [sp, #16]
 800bade:	9307      	str	r3, [sp, #28]
 800bae0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bae4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bae6:	4654      	mov	r4, sl
 800bae8:	2205      	movs	r2, #5
 800baea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baee:	4853      	ldr	r0, [pc, #332]	@ (800bc3c <_vfiprintf_r+0x21c>)
 800baf0:	f7f4 fb6e 	bl	80001d0 <memchr>
 800baf4:	9a04      	ldr	r2, [sp, #16]
 800baf6:	b9d8      	cbnz	r0, 800bb30 <_vfiprintf_r+0x110>
 800baf8:	06d1      	lsls	r1, r2, #27
 800bafa:	bf44      	itt	mi
 800bafc:	2320      	movmi	r3, #32
 800bafe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb02:	0713      	lsls	r3, r2, #28
 800bb04:	bf44      	itt	mi
 800bb06:	232b      	movmi	r3, #43	@ 0x2b
 800bb08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb0c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb10:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb12:	d015      	beq.n	800bb40 <_vfiprintf_r+0x120>
 800bb14:	9a07      	ldr	r2, [sp, #28]
 800bb16:	4654      	mov	r4, sl
 800bb18:	2000      	movs	r0, #0
 800bb1a:	f04f 0c0a 	mov.w	ip, #10
 800bb1e:	4621      	mov	r1, r4
 800bb20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb24:	3b30      	subs	r3, #48	@ 0x30
 800bb26:	2b09      	cmp	r3, #9
 800bb28:	d94b      	bls.n	800bbc2 <_vfiprintf_r+0x1a2>
 800bb2a:	b1b0      	cbz	r0, 800bb5a <_vfiprintf_r+0x13a>
 800bb2c:	9207      	str	r2, [sp, #28]
 800bb2e:	e014      	b.n	800bb5a <_vfiprintf_r+0x13a>
 800bb30:	eba0 0308 	sub.w	r3, r0, r8
 800bb34:	fa09 f303 	lsl.w	r3, r9, r3
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	9304      	str	r3, [sp, #16]
 800bb3c:	46a2      	mov	sl, r4
 800bb3e:	e7d2      	b.n	800bae6 <_vfiprintf_r+0xc6>
 800bb40:	9b03      	ldr	r3, [sp, #12]
 800bb42:	1d19      	adds	r1, r3, #4
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	9103      	str	r1, [sp, #12]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	bfbb      	ittet	lt
 800bb4c:	425b      	neglt	r3, r3
 800bb4e:	f042 0202 	orrlt.w	r2, r2, #2
 800bb52:	9307      	strge	r3, [sp, #28]
 800bb54:	9307      	strlt	r3, [sp, #28]
 800bb56:	bfb8      	it	lt
 800bb58:	9204      	strlt	r2, [sp, #16]
 800bb5a:	7823      	ldrb	r3, [r4, #0]
 800bb5c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb5e:	d10a      	bne.n	800bb76 <_vfiprintf_r+0x156>
 800bb60:	7863      	ldrb	r3, [r4, #1]
 800bb62:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb64:	d132      	bne.n	800bbcc <_vfiprintf_r+0x1ac>
 800bb66:	9b03      	ldr	r3, [sp, #12]
 800bb68:	1d1a      	adds	r2, r3, #4
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	9203      	str	r2, [sp, #12]
 800bb6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb72:	3402      	adds	r4, #2
 800bb74:	9305      	str	r3, [sp, #20]
 800bb76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc4c <_vfiprintf_r+0x22c>
 800bb7a:	7821      	ldrb	r1, [r4, #0]
 800bb7c:	2203      	movs	r2, #3
 800bb7e:	4650      	mov	r0, sl
 800bb80:	f7f4 fb26 	bl	80001d0 <memchr>
 800bb84:	b138      	cbz	r0, 800bb96 <_vfiprintf_r+0x176>
 800bb86:	9b04      	ldr	r3, [sp, #16]
 800bb88:	eba0 000a 	sub.w	r0, r0, sl
 800bb8c:	2240      	movs	r2, #64	@ 0x40
 800bb8e:	4082      	lsls	r2, r0
 800bb90:	4313      	orrs	r3, r2
 800bb92:	3401      	adds	r4, #1
 800bb94:	9304      	str	r3, [sp, #16]
 800bb96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb9a:	4829      	ldr	r0, [pc, #164]	@ (800bc40 <_vfiprintf_r+0x220>)
 800bb9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bba0:	2206      	movs	r2, #6
 800bba2:	f7f4 fb15 	bl	80001d0 <memchr>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d03f      	beq.n	800bc2a <_vfiprintf_r+0x20a>
 800bbaa:	4b26      	ldr	r3, [pc, #152]	@ (800bc44 <_vfiprintf_r+0x224>)
 800bbac:	bb1b      	cbnz	r3, 800bbf6 <_vfiprintf_r+0x1d6>
 800bbae:	9b03      	ldr	r3, [sp, #12]
 800bbb0:	3307      	adds	r3, #7
 800bbb2:	f023 0307 	bic.w	r3, r3, #7
 800bbb6:	3308      	adds	r3, #8
 800bbb8:	9303      	str	r3, [sp, #12]
 800bbba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbbc:	443b      	add	r3, r7
 800bbbe:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbc0:	e76a      	b.n	800ba98 <_vfiprintf_r+0x78>
 800bbc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	2001      	movs	r0, #1
 800bbca:	e7a8      	b.n	800bb1e <_vfiprintf_r+0xfe>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	3401      	adds	r4, #1
 800bbd0:	9305      	str	r3, [sp, #20]
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	f04f 0c0a 	mov.w	ip, #10
 800bbd8:	4620      	mov	r0, r4
 800bbda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbde:	3a30      	subs	r2, #48	@ 0x30
 800bbe0:	2a09      	cmp	r2, #9
 800bbe2:	d903      	bls.n	800bbec <_vfiprintf_r+0x1cc>
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d0c6      	beq.n	800bb76 <_vfiprintf_r+0x156>
 800bbe8:	9105      	str	r1, [sp, #20]
 800bbea:	e7c4      	b.n	800bb76 <_vfiprintf_r+0x156>
 800bbec:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbf0:	4604      	mov	r4, r0
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e7f0      	b.n	800bbd8 <_vfiprintf_r+0x1b8>
 800bbf6:	ab03      	add	r3, sp, #12
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	462a      	mov	r2, r5
 800bbfc:	4b12      	ldr	r3, [pc, #72]	@ (800bc48 <_vfiprintf_r+0x228>)
 800bbfe:	a904      	add	r1, sp, #16
 800bc00:	4630      	mov	r0, r6
 800bc02:	f7fd fc25 	bl	8009450 <_printf_float>
 800bc06:	4607      	mov	r7, r0
 800bc08:	1c78      	adds	r0, r7, #1
 800bc0a:	d1d6      	bne.n	800bbba <_vfiprintf_r+0x19a>
 800bc0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc0e:	07d9      	lsls	r1, r3, #31
 800bc10:	d405      	bmi.n	800bc1e <_vfiprintf_r+0x1fe>
 800bc12:	89ab      	ldrh	r3, [r5, #12]
 800bc14:	059a      	lsls	r2, r3, #22
 800bc16:	d402      	bmi.n	800bc1e <_vfiprintf_r+0x1fe>
 800bc18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc1a:	f7fe fa9f 	bl	800a15c <__retarget_lock_release_recursive>
 800bc1e:	89ab      	ldrh	r3, [r5, #12]
 800bc20:	065b      	lsls	r3, r3, #25
 800bc22:	f53f af1f 	bmi.w	800ba64 <_vfiprintf_r+0x44>
 800bc26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc28:	e71e      	b.n	800ba68 <_vfiprintf_r+0x48>
 800bc2a:	ab03      	add	r3, sp, #12
 800bc2c:	9300      	str	r3, [sp, #0]
 800bc2e:	462a      	mov	r2, r5
 800bc30:	4b05      	ldr	r3, [pc, #20]	@ (800bc48 <_vfiprintf_r+0x228>)
 800bc32:	a904      	add	r1, sp, #16
 800bc34:	4630      	mov	r0, r6
 800bc36:	f7fd fea3 	bl	8009980 <_printf_i>
 800bc3a:	e7e4      	b.n	800bc06 <_vfiprintf_r+0x1e6>
 800bc3c:	0800c430 	.word	0x0800c430
 800bc40:	0800c43a 	.word	0x0800c43a
 800bc44:	08009451 	.word	0x08009451
 800bc48:	0800b9fb 	.word	0x0800b9fb
 800bc4c:	0800c436 	.word	0x0800c436

0800bc50 <__sflush_r>:
 800bc50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc58:	0716      	lsls	r6, r2, #28
 800bc5a:	4605      	mov	r5, r0
 800bc5c:	460c      	mov	r4, r1
 800bc5e:	d454      	bmi.n	800bd0a <__sflush_r+0xba>
 800bc60:	684b      	ldr	r3, [r1, #4]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	dc02      	bgt.n	800bc6c <__sflush_r+0x1c>
 800bc66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	dd48      	ble.n	800bcfe <__sflush_r+0xae>
 800bc6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc6e:	2e00      	cmp	r6, #0
 800bc70:	d045      	beq.n	800bcfe <__sflush_r+0xae>
 800bc72:	2300      	movs	r3, #0
 800bc74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc78:	682f      	ldr	r7, [r5, #0]
 800bc7a:	6a21      	ldr	r1, [r4, #32]
 800bc7c:	602b      	str	r3, [r5, #0]
 800bc7e:	d030      	beq.n	800bce2 <__sflush_r+0x92>
 800bc80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc82:	89a3      	ldrh	r3, [r4, #12]
 800bc84:	0759      	lsls	r1, r3, #29
 800bc86:	d505      	bpl.n	800bc94 <__sflush_r+0x44>
 800bc88:	6863      	ldr	r3, [r4, #4]
 800bc8a:	1ad2      	subs	r2, r2, r3
 800bc8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc8e:	b10b      	cbz	r3, 800bc94 <__sflush_r+0x44>
 800bc90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc92:	1ad2      	subs	r2, r2, r3
 800bc94:	2300      	movs	r3, #0
 800bc96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc98:	6a21      	ldr	r1, [r4, #32]
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	47b0      	blx	r6
 800bc9e:	1c43      	adds	r3, r0, #1
 800bca0:	89a3      	ldrh	r3, [r4, #12]
 800bca2:	d106      	bne.n	800bcb2 <__sflush_r+0x62>
 800bca4:	6829      	ldr	r1, [r5, #0]
 800bca6:	291d      	cmp	r1, #29
 800bca8:	d82b      	bhi.n	800bd02 <__sflush_r+0xb2>
 800bcaa:	4a2a      	ldr	r2, [pc, #168]	@ (800bd54 <__sflush_r+0x104>)
 800bcac:	410a      	asrs	r2, r1
 800bcae:	07d6      	lsls	r6, r2, #31
 800bcb0:	d427      	bmi.n	800bd02 <__sflush_r+0xb2>
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	6062      	str	r2, [r4, #4]
 800bcb6:	04d9      	lsls	r1, r3, #19
 800bcb8:	6922      	ldr	r2, [r4, #16]
 800bcba:	6022      	str	r2, [r4, #0]
 800bcbc:	d504      	bpl.n	800bcc8 <__sflush_r+0x78>
 800bcbe:	1c42      	adds	r2, r0, #1
 800bcc0:	d101      	bne.n	800bcc6 <__sflush_r+0x76>
 800bcc2:	682b      	ldr	r3, [r5, #0]
 800bcc4:	b903      	cbnz	r3, 800bcc8 <__sflush_r+0x78>
 800bcc6:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcca:	602f      	str	r7, [r5, #0]
 800bccc:	b1b9      	cbz	r1, 800bcfe <__sflush_r+0xae>
 800bcce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcd2:	4299      	cmp	r1, r3
 800bcd4:	d002      	beq.n	800bcdc <__sflush_r+0x8c>
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	f7ff f89e 	bl	800ae18 <_free_r>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	6363      	str	r3, [r4, #52]	@ 0x34
 800bce0:	e00d      	b.n	800bcfe <__sflush_r+0xae>
 800bce2:	2301      	movs	r3, #1
 800bce4:	4628      	mov	r0, r5
 800bce6:	47b0      	blx	r6
 800bce8:	4602      	mov	r2, r0
 800bcea:	1c50      	adds	r0, r2, #1
 800bcec:	d1c9      	bne.n	800bc82 <__sflush_r+0x32>
 800bcee:	682b      	ldr	r3, [r5, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d0c6      	beq.n	800bc82 <__sflush_r+0x32>
 800bcf4:	2b1d      	cmp	r3, #29
 800bcf6:	d001      	beq.n	800bcfc <__sflush_r+0xac>
 800bcf8:	2b16      	cmp	r3, #22
 800bcfa:	d11e      	bne.n	800bd3a <__sflush_r+0xea>
 800bcfc:	602f      	str	r7, [r5, #0]
 800bcfe:	2000      	movs	r0, #0
 800bd00:	e022      	b.n	800bd48 <__sflush_r+0xf8>
 800bd02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd06:	b21b      	sxth	r3, r3
 800bd08:	e01b      	b.n	800bd42 <__sflush_r+0xf2>
 800bd0a:	690f      	ldr	r7, [r1, #16]
 800bd0c:	2f00      	cmp	r7, #0
 800bd0e:	d0f6      	beq.n	800bcfe <__sflush_r+0xae>
 800bd10:	0793      	lsls	r3, r2, #30
 800bd12:	680e      	ldr	r6, [r1, #0]
 800bd14:	bf08      	it	eq
 800bd16:	694b      	ldreq	r3, [r1, #20]
 800bd18:	600f      	str	r7, [r1, #0]
 800bd1a:	bf18      	it	ne
 800bd1c:	2300      	movne	r3, #0
 800bd1e:	eba6 0807 	sub.w	r8, r6, r7
 800bd22:	608b      	str	r3, [r1, #8]
 800bd24:	f1b8 0f00 	cmp.w	r8, #0
 800bd28:	dde9      	ble.n	800bcfe <__sflush_r+0xae>
 800bd2a:	6a21      	ldr	r1, [r4, #32]
 800bd2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd2e:	4643      	mov	r3, r8
 800bd30:	463a      	mov	r2, r7
 800bd32:	4628      	mov	r0, r5
 800bd34:	47b0      	blx	r6
 800bd36:	2800      	cmp	r0, #0
 800bd38:	dc08      	bgt.n	800bd4c <__sflush_r+0xfc>
 800bd3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd42:	81a3      	strh	r3, [r4, #12]
 800bd44:	f04f 30ff 	mov.w	r0, #4294967295
 800bd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd4c:	4407      	add	r7, r0
 800bd4e:	eba8 0800 	sub.w	r8, r8, r0
 800bd52:	e7e7      	b.n	800bd24 <__sflush_r+0xd4>
 800bd54:	dfbffffe 	.word	0xdfbffffe

0800bd58 <_fflush_r>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	690b      	ldr	r3, [r1, #16]
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	460c      	mov	r4, r1
 800bd60:	b913      	cbnz	r3, 800bd68 <_fflush_r+0x10>
 800bd62:	2500      	movs	r5, #0
 800bd64:	4628      	mov	r0, r5
 800bd66:	bd38      	pop	{r3, r4, r5, pc}
 800bd68:	b118      	cbz	r0, 800bd72 <_fflush_r+0x1a>
 800bd6a:	6a03      	ldr	r3, [r0, #32]
 800bd6c:	b90b      	cbnz	r3, 800bd72 <_fflush_r+0x1a>
 800bd6e:	f7fd ffb3 	bl	8009cd8 <__sinit>
 800bd72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d0f3      	beq.n	800bd62 <_fflush_r+0xa>
 800bd7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd7c:	07d0      	lsls	r0, r2, #31
 800bd7e:	d404      	bmi.n	800bd8a <_fflush_r+0x32>
 800bd80:	0599      	lsls	r1, r3, #22
 800bd82:	d402      	bmi.n	800bd8a <_fflush_r+0x32>
 800bd84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd86:	f7fe f9e8 	bl	800a15a <__retarget_lock_acquire_recursive>
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	4621      	mov	r1, r4
 800bd8e:	f7ff ff5f 	bl	800bc50 <__sflush_r>
 800bd92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd94:	07da      	lsls	r2, r3, #31
 800bd96:	4605      	mov	r5, r0
 800bd98:	d4e4      	bmi.n	800bd64 <_fflush_r+0xc>
 800bd9a:	89a3      	ldrh	r3, [r4, #12]
 800bd9c:	059b      	lsls	r3, r3, #22
 800bd9e:	d4e1      	bmi.n	800bd64 <_fflush_r+0xc>
 800bda0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bda2:	f7fe f9db 	bl	800a15c <__retarget_lock_release_recursive>
 800bda6:	e7dd      	b.n	800bd64 <_fflush_r+0xc>

0800bda8 <__swhatbuf_r>:
 800bda8:	b570      	push	{r4, r5, r6, lr}
 800bdaa:	460c      	mov	r4, r1
 800bdac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdb0:	2900      	cmp	r1, #0
 800bdb2:	b096      	sub	sp, #88	@ 0x58
 800bdb4:	4615      	mov	r5, r2
 800bdb6:	461e      	mov	r6, r3
 800bdb8:	da0d      	bge.n	800bdd6 <__swhatbuf_r+0x2e>
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bdc0:	f04f 0100 	mov.w	r1, #0
 800bdc4:	bf14      	ite	ne
 800bdc6:	2340      	movne	r3, #64	@ 0x40
 800bdc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bdcc:	2000      	movs	r0, #0
 800bdce:	6031      	str	r1, [r6, #0]
 800bdd0:	602b      	str	r3, [r5, #0]
 800bdd2:	b016      	add	sp, #88	@ 0x58
 800bdd4:	bd70      	pop	{r4, r5, r6, pc}
 800bdd6:	466a      	mov	r2, sp
 800bdd8:	f000 f862 	bl	800bea0 <_fstat_r>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	dbec      	blt.n	800bdba <__swhatbuf_r+0x12>
 800bde0:	9901      	ldr	r1, [sp, #4]
 800bde2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bde6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bdea:	4259      	negs	r1, r3
 800bdec:	4159      	adcs	r1, r3
 800bdee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bdf2:	e7eb      	b.n	800bdcc <__swhatbuf_r+0x24>

0800bdf4 <__smakebuf_r>:
 800bdf4:	898b      	ldrh	r3, [r1, #12]
 800bdf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdf8:	079d      	lsls	r5, r3, #30
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	460c      	mov	r4, r1
 800bdfe:	d507      	bpl.n	800be10 <__smakebuf_r+0x1c>
 800be00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	6123      	str	r3, [r4, #16]
 800be08:	2301      	movs	r3, #1
 800be0a:	6163      	str	r3, [r4, #20]
 800be0c:	b003      	add	sp, #12
 800be0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be10:	ab01      	add	r3, sp, #4
 800be12:	466a      	mov	r2, sp
 800be14:	f7ff ffc8 	bl	800bda8 <__swhatbuf_r>
 800be18:	9f00      	ldr	r7, [sp, #0]
 800be1a:	4605      	mov	r5, r0
 800be1c:	4639      	mov	r1, r7
 800be1e:	4630      	mov	r0, r6
 800be20:	f7ff f86e 	bl	800af00 <_malloc_r>
 800be24:	b948      	cbnz	r0, 800be3a <__smakebuf_r+0x46>
 800be26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be2a:	059a      	lsls	r2, r3, #22
 800be2c:	d4ee      	bmi.n	800be0c <__smakebuf_r+0x18>
 800be2e:	f023 0303 	bic.w	r3, r3, #3
 800be32:	f043 0302 	orr.w	r3, r3, #2
 800be36:	81a3      	strh	r3, [r4, #12]
 800be38:	e7e2      	b.n	800be00 <__smakebuf_r+0xc>
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	6020      	str	r0, [r4, #0]
 800be3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be42:	81a3      	strh	r3, [r4, #12]
 800be44:	9b01      	ldr	r3, [sp, #4]
 800be46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be4a:	b15b      	cbz	r3, 800be64 <__smakebuf_r+0x70>
 800be4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be50:	4630      	mov	r0, r6
 800be52:	f000 f837 	bl	800bec4 <_isatty_r>
 800be56:	b128      	cbz	r0, 800be64 <__smakebuf_r+0x70>
 800be58:	89a3      	ldrh	r3, [r4, #12]
 800be5a:	f023 0303 	bic.w	r3, r3, #3
 800be5e:	f043 0301 	orr.w	r3, r3, #1
 800be62:	81a3      	strh	r3, [r4, #12]
 800be64:	89a3      	ldrh	r3, [r4, #12]
 800be66:	431d      	orrs	r5, r3
 800be68:	81a5      	strh	r5, [r4, #12]
 800be6a:	e7cf      	b.n	800be0c <__smakebuf_r+0x18>

0800be6c <memmove>:
 800be6c:	4288      	cmp	r0, r1
 800be6e:	b510      	push	{r4, lr}
 800be70:	eb01 0402 	add.w	r4, r1, r2
 800be74:	d902      	bls.n	800be7c <memmove+0x10>
 800be76:	4284      	cmp	r4, r0
 800be78:	4623      	mov	r3, r4
 800be7a:	d807      	bhi.n	800be8c <memmove+0x20>
 800be7c:	1e43      	subs	r3, r0, #1
 800be7e:	42a1      	cmp	r1, r4
 800be80:	d008      	beq.n	800be94 <memmove+0x28>
 800be82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be8a:	e7f8      	b.n	800be7e <memmove+0x12>
 800be8c:	4402      	add	r2, r0
 800be8e:	4601      	mov	r1, r0
 800be90:	428a      	cmp	r2, r1
 800be92:	d100      	bne.n	800be96 <memmove+0x2a>
 800be94:	bd10      	pop	{r4, pc}
 800be96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be9e:	e7f7      	b.n	800be90 <memmove+0x24>

0800bea0 <_fstat_r>:
 800bea0:	b538      	push	{r3, r4, r5, lr}
 800bea2:	4d07      	ldr	r5, [pc, #28]	@ (800bec0 <_fstat_r+0x20>)
 800bea4:	2300      	movs	r3, #0
 800bea6:	4604      	mov	r4, r0
 800bea8:	4608      	mov	r0, r1
 800beaa:	4611      	mov	r1, r2
 800beac:	602b      	str	r3, [r5, #0]
 800beae:	f7f5 fe75 	bl	8001b9c <_fstat>
 800beb2:	1c43      	adds	r3, r0, #1
 800beb4:	d102      	bne.n	800bebc <_fstat_r+0x1c>
 800beb6:	682b      	ldr	r3, [r5, #0]
 800beb8:	b103      	cbz	r3, 800bebc <_fstat_r+0x1c>
 800beba:	6023      	str	r3, [r4, #0]
 800bebc:	bd38      	pop	{r3, r4, r5, pc}
 800bebe:	bf00      	nop
 800bec0:	200156c8 	.word	0x200156c8

0800bec4 <_isatty_r>:
 800bec4:	b538      	push	{r3, r4, r5, lr}
 800bec6:	4d06      	ldr	r5, [pc, #24]	@ (800bee0 <_isatty_r+0x1c>)
 800bec8:	2300      	movs	r3, #0
 800beca:	4604      	mov	r4, r0
 800becc:	4608      	mov	r0, r1
 800bece:	602b      	str	r3, [r5, #0]
 800bed0:	f7f5 fe74 	bl	8001bbc <_isatty>
 800bed4:	1c43      	adds	r3, r0, #1
 800bed6:	d102      	bne.n	800bede <_isatty_r+0x1a>
 800bed8:	682b      	ldr	r3, [r5, #0]
 800beda:	b103      	cbz	r3, 800bede <_isatty_r+0x1a>
 800bedc:	6023      	str	r3, [r4, #0]
 800bede:	bd38      	pop	{r3, r4, r5, pc}
 800bee0:	200156c8 	.word	0x200156c8

0800bee4 <_sbrk_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	4d06      	ldr	r5, [pc, #24]	@ (800bf00 <_sbrk_r+0x1c>)
 800bee8:	2300      	movs	r3, #0
 800beea:	4604      	mov	r4, r0
 800beec:	4608      	mov	r0, r1
 800beee:	602b      	str	r3, [r5, #0]
 800bef0:	f000 f8ee 	bl	800c0d0 <_sbrk>
 800bef4:	1c43      	adds	r3, r0, #1
 800bef6:	d102      	bne.n	800befe <_sbrk_r+0x1a>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	b103      	cbz	r3, 800befe <_sbrk_r+0x1a>
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	bd38      	pop	{r3, r4, r5, pc}
 800bf00:	200156c8 	.word	0x200156c8

0800bf04 <__assert_func>:
 800bf04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf06:	4614      	mov	r4, r2
 800bf08:	461a      	mov	r2, r3
 800bf0a:	4b09      	ldr	r3, [pc, #36]	@ (800bf30 <__assert_func+0x2c>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4605      	mov	r5, r0
 800bf10:	68d8      	ldr	r0, [r3, #12]
 800bf12:	b954      	cbnz	r4, 800bf2a <__assert_func+0x26>
 800bf14:	4b07      	ldr	r3, [pc, #28]	@ (800bf34 <__assert_func+0x30>)
 800bf16:	461c      	mov	r4, r3
 800bf18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf1c:	9100      	str	r1, [sp, #0]
 800bf1e:	462b      	mov	r3, r5
 800bf20:	4905      	ldr	r1, [pc, #20]	@ (800bf38 <__assert_func+0x34>)
 800bf22:	f000 f86f 	bl	800c004 <fiprintf>
 800bf26:	f000 f87f 	bl	800c028 <abort>
 800bf2a:	4b04      	ldr	r3, [pc, #16]	@ (800bf3c <__assert_func+0x38>)
 800bf2c:	e7f4      	b.n	800bf18 <__assert_func+0x14>
 800bf2e:	bf00      	nop
 800bf30:	20000020 	.word	0x20000020
 800bf34:	0800c486 	.word	0x0800c486
 800bf38:	0800c458 	.word	0x0800c458
 800bf3c:	0800c44b 	.word	0x0800c44b

0800bf40 <_calloc_r>:
 800bf40:	b570      	push	{r4, r5, r6, lr}
 800bf42:	fba1 5402 	umull	r5, r4, r1, r2
 800bf46:	b93c      	cbnz	r4, 800bf58 <_calloc_r+0x18>
 800bf48:	4629      	mov	r1, r5
 800bf4a:	f7fe ffd9 	bl	800af00 <_malloc_r>
 800bf4e:	4606      	mov	r6, r0
 800bf50:	b928      	cbnz	r0, 800bf5e <_calloc_r+0x1e>
 800bf52:	2600      	movs	r6, #0
 800bf54:	4630      	mov	r0, r6
 800bf56:	bd70      	pop	{r4, r5, r6, pc}
 800bf58:	220c      	movs	r2, #12
 800bf5a:	6002      	str	r2, [r0, #0]
 800bf5c:	e7f9      	b.n	800bf52 <_calloc_r+0x12>
 800bf5e:	462a      	mov	r2, r5
 800bf60:	4621      	mov	r1, r4
 800bf62:	f7fe f86b 	bl	800a03c <memset>
 800bf66:	e7f5      	b.n	800bf54 <_calloc_r+0x14>

0800bf68 <__ascii_mbtowc>:
 800bf68:	b082      	sub	sp, #8
 800bf6a:	b901      	cbnz	r1, 800bf6e <__ascii_mbtowc+0x6>
 800bf6c:	a901      	add	r1, sp, #4
 800bf6e:	b142      	cbz	r2, 800bf82 <__ascii_mbtowc+0x1a>
 800bf70:	b14b      	cbz	r3, 800bf86 <__ascii_mbtowc+0x1e>
 800bf72:	7813      	ldrb	r3, [r2, #0]
 800bf74:	600b      	str	r3, [r1, #0]
 800bf76:	7812      	ldrb	r2, [r2, #0]
 800bf78:	1e10      	subs	r0, r2, #0
 800bf7a:	bf18      	it	ne
 800bf7c:	2001      	movne	r0, #1
 800bf7e:	b002      	add	sp, #8
 800bf80:	4770      	bx	lr
 800bf82:	4610      	mov	r0, r2
 800bf84:	e7fb      	b.n	800bf7e <__ascii_mbtowc+0x16>
 800bf86:	f06f 0001 	mvn.w	r0, #1
 800bf8a:	e7f8      	b.n	800bf7e <__ascii_mbtowc+0x16>

0800bf8c <_realloc_r>:
 800bf8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf90:	4680      	mov	r8, r0
 800bf92:	4615      	mov	r5, r2
 800bf94:	460c      	mov	r4, r1
 800bf96:	b921      	cbnz	r1, 800bfa2 <_realloc_r+0x16>
 800bf98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	f7fe bfaf 	b.w	800af00 <_malloc_r>
 800bfa2:	b92a      	cbnz	r2, 800bfb0 <_realloc_r+0x24>
 800bfa4:	f7fe ff38 	bl	800ae18 <_free_r>
 800bfa8:	2400      	movs	r4, #0
 800bfaa:	4620      	mov	r0, r4
 800bfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb0:	f000 f841 	bl	800c036 <_malloc_usable_size_r>
 800bfb4:	4285      	cmp	r5, r0
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	d802      	bhi.n	800bfc0 <_realloc_r+0x34>
 800bfba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bfbe:	d8f4      	bhi.n	800bfaa <_realloc_r+0x1e>
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	4640      	mov	r0, r8
 800bfc4:	f7fe ff9c 	bl	800af00 <_malloc_r>
 800bfc8:	4607      	mov	r7, r0
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	d0ec      	beq.n	800bfa8 <_realloc_r+0x1c>
 800bfce:	42b5      	cmp	r5, r6
 800bfd0:	462a      	mov	r2, r5
 800bfd2:	4621      	mov	r1, r4
 800bfd4:	bf28      	it	cs
 800bfd6:	4632      	movcs	r2, r6
 800bfd8:	f7fe f8c1 	bl	800a15e <memcpy>
 800bfdc:	4621      	mov	r1, r4
 800bfde:	4640      	mov	r0, r8
 800bfe0:	f7fe ff1a 	bl	800ae18 <_free_r>
 800bfe4:	463c      	mov	r4, r7
 800bfe6:	e7e0      	b.n	800bfaa <_realloc_r+0x1e>

0800bfe8 <__ascii_wctomb>:
 800bfe8:	4603      	mov	r3, r0
 800bfea:	4608      	mov	r0, r1
 800bfec:	b141      	cbz	r1, 800c000 <__ascii_wctomb+0x18>
 800bfee:	2aff      	cmp	r2, #255	@ 0xff
 800bff0:	d904      	bls.n	800bffc <__ascii_wctomb+0x14>
 800bff2:	228a      	movs	r2, #138	@ 0x8a
 800bff4:	601a      	str	r2, [r3, #0]
 800bff6:	f04f 30ff 	mov.w	r0, #4294967295
 800bffa:	4770      	bx	lr
 800bffc:	700a      	strb	r2, [r1, #0]
 800bffe:	2001      	movs	r0, #1
 800c000:	4770      	bx	lr
	...

0800c004 <fiprintf>:
 800c004:	b40e      	push	{r1, r2, r3}
 800c006:	b503      	push	{r0, r1, lr}
 800c008:	4601      	mov	r1, r0
 800c00a:	ab03      	add	r3, sp, #12
 800c00c:	4805      	ldr	r0, [pc, #20]	@ (800c024 <fiprintf+0x20>)
 800c00e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c012:	6800      	ldr	r0, [r0, #0]
 800c014:	9301      	str	r3, [sp, #4]
 800c016:	f7ff fd03 	bl	800ba20 <_vfiprintf_r>
 800c01a:	b002      	add	sp, #8
 800c01c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c020:	b003      	add	sp, #12
 800c022:	4770      	bx	lr
 800c024:	20000020 	.word	0x20000020

0800c028 <abort>:
 800c028:	b508      	push	{r3, lr}
 800c02a:	2006      	movs	r0, #6
 800c02c:	f000 f834 	bl	800c098 <raise>
 800c030:	2001      	movs	r0, #1
 800c032:	f7f5 fd7f 	bl	8001b34 <_exit>

0800c036 <_malloc_usable_size_r>:
 800c036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c03a:	1f18      	subs	r0, r3, #4
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	bfbc      	itt	lt
 800c040:	580b      	ldrlt	r3, [r1, r0]
 800c042:	18c0      	addlt	r0, r0, r3
 800c044:	4770      	bx	lr

0800c046 <_raise_r>:
 800c046:	291f      	cmp	r1, #31
 800c048:	b538      	push	{r3, r4, r5, lr}
 800c04a:	4605      	mov	r5, r0
 800c04c:	460c      	mov	r4, r1
 800c04e:	d904      	bls.n	800c05a <_raise_r+0x14>
 800c050:	2316      	movs	r3, #22
 800c052:	6003      	str	r3, [r0, #0]
 800c054:	f04f 30ff 	mov.w	r0, #4294967295
 800c058:	bd38      	pop	{r3, r4, r5, pc}
 800c05a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c05c:	b112      	cbz	r2, 800c064 <_raise_r+0x1e>
 800c05e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c062:	b94b      	cbnz	r3, 800c078 <_raise_r+0x32>
 800c064:	4628      	mov	r0, r5
 800c066:	f000 f831 	bl	800c0cc <_getpid_r>
 800c06a:	4622      	mov	r2, r4
 800c06c:	4601      	mov	r1, r0
 800c06e:	4628      	mov	r0, r5
 800c070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c074:	f000 b818 	b.w	800c0a8 <_kill_r>
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d00a      	beq.n	800c092 <_raise_r+0x4c>
 800c07c:	1c59      	adds	r1, r3, #1
 800c07e:	d103      	bne.n	800c088 <_raise_r+0x42>
 800c080:	2316      	movs	r3, #22
 800c082:	6003      	str	r3, [r0, #0]
 800c084:	2001      	movs	r0, #1
 800c086:	e7e7      	b.n	800c058 <_raise_r+0x12>
 800c088:	2100      	movs	r1, #0
 800c08a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c08e:	4620      	mov	r0, r4
 800c090:	4798      	blx	r3
 800c092:	2000      	movs	r0, #0
 800c094:	e7e0      	b.n	800c058 <_raise_r+0x12>
	...

0800c098 <raise>:
 800c098:	4b02      	ldr	r3, [pc, #8]	@ (800c0a4 <raise+0xc>)
 800c09a:	4601      	mov	r1, r0
 800c09c:	6818      	ldr	r0, [r3, #0]
 800c09e:	f7ff bfd2 	b.w	800c046 <_raise_r>
 800c0a2:	bf00      	nop
 800c0a4:	20000020 	.word	0x20000020

0800c0a8 <_kill_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4d07      	ldr	r5, [pc, #28]	@ (800c0c8 <_kill_r+0x20>)
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	4608      	mov	r0, r1
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	602b      	str	r3, [r5, #0]
 800c0b6:	f7f5 fd2d 	bl	8001b14 <_kill>
 800c0ba:	1c43      	adds	r3, r0, #1
 800c0bc:	d102      	bne.n	800c0c4 <_kill_r+0x1c>
 800c0be:	682b      	ldr	r3, [r5, #0]
 800c0c0:	b103      	cbz	r3, 800c0c4 <_kill_r+0x1c>
 800c0c2:	6023      	str	r3, [r4, #0]
 800c0c4:	bd38      	pop	{r3, r4, r5, pc}
 800c0c6:	bf00      	nop
 800c0c8:	200156c8 	.word	0x200156c8

0800c0cc <_getpid_r>:
 800c0cc:	f7f5 bd1a 	b.w	8001b04 <_getpid>

0800c0d0 <_sbrk>:
 800c0d0:	4a04      	ldr	r2, [pc, #16]	@ (800c0e4 <_sbrk+0x14>)
 800c0d2:	6811      	ldr	r1, [r2, #0]
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	b909      	cbnz	r1, 800c0dc <_sbrk+0xc>
 800c0d8:	4903      	ldr	r1, [pc, #12]	@ (800c0e8 <_sbrk+0x18>)
 800c0da:	6011      	str	r1, [r2, #0]
 800c0dc:	6810      	ldr	r0, [r2, #0]
 800c0de:	4403      	add	r3, r0
 800c0e0:	6013      	str	r3, [r2, #0]
 800c0e2:	4770      	bx	lr
 800c0e4:	200156d8 	.word	0x200156d8
 800c0e8:	200156e0 	.word	0x200156e0

0800c0ec <_init>:
 800c0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ee:	bf00      	nop
 800c0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0f2:	bc08      	pop	{r3}
 800c0f4:	469e      	mov	lr, r3
 800c0f6:	4770      	bx	lr

0800c0f8 <_fini>:
 800c0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fa:	bf00      	nop
 800c0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0fe:	bc08      	pop	{r3}
 800c100:	469e      	mov	lr, r3
 800c102:	4770      	bx	lr
